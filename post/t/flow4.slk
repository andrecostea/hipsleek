
relation P(int x).

infer [P,@flow] x1=x-1 & flow __Exc
    |- P(x) & flow __flow.
print residue.

infer [P,@flow] x=0 & flow __norm
    |- P(x) & flow __flow.
print residue.

relation_infer[][P].

/*
# flow4.slk

Entail (1) : Valid. 

Residue:
 <1>emp&x1+1=x&{FLOW,(22,23)=__Exc#E}[]
 inferred rel: [RELDEFN P(__Exc#E): ( true) -->  P(x)]
Entail (2) : Valid. 
Residue:
 <1>emp&x=0&{FLOW,(4,5)=__norm#E}[]
 inferred rel: [RELDEFN P: ( x=0) -->  P(x)]

Why did we have this? 
!!! true
!!! fixpoint2:[( P(x,flow), true)]

From:
 inferred rel: [RELDEFN P(__Exc#E): ( true) -->  P(x)]
 inferred rel: [RELDEFN P: ( x=0) -->  P(x)]

Why did we not form:
  P(x,flow) = true & 22<=flow<=23 \/ x=0 & 4<=flow<=5
Before passing to fixcalc?



*/


