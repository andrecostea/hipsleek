# foo-fact1.ss

int fact(int x)
  infer [@post]
  requires true  ensures true;

Please strengthen spec with an unknown post, e.g.
  requires true  ensures Upost1(x,res);
Before inference.
=======================================================
# foo-fact.ss

  infer [Uf]
  requires true  ensures Uf(x,res);
//  requires true ensures res=x;
{
  if (x==0) return 1;
  else return foo(1) + fact(x - 1);
}

This currently prints:

!!!REL POST :  Uf(x,res)
!!!POST:  res=1+(2*x) & 0<=x

Can we merge this post into our spec,
and then print it; as follows:

fact:
  requires true 
  ensures res=1+2*x & x>=0;

The print out from @term is as follows:


=======================================================
# foo-fact.ss --reverify

-reverify option should subject the inferred code
to a re-verification process.
=======================================================
# foo-fact2.ss

  infer [@term,@post]
  requires true  ensures true;

Since both @term and @post are specified; we should
stage it by inferring @post first.
After that, we would infer @term.

We thus expect:
 Post Inference result:
 fact:
  requires true 
  ensures res=1+2*x & x>=0;

Then:
 Termination Inference Result:
 fact:  

fact:  case {
  1<=x -> requires emp & Term[31,3,-1+(1*x)]
 ensures emp & res=1+2*x & x>=0; 
  x<=(0-1) -> requires emp & Loop[]
 ensures false & false; 
  x=0 -> requires emp & Term[31,1]
 ensures emp & res=1+2*x & x>=0; 
  }

=======================================================
# fact1.ss (DONE)

int fact(int x)
  infer [@pre_n,x,@term,@post_n]
  requires true  
  ensures true;

Need to support a mix of
infer_consts @sym and varid.
Thus, the need for twoAns type
=======================================================
# pre-1a.slk

relation R(int x,int y).
infer [R] x>y & R(x,y) |- x>0.
print residue.

 <1>emp&0<=y & R(x,y) & y<x&{FLOW,(21,22)=__norm}[]
 inferred pure: [true]
 inferred rel: [RELASS [R]: ( R(x,y)) -->  0<=y]


Why is there a useless true pre?
 inferred pure: [true]
=======================================================
# pre-1a.slk

relation R(int x,int y).
infer [R] x>y & R(x,y) |- x>0.
print residue.

 <1>emp&0<=y & R(x,y) & y<x&{FLOW,(21,22)=__norm}[]
 inferred pure: [true]
 inferred rel: [RELASS [R]: ( R(x,y)) -->  0<=y]


Why is there a useless true pre?
 inferred pure: [true]
=======================================================
# post-2.ss

int fact(int x)
  infer [Uf]
  requires true  ensures Uf(x,res);

This currently prints:

!!!REL POST :  Uf(x,res)
!!!POST:  x=res-1 & 1<=res
!!!REL PRE :  true

Can we merge this post into our spec,
and then print it; as follows:

Post Inference result:
fact:
  requires true 
  ensures res=1+2*x & x>=0;

The print out from @term is as follows:

Termination Inference Result:
fact:  case {
  1<=x -> requires emp & MayLoop[]
 ensures emp & true; 
  x<=(0-1) -> requires emp & MayLoop[]
 ensures emp & true; 
  x=0 -> requires emp & Term[31,1]
 ensures emp & true; 
  }

=======================================================
# post-2.ss

  infer [Uf]
  requires x>=0 ensures Uf(x,res);
1
This currently prints:

!!!REL POST :  Uf(x,res)
!!!POST:  x=res-1 & 1<=res
!!!REL PRE :  true

Can we merge this post into our spec,
and then print it; as follows:

Post Inference result:
fact:
  requires x>=0
  ensures res=1+2*x & x>=0;

=======================================================
# post-2b.ss

  infer [@post_n]
  requires true  ensures true;

This currently does not do post inference.

Checking procedure fact$int... 
Procedure fact$int SUCCESS.

The idea is to form a post relation,
say post_fact(x,res) to try infer a
good pure post-condition for the function.

It would need to introduce, a fresh:
 relation post_fact(int n, int r).

and then form:

  infer [post_fact]
  requires true  
  ensures post_fact(n,res);

Before passing to hip for inference similar
to post-2.ss.

=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
