

slk_simplify (nnn=0 & lg = -\inf).
/*
simplify_omega@3
simplify_omega inp1 : nnn=0 & lg+(\inf)=0
simplify_omega@3 EXIT: nnn=0 & lg=\inf & lg<(\inf)
Simplify  (2): nnn=0 & lg=\inf & lg<(\inf)

# Above result is incorrect as we suddently obtained lg=\inf

I also trace the cnv function and noticed two problems
below:

cnv_ptr_to_int@5
cnv_ptr_to_int inp1 :(true,true)
cnv_ptr_to_int inp2 : nnn=0 & lg+(\inf)=0
cnv_ptr_to_int@5 EXIT: nnn=0 & lg+(\inf)=0

# it would be good if _to_int would haveremoved \inf
  to get it suitable for pure prover

cnv_int_to_ptr@6
cnv_int_to_ptr inp1 : nnn=0 & ZInfinity'=lg & lg<ZInfinity
cnv_int_to_ptr@6 EXIT: nnn=0 & lg=\inf & lg<ZInfinity

# the to_ptr aove is suppose to replace ZInfinity with \inf
  and ZInfinity' with -\inf


*/


slk_simplify (nnn=0 & lg = -\inf) | (nnn = 0 & lg< \inf).

/*
simplify_omega@1
simplify_omega inp1 : nnn=0 & lg<(\inf)
simplify_omega@1 EXIT: nnn=0 & lg<(\inf)

simplify_omega@2
simplify_omega inp1 : nnn=0 & lg+(\inf)=0
simplify_omega@2 EXIT: nnn=0 & lg=\inf & lg<(\inf)
Simplify  (1): ((nnn=0 & lg=\inf & lg<(\inf)) | (nnn=0 & lg<(\inf)))

# I wasn't expecting two separate omega calls to be made.
I was expecting the following Omega call to be made instead;

 
  NZInfinity<Infinity (nnn=0 & lg = NZInfinity) | (nnn = 0 & lg< ZInfinity)

which should simpl

*/

slk_simplify  ninf<inf & (nnn=0 & lg=ninf) | (nnn=0 & lg<inf).
/*
simplify_omega@4
simplify_omega inp1 : nnn=0 & lg<inf
simplify_omega@4 EXIT: nnn=0 & lg<inf

simplify_omega@5
simplify_omega inp1 : ninf<inf & nnn=0 & lg=ninf
simplify_omega@5 EXIT: nnn=0 & lg=ninf & lg<inf
Simplify  (3): ((nnn=0 & lg=ninf & lg<inf) | (nnn=0 & lg<inf))

Our simplify seems to be now broken. Previously, I was
getting below similar to pairwisecheck. Did you change
the normalization?

*/

slk_pairwise  ninf<inf & (nnn=0 & lg=ninf) | (nnn=0 & lg<inf).
//PairWise  (4): nnn=0 & lg<inf

