// include test for negation on conjunction form
// normalize + pure negation + heap negation

data node { int val ;}.

//1.
//neg emp & y=3.

//2.
//neg emp & x>3.

//3.
//neg emp & x>3 & y = 3.

//4.
//neg x::node<v> & v =3.

//5.
//neg x::node<v> & v =3 & x=y.

//6.
//neg x::node<v> & v =3 & z1=z2.

//7.
//neg x::node<v> & v =3 & x=y & v1 >4 & z1!=z2.

//8.
/*
x::node<v1>&v1!=3 or y::node<v2>&v2!=4
 or x::node@Dl&true or emp&x=null
 or y::node@Dl&true or emp&y=null
 or x=y
*/
//neg x::node<v1> * y::node<v2> & v1 =3 & v2=4.

//9.
/*
x1::node<v1>&v1!=3 or x2::node<v1>&v1!=3
 or y1::node<v2>&v2!=4
 or x1::node@Dl&true or x2::node@Dl&true
 or emp&x1=null or emp&x2=null
 or y1::node@Dl&true or emp&y1=null
 or x1 = y1 or x2=y1
*/
neg x1::node<v1> * y1::node<v2> & v1 =3 & v2=4 & x1=x2.
