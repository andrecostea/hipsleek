data node{
     int val;
     node next#REC;
}.

pred_extn size[R]<k> ==
   k=0 // base case
   or R::size<i> & k=1+i // recursive case
   inv k>=0.

pred WFSeg<p> ==
  self=p 
  or self::node<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WSSA<p> ==
  self::WFSeg<q>*q::node<0,p> 
  //inv true. 
  inv self!=null.
  
pred WSS<p> ==
  self::WSSA<p>
  inv self!=null.

// if WFSeg_sz not derived, WSS_sz will use not track aux rec..
//pred WFSeg_size<p,nnn> == extends WFSeg<p> with size[REC]<nnn>.

pred WSS_sz<p,nnn> == extends WSS<p> with size[REC]<nnn>.

//pred WSS_sz<p,nnn> == extends [*] with size[REC]<nnn>.

//pred WSSA_sz<p,nnn> == extends [WSSA*] with size[REC]<nnn>.

//shape_extends_view [*] with size.

/*
# ex26a3.slk

# Why self!=null cannot be proven?


*/
