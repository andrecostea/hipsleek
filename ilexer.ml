# 1 "ilexer.mll"
 
  open Globals
  open Iparser

  let comment_level = ref (0 : int)

  let java_bcount = ref (0 : int)
  let java_code = Buffer.create 100

  let incr_linenum file_name lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
      lexbuf.Lexing.lex_curr_p <- 
	{ pos with
	    Lexing.pos_fname = file_name;
	    Lexing.pos_lnum = pos.Lexing.pos_lnum + 1;
	    Lexing.pos_bol = pos.Lexing.pos_cnum;
	}
	
  let print_error lexbuf msg =
	let pos = lexbuf.Lexing.lex_curr_p in
	  Error.report_error {Error.error_loc = {start_pos = pos;mid_pos = pos; end_pos = pos;};
						  Error.error_text = msg}

  let keywords = Hashtbl.create 100
  let _ = List.map (fun (k, t) -> Hashtbl.add keywords k t)
	[("alln", ALLN);
	 ("app", APPEND);
	 ("assert", ASSERT);
	 ("assume", ASSUME);
	 ("bind", BIND);
	 ("bool", BOOL);
	 ("break", BREAK);
	 ("case",CASE);
	 ("class", CLASS);
	 ("coercion", COERCION);
	 ("conseq", CONSEQ);
	 ("const", CONST);
	 ("continue", CONTINUE);
	 ("data", DATA);
	 ("debug", DDEBUG);
	 ("diff", DIFF);
	 ("dynamic", DYNAMIC);
	 ("else", ELSE);
	 ("ensures", ENSURES);
	 ("enum", ENUM);
	 ("ex", EXISTS);
	 ("exists", EXISTS);
	 ("extends", EXTENDS);
	 ("false", FALSE);
	 ("float", FLOAT);
	 ("fold", FOLD);
	 ("forall", FORALL);
	 ("head", HEAD);
	 ("if", IF);
	 ("@I", IMM);
	 ("implies", IMPLIES);
	 ("import", IMPORT);
	 ("in", IN);
         ("include", INCLUDE);
	 ("inlist", INLIST);
	 ("int", INT);
	 ("intersect", INTERSECT);
	 ("inv", INV);
	 ("len", LENGTH);
	 ("max", MAX);
	 ("min", MIN);
	 ("bagmax", BAGMAX);
	 ("bagmin", BAGMIN);
	 ("new", NEW);
	 ("notin", NOTIN);
	 ("notinlist", NOTINLIST);
	 ("null", NULL);
	 ("off", OFF);
	 ("on", ON);
	 ("or", ORWORD);
     ("perm", PERM);
	 ("dprint", PRINT);
	 ("ref", REF);
	 ("requires", REQUIRES);
	 ("res", RES "res");
	 ("rev", REVERSE);
	 ("return", RETURN);
	 ("self", SELF "self");
	 ("split", SPLIT);
	 ("subset", SUBSET);
	 ("static", STATIC);
	 ("tail", TAIL);
	 ("then", THEN);
	 ("this", THIS "this");
     ("time", DTIME);
	 ("to", TO);
	 ("true", TRUE);
	 ("unfold", UNFOLD);
	 ("union", UNION);
	 ("variance", VARIANCE);
	 ("view", VIEW);
	 ("void", VOID);
	 ("where", WHERE);
	 ("while", WHILE);
     ("global", GLOBAL);
	 (*exception related*)
	 (flow, FLOW flow);
	 ("try", TRY);
	 ("catch", CATCH);
	 ("finally", FINALLY);
	 ("throws", THROWS);
	 ("raise",RAISE);
	]

# 112 "ilexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\196\255\001\000\199\255\200\255\078\000\155\000\208\255\
    \209\255\002\000\031\000\159\000\222\255\012\000\224\255\033\000\
    \168\000\232\255\035\000\170\000\076\000\192\000\184\000\241\255\
    \242\255\243\255\046\000\245\255\082\000\249\255\068\000\104\000\
    \181\000\219\255\254\255\255\255\252\255\250\255\111\000\246\255\
    \213\255\244\255\195\000\013\001\071\001\129\001\204\255\231\255\
    \109\000\205\255\228\255\110\000\235\255\233\255\215\255\220\255\
    \230\255\226\255\223\255\218\255\221\255\217\255\216\255\204\001\
    \197\255\253\001\253\255\254\255\255\255\152\001\250\255\002\000\
    \253\255\254\255\255\255\251\255\062\001\250\255\004\000\253\255\
    \132\000\167\000\255\255\254\255\251\255\017\001\254\255\255\255\
    \005\000\222\000\253\255\254\255\107\000\105\000\107\000\105\000\
    \105\000\255\255\254\001\254\255\255\001\220\000\254\255\255\001\
    \000\002\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\057\000\255\255\255\255\054\000\052\000\255\255\
    \255\255\048\000\044\000\045\000\255\255\043\000\255\255\030\000\
    \028\000\255\255\021\000\026\000\017\000\016\000\015\000\255\255\
    \255\255\255\255\041\000\255\255\007\000\255\255\004\000\002\000\
    \049\000\255\255\255\255\255\255\255\255\255\255\008\000\255\255\
    \255\255\255\255\053\000\255\255\255\255\255\255\255\255\255\255\
    \018\000\255\255\255\255\019\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\255\255\
    \005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\001\000\
    \255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\000\000\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\066\000\000\000\000\000\000\000\070\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\077\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\086\000\000\000\000\000\
    \255\255\091\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\099\000\000\000\255\255\102\000\000\000\104\000\
    \104\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\003\000\064\000\075\000\002\000\084\000\087\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\015\000\021\000\017\000\023\000\010\000\031\000\008\000\
    \012\000\025\000\009\000\011\000\027\000\016\000\022\000\032\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\028\000\007\000\019\000\020\000\018\000\062\000\
    \030\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\013\000\061\000\024\000\057\000\005\000\
    \053\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\014\000\026\000\029\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \058\000\048\000\047\000\041\000\038\000\037\000\036\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\039\000\040\000\049\000\052\000\005\000\083\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\063\000\059\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\055\000\082\000\051\000\
    \093\000\094\000\095\000\096\000\060\000\097\000\000\000\035\000\
    \000\000\000\000\000\000\000\000\034\000\054\000\056\000\050\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\033\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\000\000\103\000\000\000\
    \001\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\087\000\000\000\000\000\088\000\043\000\
    \000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\044\000\000\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\092\000\
    \079\000\000\000\000\000\078\000\000\000\000\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \081\000\000\000\000\000\000\000\043\000\080\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\072\000\046\000\000\000\071\000\045\000\000\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\255\255\000\000\090\000\000\000\
    \045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\067\000\100\000\
    \100\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\073\000\000\000\074\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\067\000\100\000\100\000\
    \000\000\255\255\105\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\002\000\071\000\000\000\078\000\088\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\000\000\015\000\000\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \013\000\020\000\020\000\026\000\028\000\030\000\031\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\038\000\026\000\048\000\051\000\005\000\080\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\006\000\011\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\016\000\081\000\019\000\
    \092\000\093\000\094\000\095\000\011\000\096\000\255\255\032\000\
    \255\255\255\255\255\255\255\255\032\000\016\000\016\000\019\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\032\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\255\255\101\000\255\255\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\085\000\255\255\255\255\085\000\021\000\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\043\000\255\255\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\089\000\
    \076\000\255\255\255\255\076\000\255\255\255\255\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \076\000\255\255\255\255\255\255\043\000\076\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\069\000\045\000\255\255\069\000\044\000\255\255\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\101\000\255\255\089\000\255\255\
    \045\000\255\255\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\065\000\098\000\
    \100\000\103\000\104\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\085\000\255\255\069\000\255\255\069\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\065\000\098\000\100\000\
    \255\255\103\000\104\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\076\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \065\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \069\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\065\000\098\000\103\000\
    \104\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec tokenizer file_name lexbuf =
    __ocaml_lex_tokenizer_rec file_name lexbuf 0
and __ocaml_lex_tokenizer_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 119 "ilexer.mll"
         ( 
	  comment_level := 0;
	  comment file_name lexbuf 
	)
# 379 "ilexer.ml"

  | 1 ->
# 123 "ilexer.mll"
         ( line_comment file_name lexbuf )
# 384 "ilexer.ml"

  | 2 ->
# 124 "ilexer.mll"
        ( AND )
# 389 "ilexer.ml"

  | 3 ->
# 125 "ilexer.mll"
         ( ANDAND )
# 394 "ilexer.ml"

  | 4 ->
# 126 "ilexer.mll"
        ( AT )
# 399 "ilexer.ml"

  | 5 ->
# 127 "ilexer.mll"
         (IMM)
# 404 "ilexer.ml"

  | 6 ->
# 128 "ilexer.mll"
        ( CBRACE )
# 409 "ilexer.ml"

  | 7 ->
# 129 "ilexer.mll"
        ( COLON )
# 414 "ilexer.ml"

  | 8 ->
# 130 "ilexer.mll"
         ( COLONCOLON )
# 419 "ilexer.ml"

  | 9 ->
# 131 "ilexer.mll"
          ( COLONCOLONCOLON )
# 424 "ilexer.ml"

  | 10 ->
# 132 "ilexer.mll"
        ( COMMA )
# 429 "ilexer.ml"

  | 11 ->
# 133 "ilexer.mll"
         ( CLIST )
# 434 "ilexer.ml"

  | 12 ->
# 134 "ilexer.mll"
        ( CPAREN )
# 439 "ilexer.ml"

  | 13 ->
# 135 "ilexer.mll"
        ( CSQUARE )
# 444 "ilexer.ml"

  | 14 ->
# 136 "ilexer.mll"
        ( DOLLAR )
# 449 "ilexer.ml"

  | 15 ->
# 137 "ilexer.mll"
        ( DOT )
# 454 "ilexer.ml"

  | 16 ->
# 138 "ilexer.mll"
         ( DOUBLEQUOTE )
# 459 "ilexer.ml"

  | 17 ->
# 139 "ilexer.mll"
        ( EQ )
# 464 "ilexer.ml"

  | 18 ->
# 140 "ilexer.mll"
         ( EQEQ )
# 469 "ilexer.ml"

  | 19 ->
# 141 "ilexer.mll"
         ( RIGHTARROW )
# 474 "ilexer.ml"

  | 20 ->
# 142 "ilexer.mll"
          ( EQUIV )
# 479 "ilexer.ml"

  | 21 ->
# 143 "ilexer.mll"
        ( GT )
# 484 "ilexer.ml"

  | 22 ->
# 144 "ilexer.mll"
         ( GTE )
# 489 "ilexer.ml"

  | 23 ->
# 145 "ilexer.mll"
        ( HASH )
# 494 "ilexer.ml"

  | 24 ->
# 146 "ilexer.mll"
         ( IMPLY )
# 499 "ilexer.ml"

  | 25 ->
# 147 "ilexer.mll"
         ( LEFTARROW )
# 504 "ilexer.ml"

  | 26 ->
# 148 "ilexer.mll"
        ( LT )
# 509 "ilexer.ml"

  | 27 ->
# 149 "ilexer.mll"
         ( LTE )
# 514 "ilexer.ml"

  | 28 ->
# 150 "ilexer.mll"
        ( MINUS )
# 519 "ilexer.ml"

  | 29 ->
# 151 "ilexer.mll"
         ( NEQ )
# 524 "ilexer.ml"

  | 30 ->
# 152 "ilexer.mll"
        ( NOT )
# 529 "ilexer.ml"

  | 31 ->
# 153 "ilexer.mll"
        ( OBRACE )
# 534 "ilexer.ml"

  | 32 ->
# 154 "ilexer.mll"
         ( OLIST )
# 539 "ilexer.ml"

  | 33 ->
# 155 "ilexer.mll"
        ( OPAREN )
# 544 "ilexer.ml"

  | 34 ->
# 156 "ilexer.mll"
         ( OP_ADD_ASSIGN )
# 549 "ilexer.ml"

  | 35 ->
# 157 "ilexer.mll"
         ( OP_DEC )
# 554 "ilexer.ml"

  | 36 ->
# 158 "ilexer.mll"
         ( OP_DIV_ASSIGN )
# 559 "ilexer.ml"

  | 37 ->
# 159 "ilexer.mll"
         ( OP_INC )
# 564 "ilexer.ml"

  | 38 ->
# 160 "ilexer.mll"
         ( OP_MOD_ASSIGN )
# 569 "ilexer.ml"

  | 39 ->
# 161 "ilexer.mll"
         ( OP_MULT_ASSIGN )
# 574 "ilexer.ml"

  | 40 ->
# 162 "ilexer.mll"
         ( OP_SUB_ASSIGN )
# 579 "ilexer.ml"

  | 41 ->
# 163 "ilexer.mll"
        ( OR )
# 584 "ilexer.ml"

  | 42 ->
# 164 "ilexer.mll"
         ( OROR )
# 589 "ilexer.ml"

  | 43 ->
# 165 "ilexer.mll"
        ( OSQUARE )
# 594 "ilexer.ml"

  | 44 ->
# 166 "ilexer.mll"
        ( PERCENT )
# 599 "ilexer.ml"

  | 45 ->
# 167 "ilexer.mll"
        ( PLUS )
# 604 "ilexer.ml"

  | 46 ->
# 168 "ilexer.mll"
         ( PRIME )
# 609 "ilexer.ml"

  | 47 ->
# 169 "ilexer.mll"
        ( SEMICOLON )
# 614 "ilexer.ml"

  | 48 ->
# 170 "ilexer.mll"
        ( STAR )
# 619 "ilexer.ml"

  | 49 ->
# 171 "ilexer.mll"
        ( DIV )
# 624 "ilexer.ml"

  | 50 ->
# 172 "ilexer.mll"
          ( ESCAPE )
# 629 "ilexer.ml"

  | 51 ->
let
# 173 "ilexer.mll"
                   hfile
# 635 "ilexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 173 "ilexer.mll"
                         ( HEADER_FILE (hfile) )
# 639 "ilexer.ml"

  | 52 ->
let
# 174 "ilexer.mll"
              numstr
# 645 "ilexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 174 "ilexer.mll"
                     ( LITERAL_INTEGER (int_of_string numstr) )
# 649 "ilexer.ml"

  | 53 ->
let
# 175 "ilexer.mll"
            numstr
# 655 "ilexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 175 "ilexer.mll"
                   ( LITERAL_FLOAT (float_of_string numstr) )
# 659 "ilexer.ml"

  | 54 ->
let
# 176 "ilexer.mll"
                             idstr
# 665 "ilexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 177 "ilexer.mll"
   (
		if idstr = "_" then
			begin
				IDENTIFIER ("Anon" ^ fresh_trailer ())
		  end
		else if idstr = "java" then begin
		  pre_java file_name lexbuf (* search for the first opening brace *)
		end else
		  try Hashtbl.find keywords idstr
		  with | _ -> IDENTIFIER idstr
	  )
# 679 "ilexer.ml"

  | 55 ->
# 188 "ilexer.mll"
               ( tokenizer file_name lexbuf )
# 684 "ilexer.ml"

  | 56 ->
# 189 "ilexer.mll"
         ( incr_linenum file_name lexbuf; tokenizer file_name lexbuf )
# 689 "ilexer.ml"

  | 57 ->
# 190 "ilexer.mll"
         ( incr_linenum file_name lexbuf; tokenizer file_name lexbuf )
# 694 "ilexer.ml"

  | 58 ->
# 191 "ilexer.mll"
           ( incr_linenum file_name lexbuf; tokenizer file_name lexbuf )
# 699 "ilexer.ml"

  | 59 ->
# 192 "ilexer.mll"
        ( EOF )
# 704 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tokenizer_rec file_name lexbuf __ocaml_lex_state

and pre_java file_name lexbuf =
    __ocaml_lex_pre_java_rec file_name lexbuf 65
and __ocaml_lex_pre_java_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 196 "ilexer.mll"
        (
	  java_bcount := 0;
	  Buffer.clear java_code;
	  java file_name lexbuf
	)
# 719 "ilexer.ml"

  | 1 ->
# 201 "ilexer.mll"
               ( pre_java file_name lexbuf )
# 724 "ilexer.ml"

  | 2 ->
# 202 "ilexer.mll"
      ( print_error lexbuf "java keyword must be followed by Java code enclosed in {}" )
# 729 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_pre_java_rec file_name lexbuf __ocaml_lex_state

and java file_name lexbuf =
    __ocaml_lex_java_rec file_name lexbuf 69
and __ocaml_lex_java_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 205 "ilexer.mll"
        (
	  if !java_bcount = 0 then
		JAVA (Buffer.contents java_code)
	  else begin
		java_bcount := !java_bcount - 1;
		Buffer.add_char java_code '}';
		java file_name lexbuf
	  end
	)
# 748 "ilexer.ml"

  | 1 ->
# 214 "ilexer.mll"
        (
	  java_bcount := !java_bcount + 1;
	  Buffer.add_char java_code '{';
	  java file_name lexbuf
	)
# 757 "ilexer.ml"

  | 2 ->
# 219 "ilexer.mll"
         ( 
	  incr_linenum file_name lexbuf; 
	  Buffer.add_char java_code '\n'; 
	  java file_name lexbuf 
	)
# 766 "ilexer.ml"

  | 3 ->
# 224 "ilexer.mll"
         ( 
	  incr_linenum file_name lexbuf; 
	  Buffer.add_char java_code '\r'; 
	  java file_name lexbuf 
	)
# 775 "ilexer.ml"

  | 4 ->
# 229 "ilexer.mll"
           (
	  incr_linenum file_name lexbuf; 
	  Buffer.add_string java_code "\r\n";
	  java file_name lexbuf 
	)
# 784 "ilexer.ml"

  | 5 ->
let
# 234 "ilexer.mll"
         c
# 790 "ilexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 234 "ilexer.mll"
            ( 
	  Buffer.add_char java_code c;
	  java file_name lexbuf 
	)
# 797 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_java_rec file_name lexbuf __ocaml_lex_state

and comment file_name lexbuf =
    __ocaml_lex_comment_rec file_name lexbuf 76
and __ocaml_lex_comment_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 240 "ilexer.mll"
         ( 
	  if !comment_level = 0 then
		tokenizer file_name lexbuf 
	  else begin
		comment_level := !comment_level - 1;
		comment file_name lexbuf
	  end
	)
# 815 "ilexer.ml"

  | 1 ->
# 248 "ilexer.mll"
         (
	  comment_level := !comment_level + 1;
	  comment file_name lexbuf
	)
# 823 "ilexer.ml"

  | 2 ->
# 252 "ilexer.mll"
         ( incr_linenum file_name lexbuf; comment file_name lexbuf )
# 828 "ilexer.ml"

  | 3 ->
# 253 "ilexer.mll"
         ( incr_linenum file_name lexbuf; comment file_name lexbuf )
# 833 "ilexer.ml"

  | 4 ->
# 254 "ilexer.mll"
           ( incr_linenum file_name lexbuf; comment file_name lexbuf )
# 838 "ilexer.ml"

  | 5 ->
# 255 "ilexer.mll"
       ( comment file_name lexbuf )
# 843 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec file_name lexbuf __ocaml_lex_state

and line_comment file_name lexbuf =
    __ocaml_lex_line_comment_rec file_name lexbuf 85
and __ocaml_lex_line_comment_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 258 "ilexer.mll"
                         ( incr_linenum file_name lexbuf; tokenizer file_name lexbuf )
# 854 "ilexer.ml"

  | 1 ->
# 259 "ilexer.mll"
      ( line_comment file_name lexbuf )
# 859 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_comment_rec file_name lexbuf __ocaml_lex_state

and preprocess pfile lexbuf =
    __ocaml_lex_preprocess_rec pfile lexbuf 89
and __ocaml_lex_preprocess_rec pfile lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 263 "ilexer.mll"
      (
		(* processing import *)
		let _ = rip_ws lexbuf in
		let tmp_file_name = get_file_name lexbuf in
		let file_name = String.sub tmp_file_name 1 (String.length tmp_file_name - 2) in
		let in_file = open_in file_name in
		let cont = ref true in
		let in_cont = Buffer.create 1024 in
		  while !cont do
			try
			  let line = input_line in_file in
				Buffer.add_string in_cont (line ^ "\n")
			with
			  | End_of_file -> cont := false
		  done;
		  output_string pfile (Buffer.contents in_cont);
		  preprocess pfile lexbuf
      )
# 887 "ilexer.ml"

  | 1 ->
let
# 281 "ilexer.mll"
         c
# 893 "ilexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 282 "ilexer.mll"
      ( (* other character, just copy it over *)
		output_char pfile c;
		preprocess pfile lexbuf
		  
      )
# 901 "ilexer.ml"

  | 2 ->
# 287 "ilexer.mll"
        (  )
# 906 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_preprocess_rec pfile lexbuf __ocaml_lex_state

and rip_ws lexbuf =
    __ocaml_lex_rip_ws_rec lexbuf 98
and __ocaml_lex_rip_ws_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 290 "ilexer.mll"
                     ws
# 918 "ilexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 290 "ilexer.mll"
                        ( ws )
# 922 "ilexer.ml"

  | 1 ->
# 291 "ilexer.mll"
       ( print_string "There must be whitespace after import directive\n"; exit (-1) )
# 927 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_rip_ws_rec lexbuf __ocaml_lex_state

and get_file_name lexbuf =
    __ocaml_lex_get_file_name_rec lexbuf 101
and __ocaml_lex_get_file_name_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 294 "ilexer.mll"
                                fn
# 939 "ilexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 294 "ilexer.mll"
                                   ( fn )
# 943 "ilexer.ml"

  | 1 ->
# 295 "ilexer.mll"
      ( print_string "file name following import must be enclosed in double quotes\n"; exit (-1) )
# 948 "ilexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_get_file_name_rec lexbuf __ocaml_lex_state

;;

