// README:

//       Use @arr_ba for bi-abduction
//       Use @arr_en for classical entailment.
// 	 Use @arr_enfr for entailment with frame inference

//       In classical entailment, by default, it will just return TRUE or FALSE.
//       To generate pre-condition instead of just TRUE or FALSE, run with "--arr-pre".
//       For example, ../../sleek ex1.slk --arr-pre
//       To print all the intermediate steps, run with --verbose-arr
      
pred_prim Aseg<start:int, end:int> inv start<=end.
pred_prim AsegNE<start:int, end:int>.
pred_prim Elem<start:int,value:int>.

// infer[@arr_enfr]  base::AsegNE<k,m>  |-  base::AsegNE<10,11>.
// print residue.
// expect Fail.

// infer[@arr_enfr]  base::AsegNE<k,m>  |-  base::AsegNE<k,k+1>.
// print residue.
// expect Valid.

// infer[@arr_enfr] base::Elem<a,b> * base::Elem<c,d> * base::Elem<e,f> |- base::Elem<a,b> * base::Elem<c,d>.
// print residue.
// expect Valid.

// infer[@arr_enfr] base::Elem<a,b> * base::Elem<c,d> * base::Elem<e,f> |- base::Elem<a,b>.
// print residue.
// expect Valid.

infer[@arr_enfr]  base::AsegNE<k,m> * base::AsegNE<a,b> |-  base::AsegNE<k,m>.
print residue.
expect Valid.



/*
infer[@arr_enfr] base::AsegNE<i,m> & i=m-1 |- base::AsegNE<m-1,m>.
print residue.
expect Valid.
*/
// infer[@arr_enfr] base::AsegNE<i_92,m_93> & v_bool_31_2034' & m=i+1 & m'=i+1 & pivot'=pivot & base'=base & i_92=i &  i'=i & m_93=i+1 |- (exists i_104,flted_24_103: base'::AsegNE<i_104,flted_24_103>@M&
// flted_24_103=1+i' & 0<=i' & i_104=i').
// print residue.
// expect Valid.

// infer[@arr_ba] base::AsegNE<i,m> & i1>=i & i1<m |- base::AsegNE<i1,i1+1>.
// print residue.
// expect Fail.


// infer[@arr_enfr] base::AsegNE<i',flted_21_2084>@M * base::AsegNE<flted_24_2066,m'>@M&
// v_int_45_1961'=1+i' & base=base' & flted_25_2057=i_2042 & 
// v_int_41_1928'=i_2042 & i_104=i_2042-1 & i_2065=i_2042 & i_113=i_2042-1 & 
// flted_20_112=i_2042 & flted_24_103=i_2042 & flted_25_2072=i_2042+1 & 
// v_int_43_1944'=i_2042 & i=i_2042-1 & m_2043=m & i_92=i_2042-1 & m_93=m & 
// m'=m & i'=i_2042-1 & flted_21_2084=i_2042 & flted_24_2066=i_2042+1 & 
// 1<=i_2042 & i_2042<=(m-2) & v_bool_40_1962' |- (exists i_2095,flted_20_2096: base'::AsegNE<i_2095,flted_20_2096>@M&
// flted_20_2096=1+v_int_45_1961' & 0<=v_int_45_1961' & i_2095=v_int_45_1961').
// print residue.
// expect Valid.

// infer[@arr_enfr] base::AsegNE<i,i+1>@M * base::AsegNE<flted_24_2066 (i+2???) ,m>@M& 
// v_int_45_1961'=1+i' & base=base' & flted_25_2057=i_2042 & 
// v_int_41_1928'=i_2042 & i_104=i_2042-1 & i_2065=i_2042 & i_113=i_2042-1 & 
// flted_20_112=i_2042 & flted_24_103=i_2042 & flted_25_2072=i_2042+1 & 
// v_int_43_1944'=i_2042 & i=i_2042-1 & m_2043=m & i_92=i_2042-1 & m_93=m & 
// m'=m & i'=i_2042-1 & flted_21_2084=i_2042 & flted_24_2066=i_2042+1 & 
// 1<=i_2042 & i_2042<=(m-2) & v_bool_40_1962' |- (exists i_2095,flted_20_2096: base'::AsegNE<i+1,i+2>@M&
// flted_20_2096=1+v_int_45_1961' & 0<=v_int_45_1961' & i_2095=v_int_45_1961').
// print residue.
// expect Valid.



// // 7 extremely slow...
// infer[@arr_en]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
// print residue.
// expect Valid.


// // 33
// infer[@arr_en]  base::AsegNE<a,b> * base::Elem<c,x> & a=1 & b=2 & c=3 |- exists b: base::Aseg<1,b> * base::Elem<3,y>.
// print residue.
// expect Fail.

// // 1
// infer[@arr_en]  base::AsegNE<x,y> * base::AsegNE<a,b> |- base::AsegNE<a,b> * base::AsegNE<x,y> .
// print residue.
// expect Valid.


// // 1
// infer[@arr_en]  base::Aseg<a,b> & b=2  |- base::Aseg<a,2>.
// print residue.
// expect Valid.

// // 1
// infer[@arr_en]  base::Aseg<a,2>  |- base::Aseg<a,2>.
// print residue.
// expect Valid.
//
/*
// 1
infer[@arr_enfr]  base::AsegNE<a,b> & a=1 & b=2 |- base::AsegNE<a,b>.
print residue.
expect Valid.

// 2
infer[@arr_enfr]  base::AsegNE<1,2> & a=1 & b=2 |- base::AsegNE<a,b>.
print residue.
expect Valid.

// 3
infer[@arr_enfr]  base::AsegNE<1,2> & a=1 & b=2 |- exists c: base::AsegNE<c,b> & c=1.
print residue.
expect Valid.

// 4
infer[@arr_enfr]  base::AsegNE<1,2> |- base::AsegNE<1,2>.
print residue.
expect Valid.
*/

/*
// 6
infer[@arr_en]  base::AsegNE<x,y> |- [a] base::AsegNE<x,a> * base::Aseg<a,y>.
print residue.
expect Valid.
*/


// // 2
// infer[@arr_enfr]  base::AsegNE<a,c> & a=1 & b=2 & c=3 |- base::AsegNE<a,b>.
// print residue.
// expect Valid.

// Aseg<a,b> * Aseg<c,d> |- Aseg<a,b> * Aseg<c,d> & b<c
// ==>
// b<c --> true
// /\
// a<d --> b<c

// Aseg<a,b> * Aseg<c,d> |- Aseg<e,f> * Aseg<c,d> & b<c

/*
infer[@arr_en] base::AsegNE<t90,t91>*base::AsegNE<t92,t93>*base::AsegNE<t94,t95>*base::AsegNE<t96,t97>*base::AsegNE<t98,t99>*base::AsegNE<t100,t101>*base::AsegNE<t102,t103>*base::AsegNE<t104,t105>*base::AsegNE<t106,t107>& t90=15 & t91=28 & t92=28 & t93=46 & t94=46 & t95=49 & t96=55 & t97=60 & 
 t98=60 & t99=61 & t100=61 & t101=62 & t102=62 & t103=64 & t104=67 & 
 t105=68 & t106=68 & t107=70 & t108=15 & t109=43 & t110=43 & t111=48 & 
 t112=48 & t113=49 & t114=55 & t115=61 & t116=61 & t117=62 & t118=62 & 
 t119=63 & t120=63 & t122=67 & t124=68 & t125=70 |- exists t121,t123: base::AsegNE<t108,t109>*base::AsegNE<t110,t111>*base::AsegNE<t112,t113>*base::AsegNE<t114,t115>*base::AsegNE<t116,t117>*base::AsegNE<t118,t119>*base::Elem<t120,t121>*base::Elem<t122,t123>*base::AsegNE<t124,t125>&true.
print residue.
expect Valid.
*/

/*
infer[@arr_en] base::AsegNE<t78,t79>*base::AsegNE<t80,t81>*base::AsegNE<t82,t83>& t78=62 & t79=63 & t80=78 & t81=79 & t82=79 & t83=80 & t84=62 & t85=63 & 
 t86=78 & t87=79 & t88=79 & t89=80 |- base::AsegNE<t84,t85>*base::AsegNE<t86,t87>*base::AsegNE<t88,t89>&true.
print residue.
expect Valid.
*/

/*
infer[@arr_en] base::AsegNE<t50,t51>*base::AsegNE<t52,t53>*base::Elem<t54,t55>*base::AsegNE<t56,t57>*base::AsegNE<t58,t59>*base::Elem<t60,t61>*base::Elem<t62,t63>& t50=30 & t51=49 & t52=49 & t53=52 & t54=52 & t56=53 & t57=54 & t58=54 & 
 t59=55 & t60=88 & t62=89 & t64=30 & t65=33 & t66=33 & t67=49 & t68=49 & 
 t69=53 & t70=53 & t71=54 & t72=54 & t74=88 & t75=89 & t76=89 & t77=90 |- exists t73: base::AsegNE<t64,t65>*base::AsegNE<t66,t67>*base::AsegNE<t68,t69>*base::AsegNE<t70,t71>*base::Elem<t72,t73>*base::AsegNE<t74,t75>*base::AsegNE<t76,t77>&true.
print residue.
expect Valid.	
*/

/*
infer[@arr_en] base::AsegNE<t0,t1>*base::AsegNE<t2,t3>*base::AsegNE<t4,t5>*base::AsegNE<t6,t7>*base::AsegNE<t8,t9>*base::AsegNE<t10,t11>*base::AsegNE<t12,t13>*base::Elem<t14,t15>*base::AsegNE<t16,t17>*base::AsegNE<t18,t19>*base::Elem<t20,t21>*base::AsegNE<t22,t23>& t0=44 & t1=66 & t2=66 & t3=69 & t4=69 & t5=73 & t6=73 & t7=76 & t8=76 & 
 t9=82 & t10=86 & t11=87 & t12=87 & t13=88 & t14=91 & t16=92 & t17=94 & 
 t18=94 & t19=96 & t20=96 & t22=99 & t23=100 & t24=44 & t25=63 & t26=63 & 
 t27=72 & t28=72 & t29=76 & t30=76 & t31=77 & t32=77 & t33=78 & t34=78 & 
 t35=80 & t36=80 & t37=81 & t38=81 & t39=82 & t40=86 & t41=88 & t42=91 & 
 t43=93 & t44=93 & t45=95 & t46=95 & t47=97 & t48=99 |- exists t49: base::AsegNE<t24,t25>*base::AsegNE<t26,t27>*base::AsegNE<t28,t29>*base::AsegNE<t30,t31>*base::AsegNE<t32,t33>*base::AsegNE<t34,t35>*base::AsegNE<t36,t37>*base::AsegNE<t38,t39>*base::AsegNE<t40,t41>*base::AsegNE<t42,t43>*base::AsegNE<t44,t45>*base::AsegNE<t46,t47>*base::Elem<t48,t49>&true.
print residue.
expect Valid.
*/


infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b>.
print residue.
expect Valid.

//(3)
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b> & b>2.
print residue.
expect Fail.


//(4)
infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> & y=y |- exists b: base::Aseg<1,b> * base::Elem<3,y>.
print residue.
expect Fail.

//(5)
infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b,y: base::Aseg<1,b> * base::Elem<3,y>.
print residue.
expect Valid.

//(6)
infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> & c=c |- exists b: base::Aseg<1,b> * base::Elem<c,x>.
print residue.
expect Fail.
// UNSOUND with inferred pure: [true]



//(7)
infer[@arr_en]  base::AsegNE<a,b> |- exists b': base::Aseg<a,b'>.
print residue.
expect Valid.

//(8)
infer[@arr_en]  base::AsegNE<a,b> |- exists b': base::Aseg<a,b'> & b'>b.
print residue.
expect Fail.


//(9)
infer[@arr_en]  base::AsegNE<a,a+1> * base::Elem<a+1,u>
    |- exists u,c: base::Elem<a,c> * base::Elem<a+1,u>.
print residue.
expect Valid.


//(10)
infer[@arr_en]  base::AsegNE<a,a+1> * base::Elem<a+1,u>
    |- exists u,c: base::Elem<a,u> * base::Elem<a+1,u>.
print residue.
expect Fail.

//(11)
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b> & b>=2.
print residue.
expect Valid.





// // 1
// infer[@arr_ba]  base::AsegNE<a,b> & a=1 & b=2 |- base::AsegNE<a,b>.
// print residue.
// expect Valid.

// // 2
// infer[@arr_ba]  base::Elem<a,b> & a=1 & b=2  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// // 3
// infer[@arr_ba]  base::Elem<a,b> & a=1 & b=2  |- Emp.
// print residue.
// expect Valid.

// // 4
// infer[@arr_ba]  a=1 & b=2  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// // 5
// infer[@arr_ba]  base::Elem<c,d> & a=1 & b=2 & c=3 & d=4  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// // 6
// infer[@arr_ba]  base::AsegNE<c,d> & c=3 & d=4  |- Emp.
// print residue.
// expect Valid.















/*
// 2
infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<1,2>.
print residue.
expect Valid.





// 3
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<1,3>.
print residue.
expect Fail.


// 4
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<5,2>.
print residue.
expect Fail.


// 5
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<5,3>.
print residue.
expect Fail.


// 6
infer[@arr_ba]  base::Elem<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 7
infer[@arr_ba]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 8
infer[@arr_ba]  base::AsegNE<1,2>  |- base::AsegNE<a,b>.
print residue.
expect Fail.



infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<1,b>.
print residue.
expect Fail.

infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<a,2>.
print residue.
expect Fail.

infer[@arr_ba]  base::Aseg<a,2>  |- base::Aseg<a,2>.
print residue.
expect Valid.

infer[@arr_ba]  base::Aseg<a,b> & b=2  |- base::Aseg<a,2>.
print residue.
expect Valid.

infer[@arr_ba]  base::Aseg<a,b>   |- base::Aseg<a,2>.
print residue.
expect Fail.

infer[@arr_ba]  base::Aseg<a,b>   |- exists c: base::Aseg<a,2>.
print residue.
expect Fail.

infer[@arr_ba]  base::AsegNE<a,b>   |- exists c: base::AsegNE<a,c>.
print residue.
expect Valid.

//16
infer[@arr_ba]  base::AsegNE<a,b>    |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Fail.

//   A |- B  --> F
// -------------------------------
// ex V. (A |- B) --> ex V. F

//17
infer[@arr_ba]  base::AsegNE<a,b> & a+1<b |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Valid.

//18
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v: base::Elem<1,v>.
print residue.
expect Valid.

//19
infer[@arr_ba]  base::AsegNE<1,2>  |- base::Elem<1,v>.
print residue.
expect Fail.

//20
infer[@arr_ba]  base::Elem<1,v>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 21
infer[@arr_ba]  base::Elem<1,v>  |- base::Elem<1,3>.
print residue.
expect Fail.

// 22
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v: base::Elem<1,v> & v>0.
print residue.
expect Fail.

// 23
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v: base::Elem<1,v> & v=v.
print residue.
expect Valid.

// 24
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v,x: base::Elem<x,v> & v=v.
print residue.
expect Valid.

// 25
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v,x: base::Elem<x,v> & v=v & x>1.
print residue.
expect Fail.

// 26
infer[@arr_ba]  base::AsegNE<1,3>  |- exists v1,v2,x,y: base::Elem<x,v1> * base::Elem<y,v2> & x>1.
print residue.
expect Valid.

// 27
infer[@arr_ba]  base::AsegNE<1,3>  |- exists v1,v2,x,y: base::Elem<x,v1> * base::Elem<y,v2> & x>5.
print residue.
expect Fail.

// 28
infer[@arr_ba]  base::AsegNE<1,2>  |- base::Elem<1,v>.
print residue.
expect Fail.

// 29
infer[@arr_ba]  base::AsegNE<1,2> *  base::Elem<2,v> |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 30
infer[@arr_ba]  base::AsegNE<1,2> *  base::Elem<2,v> |- exists a,b: base::AsegNE<a,a+2> .
print residue.
expect Valid.

*/ 




