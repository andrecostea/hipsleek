data node {
 int val;
}.

//1; SE3
infer [@sem_eq] y::node<5> |- x::node<v> & x=y.
expect Valid.
print residue.
// Residue: v=5

//2
checkentail_exact y::node<5> |- x::node<v> & x=y.
expect Valid.
print residue.
// Residue: x=y & v=5

//3; SE3
infer [@sem_eq] y::node<5> |- x::node<v> & x=y & z=y & x=z.
expect Fail.
print residue.
// AndR[ y!=null |-  z=y. ;;;  y!=null |-  x=z.]

//4
checkentail_exact y::node<5> |- x::node<v> & x=y & z=y & x=z.
expect Fail.
print residue.
// AndR[ y!=null |-  z=y. ;;;  x!=null |-  x=z.]

//5; SE2-2
infer [@sem_eq] y::node<x> & x0=0 |- y::node<x0>.
expect Fail.
print residue.
// y::node<x> & x0=0 |- (exists x0_42: y::node<x0_42> & x0_42=x0)
// y::node<x> & x0=0 |- y::node<x0>

//6
checkentail_exact y::node<x> & x0=0 |- y::node<x0>.
expect Fail.
print residue.
// y::node<x> & x0=0 |- (exists x0_42: y::node<x0_42> & x0_42=x0)

//7; SE2-2 and SE2-1
infer [@sem_eq] a::node<x> * b::node<y> |- a::node<x> * b::node<x>.
expect Fail.
print residue.
// a::node<x> * b::node<y> |- (exists x_64,x_65: a::node<x_64> * b::node<x_65> & x_64=x & x_65=x)
// a::node<x> * b::node<y> |- (exists x_64: a::node<x_64> * b::node<x> & x=x_64)
// a::node<x> * b::node<y> |- a::node<x>@M * b::node<x>

//8
checkentail_exact a::node<x> * b::node<y> & x=z |- a::node<x> * b::node<x>.
expect Fail.
print residue.

//9
infer [@sem_eq] y::node<x>  |- y::node<x>.
expect Valid.
print residue.
// y::node<x> |- exists x_16: y::node<x_16> & x_16=x

//10
checkentail_exact y::node<x> |- y::node<x0>.
expect Valid.
print residue.
// y::node<x> |- exists x_16: y::node<x_16> & x_16=x

//11
infer [@sem_eq] y::node<x>  |- y::node<x0>.
expect Valid.
print residue.
// y::node<x> |- y::node<x0>

//12
checkentail_exact y::node<x> |- y::node<x0>.
expect Valid.
print residue.
// y::node<x> |- y::node<x0>

