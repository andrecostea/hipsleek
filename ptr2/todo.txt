# ex4a.slk

//(1)
checkentail_exact x::Elem<s,1> |- x::Elem<p,_>.
expect Fail.
print residue.
// should not match by x, but by s=p

pred_prim Elem<start:int,value:int> inv_exact BG([start], 0<start). // non-null
direct match requires us to prove:
   s=p

UNSOUND .. Unexpected List: [1,2,3]
===================================================================
# ex4a1.slk

checkentail_exact x::Elem<s,1> |- x::Elem<p,_>.

// should fail. perhaps root_inst should be "s"

(==context.ml#3745==)
process_one_match@3@2@1
process_one_match inp1 :match_res:
 Type: Root
 LHS: x::Elem<s,flted_17_35>@M
 RHS: x::Elem<p,Anon_13>@M
 root_inst: None
 lhs_rest: emp
 rhs_rest: emp
 alias set: [x,x]rhs_inst: []rhs_infer: None
process_one_match inp2 :lhs_h: x::Elem<s,flted_17_35>@M
process_one_match inp3 :lhs_p: flted_17_35=1
process_one_match inp4 :rhs_node: x::Elem<p,Anon_13>@M
process_one_match inp5 :rhs_rest: emp
process_one_match inp6 :rhs_p: true
process_one_match inp7 :([],None)


(==solver.ml#11813==)
compute_actions@1
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: x::Elem<s,flted_17_35>@M
compute_actions inp3 :LHS pure: flted_17_35=1
compute_actions inp4 :RHS cand:[ x::Elem<p,Anon_13>@M]
compute_actions inp5 :RHS pure: true
compute_actions inp6 :right alias:[p,Anon_13]
compute_actions@1 EXIT: SEARCH =>[
  Prio:1
  Match =>
    Type: Root
    LHS: x::Elem<s,flted_17_35>@M
    RHS: x::Elem<p,Anon_13>@M
    root_inst: None
    lhs_rest: emp
    rhs_rest: emp
    alias set: [x,x]rhs_inst: []rhs_infer: None
  ]

===================================================================
/* # ex4a5.slk
should succeed ..

should be: 
  (x<b & y<c --> y>=b | x>=c)

instead of: 
  generate_constraint_from_baga_range_disj@48 EXIT:[[ (!(_=_) | y>=b | x>=c)]]

(==cvutil.ml#984==)
generate_constraint_from_baga_range_disj@48@46
generate_constraint_from_baga_range_disj inp1 :[[(_,( x, b))],[(_,( y, c))]]
generate_constraint_from_baga_range_disj@48 EXIT:[[ (!(_=_) | y>=b | x>=c)]]
===============================================================================
# ex4a6.slk
should fail ..

pred_prim Aseg<end> 
     inv_exact BG([(self,end)],true). //0<=start<=end). // possibly empty

pred_prim AsegNE<end> 
     inv_exact BG([(self,end)],0<self<end). 

The entailment below should fail:

checkentail_exact x::AsegNE<b> * y::Aseg<c> |- b<=y | c<=x.
expect Fail.
print residue.


   <x,b>    <y,c>
   <5,6>    <1,10>


You can fix it by changing:

instead of: 
  generate_constraint_from_baga_range_disj@48 EXIT:[[ (!(_=_) | y>=b | x>=c)]]

to using a weaker condition:

  (x<b & y<c --> y>=b | x>=c)


===============================================================================
# ex4a4.slk

checkentail_exact x::AsegNE<bbb> * x::Aseg<c> |- x=null.
expect Fail.
print residue.
/* why is there .. !(_,_)..
Entail (9) : Fail.(must) cause: ((!(_=_) | x>=b | x>=c)) 
  & x<=c & x<b & x!=null |-  x=null. LOCS:[0;1;76] (must-bug)

(==sleekengine.ml#1269==)
xpure_heap_symbolic#999@7
xpure_heap_symbolic#999 inp1 :0
xpure_heap_symbolic#999 inp2 : x::AsegNE<b>@M * x::Aseg<c>@M
xpure_heap_symbolic#999 inp3 : true
xpure_heap_symbolic#999@7 EXIT: x!=null & x<b & x<=c & ((!(_=_) | x>=b | x>=c))#[]# [[_22]]true

@7! **cvutil.ml#994:baga_ranges:[[(_,( x, b))],[(_,( y, c))]]
@7! **cvutil.ml#995:baga_constraints:[[ (!(_=_) | y>=b | x>=c)]]

 (x<b & y<c) --> (y<=b |x>=c)
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================

   
