(set-info :source  loris-7.ddns.comp.nus.edu.sg/~project/hip/) 
;Variables declarations
(declare-fun n2_3217 () Int)
(declare-fun m2_3216 () Int)
(declare-fun rrm () Int)
(declare-fun q_3215 () Int)
(declare-fun p_3212 () Int)
(declare-fun tmp_3207 () Int)
(declare-fun Anon_3211 () Int)
(declare-fun res () Int)
(declare-fun v_node_42_2365_primed () Int)
(declare-fun h_3208 () Int)
(declare-fun lm () Int)
(declare-fun l () Int)
(declare-fun rl () Int)
(declare-fun rr_primed () Int)
(declare-fun rr () Int)
(declare-fun flted_32_3188 () Int)
(declare-fun ln () Int)
(declare-fun Anon_3224 () Int)
(declare-fun v_3206 () Int)
(declare-fun p_3225 () Int)
(declare-fun l_primed () Int)
(declare-fun q_3228 () Int)
(declare-fun rl_primed () Int)
(declare-fun m () Int)
(declare-fun n () Int)
(declare-fun rlm () Int)
(declare-fun ln_3187 () Int)
(declare-fun h_3204 () Int)
(declare-fun n1_3214 () Int)
(declare-fun n1_3227 () Int)
(declare-fun n2_3230 () Int)
(declare-fun m1_3213 () Int)
(declare-fun m2_3229 () Int)
(declare-fun m1_3226 () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= n2_3217 flted_32_3188))
(assert (= m2_3216 rrm))
(assert (= q_3215 rr_primed))
(assert (= p_3212 tmp_3207))
(assert (= Anon_3211 v_3206))
(assert (= res v_node_42_2365_primed))
(assert (= h_3208 (+ 1 h_3204)))
(assert (= h_3204 (+ 1 n)))
(assert (<= 0 n))
(assert (<= 0 m))
(assert (<= 0 ln))
(assert (<= 0 lm))
(assert (= n ln))
(assert (= m lm))
(assert (= l_primed l))
(assert (= rl_primed rl))
(assert (= rr_primed rr))
(assert (= flted_32_3188 (+ 1 ln)))
(assert (= ln_3187 ln))
(assert (= v_3206 10))
(assert (= Anon_3224 v_3206))
(assert (= p_3225 l_primed))
(assert (= q_3228 rl_primed))
(assert (= m1_3226 m))
(assert (= n1_3227 n))
(assert (= m2_3229 rlm))
(assert (= n2_3230 ln_3187))
(assert (<= n1_3227 (+ 1 n2_3230)))
(assert (<= (+ 0 n2_3230) (+ n1_3227 1)))
(assert (or (and (= h_3204 (+ n1_3227 1)) (<= n2_3230 n1_3227)) (and (= h_3204 (+ n2_3230 1)) (< n1_3227 n2_3230))))
(assert (= h_3204 n1_3214))
(assert (exists ((max_32 Int)) (and (= n1_3214 (+ 1 max_32)) (or (and (= max_32 n1_3227) (>= n1_3227 n2_3230)) (and (= max_32 n2_3230) (< n1_3227 n2_3230))))))
(assert (= m1_3213 (+ (+ m2_3229 1) m1_3226)))
;Negation of Consequence
(assert (not false))
(check-sat)