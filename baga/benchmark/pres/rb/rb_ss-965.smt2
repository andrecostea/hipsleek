(set-info :source  loris-7.ddns.comp.nus.edu.sg/~project/hip/) 
;Variables declarations
(declare-fun v_bool_244_3884_primed () Int)
(declare-fun Anon_8353 () Int)
(declare-fun flted_13_8345 () Int)
(declare-fun flted_238_8358 () Int)
(declare-fun nb () Int)
(declare-fun nr_8352 () Int)
(declare-fun bhr_8354 () Int)
(declare-fun a_primed () Int)
(declare-fun a () Int)
(declare-fun c_primed () Int)
(declare-fun flted_238_8357 () Int)
(declare-fun b () Int)
(declare-fun v_node_252_3883_primed () Int)
(declare-fun l_8347 () Int)
(declare-fun v_node_252_3882_primed () Int)
(declare-fun r_8351 () Int)
(declare-fun n () Int)
(declare-fun bh () Int)
(declare-fun cl () Int)
(declare-fun nl_8348 () Int)
(declare-fun bhl_8350 () Int)
(declare-fun Anon_8349 () Int)
(declare-fun na () Int)
(declare-fun h () Int)
(declare-fun flted_238_8359 () Int)
(declare-fun v_int_252_3881_primed () Int)
(declare-fun Anon_17 () Int)
(declare-fun na_8678 () Int)
(declare-fun h_8681 () Int)
(declare-fun nb_8679 () Int)
(declare-fun Anon_18 () Int)
(declare-fun nc_8680 () Int)
(declare-fun b_primed () Int)
(declare-fun flted_238_8356 () Int)
(declare-fun flted_238_8355 () Int)
(declare-fun nc () Int)
(declare-fun c () Int)
(declare-fun flted_121_8723 () Int)
(declare-fun flted_121_8722 () Int)
(declare-fun flted_121_8724 () Int)
(declare-fun res () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (> v_bool_244_3884_primed 0)))
(assert (= cl 1))
(assert (<= Anon_8353 1))
(assert (<= 0 Anon_8353))
(assert (<= 1 bhr_8354))
(assert (<= 0 nr_8352))
(assert (= bh bhr_8354))
(assert (= cl Anon_8353))
(assert (= n nr_8352))
(assert (= flted_13_8345 0))
(assert (= flted_238_8358 0))
(assert (= nb (+ (+ nr_8352 1) nl_8348)))
(assert (= bhl_8350 bhr_8354))
(assert (= flted_238_8357 (+ bhl_8350 1)))
(assert (= a_primed a))
(assert (= b_primed b))
(assert (= c_primed c))
(assert (= flted_238_8359 0))
(assert (= flted_238_8357 (+ 1 h)))
(assert (= flted_238_8356 0))
(assert (= flted_238_8355 (+ 1 h)))
(assert (> b 0))
(assert (> c 0))
(assert (= v_node_252_3883_primed l_8347))
(assert (= v_node_252_3882_primed r_8351))
(assert (= v_int_252_3881_primed 1))
(assert (= na_8678 na))
(assert (= h_8681 h))
(assert (= nb_8679 nl_8348))
(assert (= Anon_18 Anon_8349))
(assert (= nc_8680 n))
(assert (<= 0 n))
(assert (<= 1 bh))
(assert (<= 0 cl))
(assert (<= cl 1))
(assert (<= 0 nl_8348))
(assert (<= 1 bhl_8350))
(assert (<= 0 Anon_8349))
(assert (<= Anon_8349 1))
(assert (<= 0 na))
(assert (<= 1 h))
(assert (<= 0 flted_238_8359))
(assert (<= flted_238_8359 1))
(assert (= flted_121_8724 (+ (+ (+ 2 nb_8679) na_8678) nc_8680)))
(assert (= flted_121_8723 0))
(assert (= flted_121_8722 (+ 2 h_8681)))
(assert (= v_int_252_3881_primed 0))
(assert (or (and (and (and (and (and (and (and (and (and (exists ((flted_119_400 Int)) (and (<= 0 flted_119_400) (<= flted_119_400 1))) (exists ((flted_119_399 Int)) (and (<= 0 flted_119_399) (<= flted_119_399 1)))) (exists ((h_402 Int)) (<= 1 h_402))) (exists ((h_401 Int)) (<= 1 h_401))) (<= 0 na_8678)) (<= 1 h_8681)) (<= 0 nb_8679)) (<= 0 Anon_17)) (<= Anon_17 1)) (<= 0 nc_8680)) (and (and (and (and (and (and (and (and (and (exists ((flted_120_398 Int)) (and (<= 0 flted_120_398) (<= flted_120_398 1))) (exists ((flted_120_397 Int)) (and (<= 0 flted_120_397) (<= flted_120_397 1)))) (exists ((h_404 Int)) (<= 1 h_404))) (exists ((h_403 Int)) (<= 1 h_403))) (<= 0 na_8678)) (<= 1 h_8681)) (<= 0 nb_8679)) (<= 0 Anon_18)) (<= Anon_18 1)) (<= 0 nc_8680))))
(assert (= b_primed 1))
(assert (or (and (and (and (= flted_238_8356 0) (<= 2 flted_238_8355)) (<= 1 nc)) (> c 0)) (or (and (and (and (< c 1) (= nc 0)) (= flted_238_8355 1)) (= flted_238_8356 0)) (and (and (and (= flted_238_8356 1) (<= 1 flted_238_8355)) (<= 1 nc)) (> c 0)))))
(assert (or (and (and (and (= flted_121_8723 0) (<= 2 flted_121_8722)) (<= 1 flted_121_8724)) (> res 0)) (or (and (and (and (< res 1) (= flted_121_8724 0)) (= flted_121_8722 1)) (= flted_121_8723 0)) (and (and (and (= flted_121_8723 1) (<= 1 flted_121_8722)) (<= 1 flted_121_8724)) (> res 0)))))
;Negation of Consequence
(assert (not false))
(check-sat)