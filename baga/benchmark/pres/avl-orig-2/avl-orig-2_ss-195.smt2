(set-info :source  loris-7.ddns.comp.nus.edu.sg/~project/hip/) 
;Variables declarations
(declare-fun Anon_50 () Int)
(declare-fun Anon_40 () Int)
(declare-fun bn_3462 () Int)
(declare-fun bm_3461 () Int)
(declare-fun cm () Int)
(declare-fun Anon_49 () Int)
(declare-fun Anon_39 () Int)
(declare-fun an_3460 () Int)
(declare-fun am_3459 () Int)
(declare-fun bm () Int)
(declare-fun lr () Int)
(declare-fun c () Int)
(declare-fun ll () Int)
(declare-fun b () Int)
(declare-fun Anon_48 () Int)
(declare-fun Anon_38 () Int)
(declare-fun Anon_47 () Int)
(declare-fun Anon_37 () Int)
(declare-fun Anon_46 () Int)
(declare-fun Anon_36 () Int)
(declare-fun cn_3458 () Int)
(declare-fun cm_3457 () Int)
(declare-fun dm () Int)
(declare-fun r () Int)
(declare-fun d () Int)
(declare-fun l () Int)
(declare-fun k3 () Int)
(declare-fun Anon_45 () Int)
(declare-fun Anon_35 () Int)
(declare-fun Anon_44 () Int)
(declare-fun Anon_34 () Int)
(declare-fun v_node_179_1812_primed () Int)
(declare-fun k2 () Int)
(declare-fun k1_primed () Int)
(declare-fun bn () Int)
(declare-fun dn () Int)
(declare-fun cn () Int)
(declare-fun k1 () Int)
(declare-fun an () Int)
(declare-fun Anon_33 () Int)
(declare-fun am () Int)
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= Anon_50 Anon_40))
(assert (= bn_3462 cn))
(assert (= bm_3461 cm))
(assert (= Anon_49 Anon_39))
(assert (= an_3460 bn))
(assert (= am_3459 bm))
(assert (= lr c))
(assert (= ll b))
(assert (= Anon_48 Anon_38))
(assert (= Anon_47 Anon_37))
(assert (= Anon_46 Anon_36))
(assert (= cn_3458 dn))
(assert (= cm_3457 dm))
(assert (= r d))
(assert (= l k3))
(assert (= Anon_45 Anon_35))
(assert (= Anon_44 Anon_34))
(assert (= v_node_179_1812_primed k2))
(assert (= k1_primed k1))
(assert (<= bn (+ an 1)))
(assert (<= an (+ bn 1)))
(assert (<= cn (+ dn 1)))
(assert (<= dn (+ cn 1)))
(assert (= k1 1))
(assert (or (and (and (and (< a 1) (= am 0)) (= an 0)) (= Anon_33 1)) (and (and (and (and (and (<= 0 Anon_33) (<= (+ (- 0 an) 2) Anon_33)) (<= Anon_33 an)) (<= Anon_33 2)) (<= 1 am)) (> a 0))))
;Negation of Consequence
(assert (not false))
(check-sat)