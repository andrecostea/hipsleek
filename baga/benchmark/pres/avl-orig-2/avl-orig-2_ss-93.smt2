(set-info :source  loris-7.ddns.comp.nus.edu.sg/~project/hip/) 
;Variables declarations
(declare-fun k1 () Int)
(declare-fun right_237_2904 () Int)
(declare-fun r () Int)
(declare-fun left_238_2907 () Int)
(declare-fun l () Int)
(declare-fun am () Int)
(declare-fun an () Int)
(declare-fun Anon_58 () Int)
(declare-fun res () Int)
(declare-fun m () Int)
(declare-fun n () Int)
(declare-fun b () Int)
(declare-fun bn () Int)
(declare-fun Anon_61 () Int)
(declare-fun bm () Int)
(declare-fun rl () Int)
(declare-fun cn () Int)
(declare-fun Anon_62 () Int)
(declare-fun cm () Int)
(declare-fun rr () Int)
(declare-fun n_2915 () Int)
(declare-fun b_2916 () Int)
(declare-fun m_2914 () Int)
(declare-fun v_node_239_1484_primed () Int)
(declare-fun k1_primed () Int)
(declare-fun k2_primed () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= k1_primed k1))
(assert (= k2_primed r))
(assert (= right_237_2904 r))
(assert (= left_238_2907 rl))
(assert (= v_node_239_1484_primed l))
(assert (= m am))
(assert (= n an))
(assert (= b Anon_58))
(assert (<= 0 am))
(assert (<= 0 an))
(assert (<= 0 Anon_58))
(assert (<= Anon_58 2))
(assert (= res n))
(assert (= m_2914 m))
(assert (= n_2915 n))
(assert (= b_2916 b))
(assert (<= 0 m))
(assert (<= 0 n))
(assert (<= 0 b))
(assert (<= b 2))
(assert (or (and (and (and (< rl 1) (= bm 0)) (= bn 0)) (= Anon_61 1)) (and (and (and (and (and (<= 0 Anon_61) (<= (+ (- 0 bn) 2) Anon_61)) (<= Anon_61 bn)) (<= Anon_61 2)) (<= 1 bm)) (> rl 0))))
(assert (or (and (and (and (< rr 1) (= cm 0)) (= cn 0)) (= Anon_62 1)) (and (and (and (and (and (<= 0 Anon_62) (<= (+ (- 0 cn) 2) Anon_62)) (<= Anon_62 cn)) (<= Anon_62 2)) (<= 1 cm)) (> rr 0))))
(assert (= k1_primed 1))
(assert (= k2_primed 2))
(assert (or (and (and (and (< v_node_239_1484_primed 1) (= m_2914 0)) (= n_2915 0)) (= b_2916 1)) (and (and (and (and (and (<= 0 b_2916) (<= (+ (- 0 n_2915) 2) b_2916)) (<= b_2916 n_2915)) (<= b_2916 2)) (<= 1 m_2914)) (> v_node_239_1484_primed 0))))
(assert (not (= k1_primed k2_primed)))
;Negation of Consequence
(assert (not false))
(check-sat)