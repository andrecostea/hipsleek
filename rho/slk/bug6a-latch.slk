//CountDownLatch
data cell{ int v; }.

pred_prim LatchIn{-%P@Split}<>.

pred_prim LatchOut{+%P@Split}<>.

pred_prim Latch{%P}<>.

pred_prim CNT<n:int>.

lemma "NORM-1" self::CNT<n> * self::CNT<a> & n<=0 & a < 0 -> self::CNT<a>.

lemma "NORM-2" self::CNT<n1> * self::CNT<n2> & n=n1+n2 & n1>=0 & n2>=0 -> self::CNT<n>.

//lemma "SPLIT-1" self::LatchOut{+ %P * %Q}<> -> self::LatchOut{+%P}<> * self::LatchOut{+%Q}<>.

//lemma "SPLIT-2" self::LatchIn{- %P * %Q}<> -> self::LatchIn{-%P}<> * self::LatchIn{-%Q}<>.

lemma "SPLIT-3" self::CNT<n> & n=n1+n2 & n1>=0 & n2>=0 -> self::CNT<n1> * self::CNT<n2>.

lemma "ERR-1" self::LatchIn{- %P * %Q}<> * self::CNT<a> & a<0 -> emp & flow __Fail.

lemma "ERR-2" self::CNT<a> * self::CNT<b> & a>0 & b<0 ->  emp & flow __Fail.



//(6)
//checkentail c::LatchOut{+ x::cell<n>}<> |- c::LatchOut{+ x::cell<b> }<>.
//expect Valid.
//print residue.


//(5)
checkentail c::LatchIn{- x::cell<n>}<> |- c::LatchIn{- x::cell<_> }<>.
expect Valid.
print residue.

/*
# but6a.slk

# why did we have ho_args failure?

 MustErr Context: 
   fe_kind: MUST
   fe_name: separation entailment
   fe_locs: {
     fc_message: matching of ho_args failed (classical separation logic)
     fc_current_lhs_flow: {FLOW,(1,26)=__flow#E}
   }
 [[empty]]
 CEX:true



*/