==================================================================
# infer1.slk

 <1>HP_33(b_35)&a=a_34 & b=b_35&{FLOW,(19,20)=__norm}[]
 inferred hprel: [H1(y) --> y::node<a,b>@M * HP_33(b)]

Why did we get above?

Should it not be:
 inferred hprel: [H1(y) --> y::node<a_34,b_35>@M * HP_33(b_35)]
                                    ^^^^ ^^^^            ^^^^
rather than immediately bound to a,b which came about only after 
the matching.

Should use the free vars:
validate Valid:[
( [H1,b],
   HP_32(b_34)&a=a_33 & b=b_34,
  [H1(y) --> y::node<a,b>@M * HP_32(b)]
)
]
==================================================================
Below should have succeeded too.

validate Valid:[
( [H1,b],
//   HP_32(b_34)&a=a_33 & b=b_34,
   HP_32(b),
  [H1(y) --> y::node<_,bb>@M * HP_32(bb)]
  //[H1(y) --> y::node<a,b>@M * HP_32(b)]
)
].
// I think it should be OK to change b->bb
// the problem is that your inferred hp_rel should have been
// inferred hprel: [H1(y) --> y::node<a_1,b_2>@M * HP_35(b_2)]
// or you could have renamed the existentially quantified vars.
==================================================================
# ex4.slk

If {} is empty, can be omit its printing.
  q_122::ll{}<flted_7_126>(must)
should be printed as:  
  q_122::ll<flted_7_126>(must)

==================================================================
# ex4a.slk

checkentail x::node<_,null> |- x::ll<n>.
print residue.
expect Valid.
expect_infer R{x!=null & n=1}.

Why is below not executed?

  let () = x_binfo_pp "Evan: place to add expect_infer code" no_pos in
  ()

==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
