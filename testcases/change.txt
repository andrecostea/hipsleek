The translation from the input AST to the core AST already handled translating the while loop into a function. This is
seen in the comparision of the pip output and the pcp output in loop-ret-int.ss and loop-ret-node.ss.

The setting of res via the exception result seems sensible when dealing with return in a while loop since that is the
result of the while loop when we have an early return, and the type of a while loop is void otherwise.

For other exceptions, setting the res doesn't quite make sense to me, since there isn't actually a result to speak of.
However, there is an eres, for the exception result. So, when encountering other exceptions, the eres var is set, and
res is ignored. (lines 2902-2903 in typechecker.ml)

Also, there was a bug in 2882 in typechecker.ml. It was using physical equality (==) to check for type equality of spec
vars. For primitive types, this is fine, becuase OCaml doesn't create more than one object for a data constructor if
it's not necessary. But for user declared types, this doesn't work, because 2 strings with the same value can be
different physical objects. It's now fixed to use value equality instead.