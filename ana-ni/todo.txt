# ex2.ss -p hoo --ana-ni (FIXED)

int hoo(node x)
  infer [@ana_ni]
  requires x>1
  ensures true;
{
  int y = x.val;
  return y;
}

# relax bind_failure? change bind test to
      ....  |- x>1

(Cause of Bind Failure) List of Failesc Context: [FEC(1, 0, 0 )]
 Failed States:
 [
  Label: []
  State:
    fe_kind: MUST
    fe_name: separation entailment
    fe_locs: {
        fc_message: do_unmatched_rhs : x'::node<val_19_1683',next_19_1684'>@L(must)
        fc_current_lhs_flow: {FLOW,(6,10)=__Error#E}
      }
    [[ UnmatchedRHSData]]
  ]1 File "ex2-ptr.ss",Line:19,Col:10

Context of Verification Failure: ex2-ptr.ss_17:10_17:14
==========================================================================
# ex2a.ss --ana-ni

# Need to consider greatest fix-point compute..

[RELASS [R]: ( R(x)) -->  2<=x]

# Let us preserve x>=2
!!! top_down_fp:[]
!!! **pi.ml#754:>>>>>>>>>>> (bef postprocess): <<<<<<<<<
!!! **pi.ml#755:>>REL POST:  true
!!! **pi.ml#756:>>POST:  true
!!! **pi.ml#757:>>REL PRE :  true
!!! **pi.ml#758:>>PRE :  true
!!! **immutable.ml#62:imm + pure:[( true, true)]
!!! **immutable.ml#64:imm + pure:[( true, true)]
!!! **immutable.ml#62:imm + pure:[( true, true)]
!!! **immutable.ml#64:imm + pure:[( true, true)]
!!! **pi.ml#806:new_specs1:
[ EInfer @ana_ni[R]
   EBase 
     emp&R(x)&{FLOW,(4,5)=__norm#E}[]
     EBase 
       emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
       EAssume 
         htrue&{FLOW,(4,5)=__norm#E}[]
         struct:EBase 
                  htrue&{FLOW,(4,5)=__norm#E}[]]
==========================================================================
# ex2c.ss --ana-ni

  node y = x.next;
  dprint;
  y = y.next;

# Need to add next_15_1687' into the heap-state; so that we 
  have y'>1 at dprint.

dprint(simpl): ex2c-ptr.ss:15: ctx:  
     emp&1<x & x'=x&{FLOW,(4,5)=__norm#E}[]


!!! **typechecker.ml#1968:vs_prim:[val_15_1686',next_15_1687']
!!! **typechecker.ml#1969:vheap(0): y'::node<val_15_1686',next_15_1687'>@L&{FLOW,(1,28)=__flow#E}[]
!!! **typechecker.ml#2015:need to use local version of infer_const_obj
==========================================================================
# ex2d.ss --ana-ni

  node y;
  dprint;
  y = y.next;

# Need to add y'>1 for each local var created;
  expects y'>1 at dprint

dprint(simpl): ex2c-ptr.ss:15: ctx:  
     emp&MayLoop[] & 1<x & x'=x&{FLOW,(4,5)=__norm#E}[]

==========================================================================
# ex2a.ss

******pure relation assumption 1 *******
*************************************
[RELASS [R]: ( R(x)) -->  2<=x]
*************************************

R(x) & x<1 --> false. OK

==========================================================================
# ex3.ss (ex2b.ss)

*************************************
[RELASS [R]: ( R(x)) -->  2<=x,
RELDEFN P: ( 2<=x' & R(x')) -->  P(x'),
RELDEFN R: ( P(y')) -->  R(y')]
*************************************

R(x) & x<1 --> false. OK
P(y) & y<1 --> false. OK (subst R(x) RHS of 2rd)

==========================================================================
# ex4.ss 

[RELASS [R]: ( R(x)) -->  x!=1,
RELDEFN R: ( 2<=v_node_18_1692') -->  R(v_node_18_1692')]

Round 1:
from (1)
R(x)) ==  x!=1 (over)

subst into (2):
 2<=v_node_18_1692' --> x!=1

R(x) & x<1 --> false. FAIL. refinement
      R(x) & x<1 --> false (x>=1)
      R(x)  --> x!=1       (x>1)
==>
      R(x) == x>1 (over)

Round 2: checking. OK all

==========================================================================
# ex5.ss 
RELASS [R]: ( R(x)) -->  x!=1,
RELDEFN P: ( true) -->  P(y_1718),
RELDEFN R: ( 2<=v_node_20_1695') -->  R(v_node_20_1695')

Round 1:
From (1)
     R(x)) ==  x!=1 (over)
subst(2): OK
subst (3). OK.

R(x) & x<1 --> false. FAIL. refinement
similar above

P(y) & y<1 --> false. FAIL. refinement
     P(y) == y>=1.
checking with (2). FAIL. refinement
     P(y) == y>=1. not refined => stop

==========================================================================
# ex6.ss 

************************************
******pure relation assumption 1 *******
*************************************
[RELASS [Q,P]: ( Q(e) & P(l)) -->  ((e<l & l<=0) | (l<=(e-1) & l<=0) | 2<=l | l=e),
RELDEFN Q: ( P(l) & 1<=l & l!=e' & Q(e')) -->  Q(e'),
RELDEFN P: ( 2<=v_node2_28_1699') -->  P(v_node2_28_1699')]
*************************************

P(v) & v<1 --> false. OK

*************************************
******pure relation assumption 1 *******
*************************************
[RELASS [R]: ( R(l)) -->  l!=1,
RELDEFN R: ( 2<=v_node2_17_1723') -->  R(v_node2_17_1723')]
*************************************

R(x) & x<1 --> false. OK

==========================================================================
#ex7.ss

*************************************
******pure relation assumption 1 *******
*************************************
[
(1) ( R(t)) -->  2<=t,
(2) ( 2<=t' & R(t')) -->  Q(t'),
(3) ( 2<=v_node_23_1765') -->  P(v_node_23_1765'),
(4) ( P(l)) -->  l!=1,
(5) ( 2<=p' & Q(p')) -->  Q(p'),
(6) ( 2<=v_tree_34_1744') -->  R(v_tree_34_1744')]
*************************************

R(x) & x<1 --> false. OK

==========================================================================
#ex8.ss
[RELASS [P]: ( P(x)) -->  2<=x,
RELDEFN P: ( 2<=v_node_38_1715') -->  P(v_node_38_1715'),
RELDEFN R: ( 2<=x' & P(x')) -->  R(x'),
RELDEFN Q: ( true) -->  Q(l_most')]

==========================================================================
# ex2a2.ss -p hoo

!!! **iast.ml#3917:Adding the view HP_1695 into iprog.
ExceptionFailure("iast.gather_type_info_heap :gather_type_info_heap: relation HP_1700 cannot be found")Occurred!

Error1(s) detected at main 
Stop z3... 62 invocations 
Stop Omega... 45 invocations caught

Exception occurred: Failure("iast.gather_type_info_heap :gather_type_info_heap: relation HP_1700 cannot be found")
Error3(s) detected at main 

==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
