data node{
   int val;
   node next;
}.

data nodep[T]{
   `T val;
   nodep[`T] next;
}.

pred ll<a:int> == self=null or
          self::node<a,r> * r::ll<a>.

pred llp<a>[T] == self=null or
          self::nodep<a,r>[`T] * r::llp<a>[`T].


checkentail x::ll<2> |- x::ll<2>.
print residue.
expect Valid.

checkentail x::ll<2> & x!=null |- x::node<2,r> * r::ll<2>.
print residue.
expect Valid.
expect Valid.
