// polymorphic node
data nodep[T]{
   `T val;
   nodep[`T] next;
}.

data node{
   int val;
   node next;
}.


checkentail x::nodep<3,t> |- x::nodep<3,t>.
print residue.
expect Valid.

checkentail x::nodep<3,t> |- x::nodep<aaa,t>.
print residue.
expect Valid.

checkentail x::nodep<3,p> & p=t |- x::nodep<aaa,t>.
print residue.
expect Valid.

checkentail x::nodep<qq,p> * qq::node<_,_> & p=t |- x::nodep<aaa,t>.
print residue.
expect Valid.

//should throw exception because of type mismatch
checkentail x::nodep<qq,p> * qq::node<_,_> & p=t |- x::nodep<3,t>.
print residue.
expect Fail.
