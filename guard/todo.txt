
After discussing with Cristian, it seems we
need rel assumption of the form below.

  H0(lf8) |#| x::node<lf8,q> & q!=null--> H(p)
  H0(lf8) |#| x::node<lf8,r9>@M&r9=null --> emp,

This seems critical to obtain a sound solution for
guard/tree-1.ss. We thought also putting guards into
formula, but could not really find a use for it in
verification. It seems we mainly need it in shape
analysis.


# tree-1.slk

infer [P,Q]  x::node<p,q>*P(p) & q!=null |- Q(p).
print residue.

This inference is too weak.

 <1>x::node<p,q>@M&q!=null&{FLOW,(21,22)=__norm}[]
 inferred hprel: [P(p) --> Q(p)]

Can we obtain instead:

 <1>x::node<p,q>@M&q!=null&{FLOW,(21,22)=__norm}[]

   P(p) |#| x::node<p,q> & q!=null--> Q(p)

This gives relational information that q!=null is required.

==========================================================
# tree-1b.slk

relAssume 
   H0(lf8) * H1(r9) * x::node<lf8,r9> &r9=null  --> G(x).

shape_split_base [H0,H1][G].

/*
# tree-1b.slk

  Obtained: 
 [ H0(lf8) * x::node<lf8,r9>@M&r9=null --> G(x),
  H1(r9)&r9=null --> emp]

This split is not clean. Can we obtain instead:

  x::node<lf8,r9>@M&r9=null --> G(x),
  H0(lf8) |#| x::node<lf8,r9>@M&r9=null --> emp,
  H1(r9)&r9=null --> emp]

==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
==========================================================
