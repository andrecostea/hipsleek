data node {
	int val;
	node next;
}.

pred lseg<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg<p, n-1>
	inv n>=0.


lemma_unsafe "ll_tail2" self::lseg<p, n> 
   <- self::lseg<t, n-1> * t::node<_, p>.

//1
checkentail//_exact
    self1::node<_,r_86> * r_86::lseg<t_71,m> * t_71::node<_,p> & n=m+2
    |- self1::lseg<p,n>.
expect Valid.
print residue.


//2 -fold (1)
checkentail//_exact 
    self1::node<_,r_86> * r_86::lseg<t_71,n-2> * t_71::node<_,p> & n-2+1=n_57 & r2=r_86
    |-   self1::node<_, r2> * r2::lseg<p, n_57>.
expect Valid.
print residue.

/*
//2 -fold-match
checkentail_exact 
    r_86::lseg<t_71,n-2> * t_71::node<_,p> & r_86=r2 & n-2+1=n_57
    |-  r2::lseg<p, n_57>.
expect Valid.
print residue.
*/

//3
/*
checkentail_exact  
	self::node<_, r> * r::lseg<t, n-2> * t::node<_, p> |- self::lseg<p, n>.
expect Valid.
print residue.
*/

/*
checkentail  r_86::lseg<t_71,flted_22_164> * t_71::node<Anon_17,p>&flted_22_164+2=n & 1+n=n_57+2 & r2=r_86 & Anon_18=Anon_16
                   |- r2::lseg<p,n_167>&r_86=r2  & n_167=n_57.


checkentail r_86::lseg<t_71,flted_15_87> * t_71::node<Anon_15,p>&flted_15_87+2=n & Anon_89=Anon_14 & r_90=r_86
                  |-  r_90::lseg<p,flted_7_116>&flted_7_116+1=n_57.
*/