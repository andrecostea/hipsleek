data node {
	int val;
	node next;
}.

pred lseg<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg<p, n-1>
	inv n>=0.

lemma_unsafe "ll_tail2" self::lseg<p, n> 
   <- self::lseg<t, n-1> * t::node<_, p>.


checkentail 
    self_ll_tail2::node<_,r> * r::lseg<t,n-2> * t::node<_,p>
    |- self_ll_tail2::lseg<p,n>.
expect Valid.
print residue.


// fold
checkentail  
     self_ll_tail2::node<_,r> * r::lseg<t,n-2> * t::node<_,p>
    |- (exists r1: self_ll_tail2::node<_, r1> * r::lseg<p,n-1>).
expect Valid.
print residue.
