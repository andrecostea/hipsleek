# rlc.slk  (came from rlseg.slk)

// complex lemma
lemma_unsafe "t1a" self::node<_,q>*q::rlseg<p>  -> self::rlseg<p1>* p1::node<_,p>.
// see rlb.slk for the steps which unfold left, then right.

// can we even apply complex lemma?
checkentail_exact 
  q::node<_,qq>*qq::rlseg<p>  
      |- q::rlseg<p1>* p1::node<_,p>
======================================================================
# append-tail.ss

bind failure with --dis-imm ??

Why below with exists ty?

id: 7; caller: []; line: 39; classic: false; kind: POST; hec_num: 5; evars: [ty_1065,q_1066]; infer_vars: []; c_heap: emp
 checkentail x::lseg2<tx1,flted1>@M * y::ll_tail2<ty1,m>@M * tx'::node<_,y'>@M&
flted=next & x=x' & tx'=tx1 & y=y' & ty'=ty1 & tx=tx1 & ty=ty1 & 
flted=null & n=flted1+1&{FLOW,(24,25)=__norm}[]
 |-  (exists ty,q: x::ll_tail2<ty,q>@M&{FLOW,(24,25)=__norm})[]. 
res:  1[
   y::lseg2<ty_1045,flted_25_1092>@M * tx'::node<_,y'>@M&m=flted_25_1092+1 & flted_25_1091=null & n=flted_25_1062+1 & flted_25_1061=null & ty=ty_1045 & tx=tx_1044 & ty=ty' & y=y' & tx=tx' & x=x' & flted_25_1061=next_43_1064&{FLOW,(24,25)=__norm}[]
   ]

======================================================================
# app-tl2c1.slk

 unsoundness in lemma application with 
  some existentials.

 caused by --lem-dis-fold

Expect: Valid.Fail.Valid.Fail.Valid.Fail.


Resulting in contradiction.
 <1>emp&qq=nn+1 & qq=2+nn&{FLOW,(21,22)=__norm}[]
[[ SEARCH ==>  (Lemma <== ll_tail2) ==> (right: ll_tail2) ==>  Match ==>  Match ==> ]]

# app-tl2c1.slk

 unsoundness in lemma application with 
  existentials & explicit existential.

Expect: Valid.Fail.Valid.Fail.Valid.Fail.


loris@loris-desktop:/home2/loris/hg/sl_default$ hg bisect -g
The first bad revision is:
changeset:   10711:b9e1afcfcf66
branch:      sa_logging
parent:      10706:dfb9128b3bba
user:        locle <locle@suna>
date:        Sat Feb 22 18:32:46 2014 +0800
summary:     fixed bugs of lseg.slk. run-fast-test is OK

Correct Answers below:

Entail 1: Valid. 

 <1>emp&qq=nn+1&{FLOW,(21,22)=__norm}[]
[[ SEARCH ==>  (Lemma <== ll_tail2) ==>  Match ==>  Match ==> ]]


Entail 2: Fail.(must) cause:UnionR[ 0<=nn & nn=qq |-  qq=nn+2. LOCS:[8;37] (must-bug), true |-  qq=nn+2 & qq=1+nn. LOCS:[0;37;11] (RHS: contradiction)]


Entail 3: Valid. 

 <1>emp&qq=nn+1 & qq=1+nn & qq=nn+1&{FLOW,(21,22)=__norm}[]
[[ SEARCH ==>  (Lemma <== ll_tail2) ==>  Match ==>  Match ==> ]]


Entail 4: Fail.(must) cause:UnionR[ true |-  nn=nn+2. LOCS:[0;50] (RHS: contradiction), true |-  exists(qq:qq=1+nn & qq=nn+2). LOCS:[0] (RHS: contradiction)]


Entail 5: Valid. 

 <1>emp&{FLOW,(21,22)=__norm}[]
[[ SEARCH ==>  (Lemma <== ll_tail2) ==>  Match ==>  Match ==> ]]


Entail 6: Fail.(must) cause:UnionR[ true |-  nn=nn+2. LOCS:[0;64] (RHS: contradiction), true |-  1+nn=nn+2. LOCS:[0;11] (RHS: contradiction)]
======================================================================
# app-tail3.slk

two solutions; first is unnecessary

 <1>
    x::node<_,b>@M * y::ll_tail2<ty,m>@M&b=null & tx=x & n=1&
    {FLOW,(21,22)=__norm}[]
    or (exists flted_11_2733: x::node<_,b>@M * 
       b::ll_tail2<tx,flted_11_2733>@M * y::ll_tail2<ty,m>@M&n=flted_11_2733+
       1 & b!=null&{FLOW,(21,22)=__norm})[]

<2>(exists flted_18_688: x::lseg2<tx,flted_18_688>@M * tx::node<_,b>@M&n=flted_18_688+1 & b=null&{FLOW,(21,22)=__norm})[]


Can we give priority to full relevation by lemma?
 Why is lemma not given higher priority?
 Why is lemma repeated with both ==> and <== ?

Solution : (i) change priority
  (ii) change search to cond if priorities are different
 wt - 
      search --> lowest; 
      cond  --> lowest;

 Prio:0COND =>[Prio:0(Lemma ==> ll_tail2) =>
                 LHS: x::ll_tail2<tx,n>@M
                 RHS: tx::node<_,b>@L;Prio:1BaseCaseUnfold =>
 LHS: x::ll_tail2<tx,n>@M
 RHS: tx::node<_,b>@L];
 Prio:0COND =>[Prio:0(Lemma <== ll_tail2) =>
                 LHS: x::ll_tail2<tx,n>@M
                 RHS: tx::node<_,b>@L;Prio:1BaseCaseUnfold =>
 LHS: x::ll_tail2<tx,n>@M
 RHS: tx::node<_,b>@L]]

compute_actions@1
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: x::ll_tail2<tx,n>@M
compute_actions inp3 :LHS pure: true
compute_actions inp4 :RHS cand:[ tx::node<_,b>@L]
compute_actions inp5 :right alias:[Anon_16,b]
compute_actions@1 EXIT: SEARCH =>[
  Prio:1COND =>[Prio:1Unfold 1 =>
                                  LHS: x::ll_tail2<tx,n>@M
                                  RHS: tx::node<_,b>@L;
                Prio:1BaseCaseUnfold =>
  
   LHS: x::ll_tail2<tx,n>@M
   RHS: tx::node<_,b>@L];
  Prio:1COND =>[Prio:1(Lemma ==> ll_tail2) =>
                                              LHS: x::ll_tail2<tx,n>@M
                                              RHS: tx::node<_,b>@L;
                Prio:1BaseCaseUnfold =>
  
   LHS: x::ll_tail2<tx,n>@M
   RHS: tx::node<_,b>@L];
  Prio:1COND =>[Prio:1(Lemma <== ll_tail2) =>
                                              LHS: x::ll_tail2<tx,n>@M
                                              RHS: tx::node<_,b>@L;
                Prio:1BaseCaseUnfold =>
          LHS: x::ll_tail2<tx,n>@M
          RHS: tx::node<_,b>@L]
  ]

======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================

