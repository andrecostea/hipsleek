# ex8e4d.ss (FIXED)

EEE<> == self::cell<_>;

HHH<> == self::EEE<> 
  or self::str<_,_> inv true;

# Fixed with a better error message:

Exception occurred: Failure("gather_type_info_var : unexpected exception Failure(\"UNIFICATION ERROR : at location {(Line:14,Col:9),(Line:14,Col:20)} types str and cell are inconsistent\")")
Error3(s) detected at main 

!!! **iast.ml#2168:XXX:view:HHH
!!! **iast.ml#2169:XXX:a:[str,cell]
!!! **iast.ml#2168:XXX:view:EEE
!!! **iast.ml#2169:XXX:a:[cell]

ERROR: at _0:0_0:0
Message: Can not find flow of str

ERROR: at ex8e4d-conflict-type-err-pred.ss_14:9_14:20
Message: gather_type_info_var : unexpected exception Failure("Can not find flow of str")

!!! **main.ml#1177:WARNING : Logging not done on finalize
Stop Omega... 0 invocations caught

Exception occurred: Failure("gather_type_info_var : unexpected exception Failure(\"Can not find flow of str\")")
Error3(s) detected at main 
=======================================================================
# ex8e4e.ss  (FIXED)

HHH<> == self::cell<_>
  or self::str<_,_> inv true;

# Fixed with a better error message ..

ERROR: at _0:0_0:0
Message: type conflict between 'cell' and 'str'

# why is this error message at an earlier point?

!!!Full processing file "ex8e4e-conflict-type-err-pred.ss"
Parsing file "ex8e4e-conflict-type-err-pred.ss" by default parser...

!!! processing primitives "["prelude.ss"]

Starting Omega.../usr/local/bin/oc

ERROR: at _0:0_0:0
Message: type substitution error: cannot substitute 'cell' by 'str'

!!! **main.ml#1177:WARNING : Logging not done on finalize
Stop Omega... 0 invocations caught

Exception occurred: Failure("type substitution error: cannot substitute 'cell' by 'str'")
Error3(s) detected at main 
=======================================================================
# ex8e4b.ss (FIXED)

EEE<> == emp inv true;
HHH<> == self::EEE<> 
  or self::str<_,_> inv true;

Fixed with a warning and treating "" object as universal.

WARNING: _0:0_0:0:self of EEE cannot have its type determined


Starting Omega.../usr/local/bin/oc

!!! **iast.ml#2150:XXX:0v.view_name:WAITS
!!! **iast.ml#2150:XXX:0v.view_name:WAIT
!!! **iast.ml#2150:XXX:0v.view_name:memLoc
!!! **iast.ml#2168:XXX:view:HHH
!!! **iast.ml#2169:XXX:a:[str]
WARNING: _0:0_0:0:self of EEE cannot have its type determined

ERROR: at _0:0_0:0
Message: Can not find flow of str

ERROR: at ex8e4b-type-err-pred.ss_10:9_10:20
Message: gather_type_info_var : unexpected exception Failure("Can not find flow of str")

!!! **main.ml#1177:WARNING : Logging not done on finalize
Stop Omega... 0 invocations caught

Exception occurred: Failure("gather_type_info_var : unexpected exception Failure(\"Can not find flow of str\")")
Error3(s) detected at main 
=======================================================================
# ex52a.slk --print-type (FIXED by subs tlist a 2nd time on ante)

# Why aren't the TVars unified?

checkentail inf_p=null & x!=inf_p |- x!=null.

# <1>emp&x:TVar[24]!=inf_p:TVar[20] & inf_p:TVar[20]=null&{FLOW,(20,21)=__norm#E}[]

checkentail inf_p=null & x=inf_p |- x=null.

=======================================================================
# ex52b.slk --print-type

# Why is x not Object type?

 <1>emp&x:TVar[28]!=null & inf_p:TVar[28]=null & R:RelT([])(fld5:node) & 
        z:TVar[28]=0 & fld5:node=null&{FLOW,(20,21)=__norm#E}[]
 inferred pure: [z:TVar[28]=0]
 inferred rel: [RELASS [R:RelT([])]: ( R:RelT([])(fld5:node)) -->  fld5:node=null]


=======================================================================
# ex10a1.ss (OK)

 infer [PP]
  requires s::WFS<p> 
  ensures s::WFSeg<a>*a::str<0,b> & PP(s,p,s',b) ;

Compare with # ex10a.ss verified spec:

  requires s::WFS<p> 
  ensures s::WFSeg<a>*a::str<0,p> & a=s';

Compare also with inferred
!!! **pi.ml#775:>>>>>>>>>>> (bef postprocess): <<<<<<<<<
!!! **pi.ml#776:>>REL POST:  PP(p,a_68,s',b_69)
!!! **pi.ml#777:>>POST:  a_68!=null & a_68=s' & p=b_69

Below seems OK:
=================

[RELDEFN PP: ( a!=null & PP(a,p,s',b)) -->  PP(a,p,s',b),
RELDEFN PP: ( b=p & a=s' & s'!=null) -->  PP(a,p,s',b)]

Fixcalc seems to produce correct result here..


=======================================================================
# ex10a2.ss

  infer [PP]
  requires s::WFS<p> 
  ensures (exists a,b: s::WFSeg<a>*a::str<0,b> & PP(a,p,s',b)) ;

Inferred:

!!! **pi.ml#775:>>>>>>>>>>> (bef postprocess): <<<<<<<<<
!!! **pi.ml#776:>>REL POST:  PP(p,a_68,s',b_69)
!!! **pi.ml#777:>>POST:  a_68!=null & a_68=s' & p=b_69
!!! **pi.ml#778:>>REL PRE :  true
!!! **pi.ml#779:>>PRE :  true

Can we tidy name printing to use a,b instead?
=======================================================================
# ex10a3.ss (OK - no inference printing)

# why is there inference printing when we did not have any infer_command!

=======================================================================
# ex10a5.slk (FIXED by print suppresion)

# Why is there a contradiction detected? Why is it printed?

!!! **infer.ml#2001:>>>>>> infer_collect_rel <<<<<<
!!! **infer.ml#2002:LHS and RHS Contradiction detected for:
!!! **infer.ml#2003:lhs: s=a & v!=0 & q!=null & PPP(a_71,p,s',b_72) & flted_24_70=0 & 
 flted_42_65=v & b=q & ((q!=null | a_71=q)) & a_71!=null & s!=null & a_71!=s
!!! **infer.ml#2004:rhs: flted_42_65=0 & s=a
!!! **infer.ml#2005:Skip collection of following RELDEFN:
!!! **infer.ml#2006:rel defns:[ PPP(a,p,s',b)]infer_pure_m_x 3

!!! **infer.ml#2210:RelInferred (simplified):[RELDEFN PPP: ( a!=null & PPP(a,p,s',b)) -->  PPP(a,p,s',b)]
=======================================================================
# ex10a6.ss (OK)

  infer [PPP]
  requires s::WFS<p> 
  ensures s::WFSeg<a>*a::str<n,b> & PPP(a,p,s',b,n) ;


Inferring "n" seems hard. Is there residue?

[RELDEFN PPP: ( PPP(a_1598,p,s',b_1599,n_1600) & b!=null & n!=0 & a!=null & a<a_1598) -->  PPP(a,p,s',b,n),
RELDEFN PPP: ( a_1598!=null & PPP(a_1598,p,s',b_1599,n_1600) & b!=null & n!=0 & a_1598<a) -->  PPP(a,p,s',b,n),
RELDEFN PPP: ( a!=null & PPP(a,p,s',b,n)) -->  PPP(a,p,s',b,n),
RELDEFN PPP: ( b=p & n=0 & a=s' & s'!=null) -->  PPP(a,p,s',b,n)]

# @leak inference gave better results:

!!! **pi.ml#777:>>POST:  a!=null & a=s' & p=b & 0=n

=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
