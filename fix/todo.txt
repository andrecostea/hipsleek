# ex8e4d.ss (FIXED)

EEE<> == self::cell<_>;

HHH<> == self::EEE<> 
  or self::str<_,_> inv true;

# Fixed with a better error message:

Exception occurred: Failure("gather_type_info_var : unexpected exception Failure(\"UNIFICATION ERROR : at location {(Line:14,Col:9),(Line:14,Col:20)} types str and cell are inconsistent\")")
Error3(s) detected at main 

!!! **iast.ml#2168:XXX:view:HHH
!!! **iast.ml#2169:XXX:a:[str,cell]
!!! **iast.ml#2168:XXX:view:EEE
!!! **iast.ml#2169:XXX:a:[cell]

ERROR: at _0:0_0:0
Message: Can not find flow of str

ERROR: at ex8e4d-conflict-type-err-pred.ss_14:9_14:20
Message: gather_type_info_var : unexpected exception Failure("Can not find flow of str")

!!! **main.ml#1177:WARNING : Logging not done on finalize
Stop Omega... 0 invocations caught

Exception occurred: Failure("gather_type_info_var : unexpected exception Failure(\"Can not find flow of str\")")
Error3(s) detected at main 
=======================================================================
# ex8e4e.ss  (FIXED)

HHH<> == self::cell<_>
  or self::str<_,_> inv true;

# Fixed with a better error message ..

ERROR: at _0:0_0:0
Message: type conflict between 'cell' and 'str'

# why is this error message at an earlier point?

!!!Full processing file "ex8e4e-conflict-type-err-pred.ss"
Parsing file "ex8e4e-conflict-type-err-pred.ss" by default parser...

!!! processing primitives "["prelude.ss"]

Starting Omega.../usr/local/bin/oc

ERROR: at _0:0_0:0
Message: type substitution error: cannot substitute 'cell' by 'str'

!!! **main.ml#1177:WARNING : Logging not done on finalize
Stop Omega... 0 invocations caught

Exception occurred: Failure("type substitution error: cannot substitute 'cell' by 'str'")
Error3(s) detected at main 
=======================================================================
# ex8e4b.ss (FIXED)

EEE<> == emp inv true;
HHH<> == self::EEE<> 
  or self::str<_,_> inv true;

Fixed with a warning and treating "" object as universal.

WARNING: _0:0_0:0:self of EEE cannot have its type determined


Starting Omega.../usr/local/bin/oc

!!! **iast.ml#2150:XXX:0v.view_name:WAITS
!!! **iast.ml#2150:XXX:0v.view_name:WAIT
!!! **iast.ml#2150:XXX:0v.view_name:memLoc
!!! **iast.ml#2168:XXX:view:HHH
!!! **iast.ml#2169:XXX:a:[str]
WARNING: _0:0_0:0:self of EEE cannot have its type determined

ERROR: at _0:0_0:0
Message: Can not find flow of str

ERROR: at ex8e4b-type-err-pred.ss_10:9_10:20
Message: gather_type_info_var : unexpected exception Failure("Can not find flow of str")

!!! **main.ml#1177:WARNING : Logging not done on finalize
Stop Omega... 0 invocations caught

Exception occurred: Failure("gather_type_info_var : unexpected exception Failure(\"Can not find flow of str\")")
Error3(s) detected at main 
=======================================================================
# ex52a.slk --print-type (FIXED by subs tlist a 2nd time on ante)

# Why aren't the TVars unified?

checkentail inf_p=null & x!=inf_p |- x!=null.

# <1>emp&x:TVar[24]!=inf_p:TVar[20] & inf_p:TVar[20]=null&{FLOW,(20,21)=__norm#E}[]

checkentail inf_p=null & x=inf_p |- x=null.

=======================================================================
# ex52b.slk --print-type

# Why is x not Object type?

 <1>emp&x:TVar[28]!=null & inf_p:TVar[28]=null & R:RelT([])(fld5:node) & 
        z:TVar[28]=0 & fld5:node=null&{FLOW,(20,21)=__norm#E}[]
 inferred pure: [z:TVar[28]=0]
 inferred rel: [RELASS [R:RelT([])]: ( R:RelT([])(fld5:node)) -->  fld5:node=null]


=======================================================================
# ex10a1.ss

 infer [PP]
  requires s::WFS<p> 
  ensures s::WFSeg<a>*a::str<0,b> & PP(s,p,s',b) ;

Compare with # ex10a.ss verified spec:

  requires s::WFS<p> 
  ensures s::WFSeg<a>*a::str<0,p> & a=s';


Expects
=======
  s'=a  & b=p

GOT:
!!! **pi.ml#777:>>POST:  s!=null & s'!=null & p=b

****** Before putting into fixcalc*******
pre_vars: s,p
post_vars: s',b
*************************************
formula:  ((b=p & s=s' & s'!=null) | 
  (exists(q_1596:q_1596!=null & PP(q_1596,p,s',b)) & s!=null))
*************************************

!!! **fixcalc.ml#1032:Input of fixcalc: :PP:={[NODs,NODp] -> [NODPRIs,NODb] -> []: (NODb=NODp && NODs=NODPRIs && NODPRIs>0 ||  (exists (NODq_1596:NODq_1596>0 && PP(NODq_1596,NODp,NODPRIs,NODb)))  && NODs>0)
};
bottomupgen([PP], [2], SimHeur);
!!! **fixcalc.ml#390:svls (orig):[PP,p,s',b,s]
!!! **fixcalc.ml#391:svls (from parse_fix):[s,s',p,b]
!!! **fixcalc.ml#1060:Result of fixcalc (parsed): :[ s!=null & s'!=null & p=b]
!!! **pi.ml#775:>>>>>>>>>>> (bef postprocess): <<<<<<<<<
!!! **pi.ml#776:>>REL POST:  PP(s,p,s',b)
!!! **pi.ml#777:>>POST:  s!=null & s'!=null & p=b
!!! **pi.ml#778:>>REL PRE :  true
!!! **pi.ml#779:>>PRE :  true

=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
