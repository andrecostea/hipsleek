
data cell{int val;}.

checkentail x::cell<_>@w * A |- x::cell<_>@v.

each match action should update the residue (es_formula) and consumed heap (es_heap)

// Current implementation:
for the above example, after match we have:
es_formula:   x::cell<_>@[@w,@v] * A ,  where @[@w,@v] should be smth like @w \subtract @v
es_heap:      x::cell<_>@v

the problem with this approach is that 
(i) I did not defined a \subtract function 
(ii) I need to express somehow the fact that
x::cell<_>@[@w,@v] and x::cell<_>@v are disjoint. 


// Proposal to change (I):
es_formula:   x::cell<_>@z * A /\ @z=residue(@w,@v) /\  @u=consumed(@w,@v) /\ DISJ(@z,@u)
es_heap:      x::cell<_>@u

must define "residue" and "consumed" functions, and DISJ as relation


// Proposal to change (II):
es_formula:   x::cell<_>@z * A /\ @z=residue(@w,@v)
es_heap:      emp

postpone updating es_heap until I have a concrete value for @z

