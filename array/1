
!!!Full processing file "s_arr_tmp.ss"
Parsing file "s_arr_tmp.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting z3... 
#### ante =  0<size
#### conseq =  0<size
 ### res = 
 ;Variables declarations
(declare-fun size () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< 0 size))
;Negation of Consequence
(assert (not (< 0 size)))
(check-sat)
#### ante =  a=0 & a>0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= a 0))
(assert (> a 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((a<=0 | a!=0)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (<= a 0) (not (= a 0)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a=b & a!=b
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= a b))
(assert (not (= a b)))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((a=b | a!=b)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (= a b) (not (= a b)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a & !(a)
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (> a 0))
(assert (not (> a 0)))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((a | !(a))))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (> a 0) (not (> a 0)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(a) & !(((b | !(b))))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (> a 0)))
(assert (not (or (> b 0) (not (> b 0)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a & !(((b | !(b))))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (> a 0))
(assert (not (or (> b 0) (not (> b 0)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b<=a & a<b
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= b a))
(assert (< a b))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((b<=a | a<b)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (<= b a) (< a b))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b<a & a<=b
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< b a))
(assert (<= a b))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((b<a | a<=b)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (< b a) (<= a b))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  0<=a & a<0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= 0 a))
(assert (< a 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((0<=a | a<0)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (<= 0 a) (< a 0))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  1<=b & (b+1)<=0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= 1 b))
(assert (<= (+ b 1) 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  1<=b & 0<(b+1) & b<1
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= 1 b))
(assert (< 0 (+ b 1)))
(assert (< b 1))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  (b+1)<=0 & 0<(b+1) & b<1
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= (+ b 1) 0))
(assert (< 0 (+ b 1)))
(assert (< b 1))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  0<=a & !(((1<=b | (b+1)<=0 | (0<(b+1) & b<1))))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= 0 a))
(assert (not (or (or (<= 1 b) (<= (+ b 1) 0)) (and (< 0 (+ b 1)) (< b 1)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  1<=b & 0<=a & !(((a<b | b<=a)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= 1 b))
(assert (<= 0 a))
(assert (not (or (< a b) (<= b a))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a<(b+b) & (b+b)<=a
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< a (+ b b)))
(assert (<= (+ b b) a))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b<=a & 1<=b & 0<=a & !(((a<(b+b) | (b+b)<=a)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= b a))
(assert (<= 1 b))
(assert (<= 0 a))
(assert (not (or (< a (+ b b)) (<= (+ b b) a))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a<0 & !(((1<=b | (b+1)<=0 | (0<(b+1) & b<1))))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< a 0))
(assert (not (or (or (<= 1 b) (<= (+ b 1) 0)) (and (< 0 (+ b 1)) (< b 1)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b=0 & b!=0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= b 0))
(assert (not (= b 0)))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((b=0 | b!=0)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (= b 0) (not (= b 0)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b!=0 & b=0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (= b 0)))
(assert (= b 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((b!=0 | b=0)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (not (= b 0)) (= b 0))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b=1 & 1<b
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= b 1))
(assert (< 1 b))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b=1 & (b+1)<=0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= b 1))
(assert (<= (+ b 1) 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b=1 & 0<(b+1) & b<1
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= b 1))
(assert (< 0 (+ b 1)))
(assert (< b 1))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  1<b & (b+1)<=0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< 1 b))
(assert (<= (+ b 1) 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  1<b & 0<(b+1) & b<1
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< 1 b))
(assert (< 0 (+ b 1)))
(assert (< b 1))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  0<=a & !(((b=1 | 1<b | (b+1)<=0 | (0<(b+1) & b<1))))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= 0 a))
(assert (not (or (or (or (= b 1) (< 1 b)) (<= (+ b 1) 0)) (and (< 0 (+ b 1)) (< b 1)))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a=0 & 0<a
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= a 0))
(assert (< 0 a))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a=0 & a<0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= a 0))
(assert (< a 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  0<a & a<0
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< 0 a))
(assert (< a 0))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  !(((a=0 | 0<a | a<0)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (not (or (or (= a 0) (< 0 a)) (< a 0))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  b<0 & 0<b
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< b 0))
(assert (< 0 b))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  0<a & !(((b=0 | b<0 | 0<b)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< 0 a))
(assert (not (or (or (= b 0) (< b 0)) (< 0 b))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  a<0 & !(((b=0 | b<0 | 0<b)))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun a () Int)
(declare-fun b () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (< a 0))
(assert (not (or (or (= b 0) (< b 0)) (< 0 b))))
;Negation of Consequence
(assert (not false))
(check-sat)

data __Exc {
;
}
data __Error {
;
}
data __MayError {
;
}
data __Fail {
;
}

 view_prim WAITS{}[]<G:bag(tup2(Object,Object)),S:bag(Object),d:Object>= 
  view_domains: view_prim WAITS<G:bag(tup2(Object,Object)),S:bag(Object),
                d:Object>= 
  EBase (* lbl: *){218}->emp&{FLOW,(1,31)=__flow}[]
  view vars: G,S,d
  ann vars (0 - not a posn): 
  cont vars: 
  inv: true
  baga over inv: [([], true)]
  baga over inv (unfolded): [([], true)]
  inv_lock: None
  unstructured formula: (* lbl: *){218}->emp&{FLOW,(1,31)=__flow}[]
  xform: true
  is_recursive?: false
  is_primitive?: true
  is_touching?: false
  is_segmented?: false
  is_tail_recursive?: false
  residents: 
  forward_ptrs: 
  backward_ptrs: 
  forward_fields: 
  backward_fields: 
  same_xpure?: YES
  view_data_name: WAITS
  self preds: []
  materialized vars: []
  addr vars: 
  uni_vars: []
  bag of addr: 
  view_complex_inv: None
  prune branches: ,[]
  prune conditions: {
[]}
  prune baga conditions: 
  prune invs:0:,[]
 view_prim WAIT{}[]<b:bag(tup2(Object,Object))>= 
  view_domains: view_prim WAIT<b:bag(tup2(Object,Object))>= 
  EBase (* lbl: *){219}->emp&{FLOW,(1,31)=__flow}[]
  view vars: b
  ann vars (0 - not a posn): 
  cont vars: 
  inv: true
  baga over inv: [([], true)]
  baga over inv (unfolded): [([], true)]
  inv_lock: None
  unstructured formula: (* lbl: *){219}->emp&{FLOW,(1,31)=__flow}[]
  xform: true
  is_recursive?: false
  is_primitive?: true
  is_touching?: false
  is_segmented?: false
  is_tail_recursive?: false
  residents: 
  forward_ptrs: 
  backward_ptrs: 
  forward_fields: 
  backward_fields: 
  same_xpure?: YES
  view_data_name: WAIT
  self preds: []
  materialized vars: []
  addr vars: 
  uni_vars: []
  bag of addr: 
  view_complex_inv: None
  prune branches: ,[]
  prune conditions: {
[]}
  prune baga conditions: 
  prune invs:0:,[]
 view_prim memLoc{}[]<heap:boolean,size:int>= 
  view_domains: view_prim memLoc<heap:boolean,size:int>= 
  EBase (* lbl: *){220}->emp&{FLOW,(1,31)=__flow}[]
  view vars: heap,size
  ann vars (0 - not a posn): 
  cont vars: 
  inv: 0<size
  baga over inv: [([], 0<size)]
  baga over inv (unfolded): [([], 0<size)]
  inv_lock: None
  unstructured formula: (* lbl: *){220}->emp&{FLOW,(1,31)=__flow}[]
  xform: 0<size
  is_recursive?: false
  is_primitive?: true
  is_touching?: false
  is_segmented?: false
  is_tail_recursive?: false
  residents: 
  forward_ptrs: 
  backward_ptrs: 
  forward_fields: 
  backward_fields: 
  same_xpure?: YES
  view_data_name: memLoc
  self preds: []
  materialized vars: []
  addr vars: 
  uni_vars: []
  bag of addr: 
  view_complex_inv: None
  prune branches: ,[]
  prune conditions: {
[]}
  prune baga conditions: 
  prune invs:0:,[]

 relation update_array(int[] a, int[] r, int v, int i).


int array_get$int[]~int(  int[] a,  int i)
static  EBase emp&{FLOW,(4,5)=__norm}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm}[]
                 EAssume 
                   emp&res=a[i]&{FLOW,(4,5)=__norm}[]
                   
dynamic  EBase hfalse&false&{FLOW,(4,5)=__norm}[]
{(8,0),(10,22)}

int[] update_arr$int[]~int~int(  int[] a,  int i,  int v)
static  EBase emp&{FLOW,(4,5)=__norm}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm}[]
                 EAssume 
                   emp&update_array(a,res,v,i)&{FLOW,(4,5)=__norm}[]
                   
dynamic  EBase hfalse&false&{FLOW,(4,5)=__norm}[]
{(4,0),(6,34)}

int foo$int(  int x)
static  EBase emp&{FLOW,(4,5)=__norm}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm}[]
                 EAssume 
                   emp&res=1+x&{FLOW,(4,5)=__norm}[]
                   
dynamic  EBase hfalse&false&{FLOW,(4,5)=__norm}[]
try 
{((((int[] a_37;
a_37 = {((int v_int_24_1399;
(v_int_24_1399 = {((int v_int_24_1397;
v_int_24_1397 = 1);
add___$int~int(x,v_int_24_1397))};
(int v_int_24_1398;
v_int_24_1398 = 5)));
update___1d$int~int[]~int(v_int_24_1399,a_37,v_int_24_1398))});
(int r_38;
r_38 = {((int v_int_25_1400;
v_int_25_1400 = 5);
array_get_elm_at___1d$int[]~int(a_37,v_int_25_1400))}));
dprint);
ret# r_38)}
 catch (23,24)=ret_int ret_int:f_r_1394 ) 
	(int v_int_19_1396;
(v_int_19_1396 = bind f_r_1394 to (val_19_1395) [read] in 
val_19_1395;
ret# v_int_19_1396))

{(16,0),(0,-1)}




Checking procedure foo$int... #### ante =  v_int_24_1397'=1 & x'=x
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun v_int_24_1397_primed () Int)
(declare-fun x_primed () Int)
(declare-fun x () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= v_int_24_1397_primed 1))
(assert (= x_primed x))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  v_int_24_1398'=5
#### conseq =  exists(ahaub_1446:exists(ahalb_1447:dom(a_37',ahalb_1447,ahaub_1446) & 
ahalb_1447<=v_int_24_1398') & v_int_24_1398'<=ahaub_1446)
 ### res = 
 ;Variables declarations
(declare-fun dom () Int)
(declare-fun a_37_primed () (Array Int Int))
(declare-fun v_int_24_1398_primed () Int)
;Relations declarations
(declare-fun dom ((Array Int Int) Int Int) Bool)
;Axioms assertions
(assert (forall ((low Int) (high Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dom a low high) (and (<= low l) (<= h high)))
	(dom a l h))))
;Antecedent
(assert (= v_int_24_1398_primed 5))
;Negation of Consequence
(assert (not (exists ((ahaub_1446 Int)) (and (exists ((ahalb_1447 Int)) (and (dom a_37_primed ahalb_1447 ahaub_1446) (<= ahalb_1447 v_int_24_1398_primed))) (<= v_int_24_1398_primed ahaub_1446)))))
(check-sat)
#### ante =  exists(ahaub:exists(ahalb:dom(a_37',ahalb,ahaub) & ahalb<=v_int_24_1398') & 
v_int_24_1398'<=ahaub)
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun v_int_24_1398_primed () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (exists ((ahaub Int)) (and (exists ((ahalb Int)) (<= ahalb v_int_24_1398_primed)) (<= v_int_24_1398_primed ahaub))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  v_int_24_1398'=5 & exists(ahaub:exists(ahalb:dom(a_37',ahalb,ahaub) & 
ahalb<=v_int_24_1398') & v_int_24_1398'<=ahaub)
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun v_int_24_1398_primed () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= v_int_24_1398_primed 5))
(assert (exists ((ahaub Int)) (and (exists ((ahalb Int)) (<= ahalb v_int_24_1398_primed)) (<= v_int_24_1398_primed ahaub))))
;Negation of Consequence
(assert (not false))
(check-sat)
#### ante =  v_int_24_1398'=5 & !(exists(ahaub:exists(ahalb:dom(a_37',ahalb,ahaub) & 
ahalb<=v_int_24_1398') & v_int_24_1398'<=ahaub))
#### conseq =  false
 ### res = 
 ;Variables declarations
(declare-fun v_int_24_1398_primed () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (= v_int_24_1398_primed 5))
(assert (not (exists ((ahaub Int)) (and (exists ((ahalb Int)) (<= ahalb v_int_24_1398_primed)) (<= v_int_24_1398_primed ahaub)))))
;Negation of Consequence
(assert (not false))
(check-sat)

Procedure foo$int FAIL.(2)

Exception Failure("hd") Occurred!
(Program not linked with -g, cannot print stack backtrace)

Error(s) detected when checking procedure foo$int
Stop z3... 45 invocations 
0 false contexts at: ()

!!! log(small):(0.024682,213)
Total verification time: 0.344709 second(s)
	Time spent in main process: 0.332403 second(s)
	Time spent in child processes: 0.012306 second(s)
	Z3 Prover Time: 0.002561 second(s)
