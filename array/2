!!! init_tp by default: 
!!! Using z3
!!!-dre heap_entail_empty\|.*infer\|new_trans\|.*simplify
Starting z3... 

(==cpure.ml#6320==)
b_form_simplify @3@2@1
b_form_simplify  inp1 : i=3
b_form_simplify @3 EXIT: i=3

(==astsimp.ml#7710==)
arith_simplify LHS@2@1
arith_simplify LHS inp1 : i=3
arith_simplify LHS@2 EXIT: i=3

(==cpure.ml#6320==)
b_form_simplify @5@4@1
b_form_simplify  inp1 : (a[i])>(a[i-1])
b_form_simplify @5 EXIT: (a[i-1])<(a[i])

(==astsimp.ml#7710==)
arith_simplify LHS@4@1
arith_simplify LHS inp1 : (a[i])>(a[i-1])
arith_simplify LHS@4 EXIT: (a[i-1])<(a[i])

!!! **sleekengine.ml#1125:type-table:[(i:11:int)(a:15:NUM[])(TVar__14:14:NUM)(Anon_full_perm:13:float)(TVar__12:12:int)(TVar__11:11:int)]
(==astsimp.ml#7712==)
get_spec_var_type_list_infer@6@1
get_spec_var_type_list_infer inp1 :a
get_spec_var_type_list_infer@6 EXIT:a

!!! **sleekcore.ml#129:conseq: EBase emp&(a[i-1])<(a[i])&{FLOW,(4,5)=__norm#E}[]
!!! **sleekcore.ml#130:fvs(conseq):[a,i]
!!! **sleekcore.ml#131:itype:[@arrvar]
!!! **sleekcore.ml#132:isvl:[a]
(==trans_arr.ml#2159==)
can_be_simplify@8@7@1
can_be_simplify inp1 : i=3
can_be_simplify@8 EXIT:true

(====)
new_translate_out_array_in_one_formula@9@7@1
new_translate_out_array_in_one_formula inp1 : i=3
new_translate_out_array_in_one_formula@9 EXIT: i=3

(==cvutil.ml#1148==)
new_translate_out_array_in_one_formula_split@7@1
new_translate_out_array_in_one_formula_split inp1 : i=3
new_translate_out_array_in_one_formula_split@7 EXIT: i=3

(==tpdispatcher.ml#1550==)
simplify-syn@10@1
simplify-syn inp1 : i=3
simplify-syn@10 EXIT: v0=3

(==solver.ml#2851==)
simplify_pure_f_old@11@1
simplify_pure_f_old inp1 : emp&i=3&{FLOW,(4,5)=__norm#E}[]
simplify_pure_f_old@11 EXIT: emp&i=3&{FLOW,(4,5)=__norm#E}[]

!!! **sleekcore.ml#222:arrvar_flag:true
!!! **wrapper.ml#183:inside wrap_as_var
(==tpdispatcher.ml#1550==)
simplify-syn@12@1
simplify-syn inp1 : ((a[i-1])<(a[i]) | i!=3)
simplify-syn@12 EXIT: ((a[v0-1])<(a[v0]) | v0!=3)

(==trans_arr.ml#2043==)
can_be_simplify@14@13@1
can_be_simplify inp1 : i=3
can_be_simplify@14 EXIT:true

(==trans_arr.ml#2043==)
can_be_simplify@15@13@1
can_be_simplify inp1 : tarrvar1=i-1
can_be_simplify@15 EXIT:true

(==trans_arr.ml#2044==)
can_be_simplify@16@13@1
can_be_simplify inp1 : (a[tarrvar1])<(a[i])
can_be_simplify@16 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@17@13@1
can_be_simplify inp1 : tarrvar1=i-1
can_be_simplify@17 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@18@13@1
can_be_simplify inp1 : i=3
can_be_simplify@18 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@19@13@1
can_be_simplify inp1 : (a[tarrvar1])<(a[i])
can_be_simplify@19 EXIT:true

(==tpdispatcher.ml#2985==)
new_translate_out_array_in_imply_split@13@1
new_translate_out_array_in_imply_split inp1 : i=3 & tarrvar1=i-1
new_translate_out_array_in_imply_split inp2 : (a[tarrvar1])<(a[i])
new_translate_out_array_in_imply_split@13 EXIT:( i=3 & tarrvar1=i-1 & ((!(i=tarrvar1) | a___i___=a___tarrvar1___)), a___tarrvar1___<a___i___)

(==trans_arr.ml#2159==)
can_be_simplify@21@20@1
can_be_simplify inp1 : i=3
can_be_simplify@21 EXIT:true

(==trans_arr.ml#2159==)
can_be_simplify@22@20@1
can_be_simplify inp1 : (a[i-1])<(a[i])
can_be_simplify@22 EXIT:true

(====)
new_translate_out_array_in_one_formula@23@20@1
new_translate_out_array_in_one_formula inp1 : i=3 & (a[tarrvar2])<(a[i]) & tarrvar2=i-1
new_translate_out_array_in_one_formula@23 EXIT: i=3 & a___tarrvar2___<a___i___ & tarrvar2=i-1 & ((!(i=tarrvar2) | 
a___i___=a___tarrvar2___))

(==smtsolver.ml#1149==)
new_translate_out_array_in_one_formula_split@20@1
new_translate_out_array_in_one_formula_split inp1 : i=3 & (a[i-1])<(a[i])
new_translate_out_array_in_one_formula_split@20 EXIT: i=3 & a___tarrvar2___<a___i___ & tarrvar2=i-1 & ((!(i=tarrvar2) | 
a___i___=a___tarrvar2___))

(==tpdispatcher.ml#1550==)
simplify-syn@24@1
simplify-syn inp1 : i=3 & a___tarrvar2___<a___i___ & tarrvar2=i-1 & ((!(i=tarrvar2) | 
a___i___=a___tarrvar2___))
simplify-syn@24 EXIT: v0=3 & v1<v2 & v3=v0-1 & ((!(v0=v3) | v2=v1))

(==solver.ml#7403==)
simplify_htrue@25@1
simplify_htrue inp1 : emp
simplify_htrue@25 EXIT: emp

(==solver.ml#7493==)
infer_collect_hp_rel_empty_rhs#1@26@1
infer_collect_hp_rel_empty_rhs#1 inp1 : emp&i=3&{FLOW,(4,5)=__norm#E}[]
infer_collect_hp_rel_empty_rhs#1 inp2 : (a[i-1])<(a[i])
infer_collect_hp_rel_empty_rhs#1@26 EXIT:(false, es_formula: emp&i=3&{FLOW,(4,5)=__norm#E}[]
 es_infer_vars: [a])

(==cpure.ml#6320==)
b_form_simplify @30@29@28@27@1
b_form_simplify  inp1 : (a[i-1])<(a[i])
b_form_simplify @30 EXIT: (a[i-1])<(a[i])

(==mcpure.ml#2347==)
arith_simplify LHS@29@28@27@1
arith_simplify LHS inp1 : (a[i-1])<(a[i])
arith_simplify LHS@29 EXIT: (a[i-1])<(a[i])

(==solver.ml#8197==)
memo_arith_simplify@28@27@1
memo_arith_simplify inp1 : (a[i-1])<(a[i])
memo_arith_simplify@28 EXIT: (a[i-1])<(a[i])

(==tpdispatcher.ml#1550==)
simplify-syn@31@27@1
simplify-syn inp1 : ((a[i-1])<(a[i]) | i!=3)
simplify-syn@31 EXIT: ((a[v0-1])<(a[v0]) | v0!=3)

(==trans_arr.ml#2159==)
can_be_simplify@36@35@34@33@32@27@1
can_be_simplify inp1 : (a[i-1])<(a[i])
can_be_simplify@36 EXIT:true

(====)
new_translate_out_array_in_one_formula@37@35@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : (a[tarrvar3])<(a[i]) & tarrvar3=i-1
new_translate_out_array_in_one_formula@37 EXIT: a___tarrvar3___<a___i___ & tarrvar3=i-1 & ((!(i=tarrvar3) | 
a___i___=a___tarrvar3___))

(====)
new_translate_out_array_in_one_formula_split@35@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : (a[i-1])<(a[i])
new_translate_out_array_in_one_formula_split@35 EXIT: a___tarrvar3___<a___i___ & tarrvar3=i-1 & ((!(i=tarrvar3) | 
a___i___=a___tarrvar3___))

(==tpdispatcher.ml#1550==)
simplify-syn@38@34@33@32@27@1
simplify-syn inp1 : a___tarrvar3___<a___i___ & tarrvar3=i-1 & ((!(i=tarrvar3) | 
a___i___=a___tarrvar3___))
simplify-syn@38 EXIT: v0<v1 & v2=v3-1 & ((!(v3=v2) | v1=v0))

(==tpdispatcher.ml#1550==)
simplify-syn@39@34@33@32@27@1
simplify-syn inp1 : ((a[i-1])<(a[i]) | i!=3)
simplify-syn@39 EXIT: ((a[v0-1])<(a[v0]) | v0!=3)

(==trans_arr.ml#2159==)
can_be_simplify@41@40@34@33@32@27@1
can_be_simplify inp1 : i=3
can_be_simplify@41 EXIT:true

(==trans_arr.ml#2159==)
can_be_simplify@42@40@34@33@32@27@1
can_be_simplify inp1 : (a[i-1])<(a[i])
can_be_simplify@42 EXIT:true

(====)
new_translate_out_array_in_one_formula@43@40@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : i=3 & (a[tarrvar4])<(a[i]) & tarrvar4=i-1
new_translate_out_array_in_one_formula@43 EXIT: i=3 & a___tarrvar4___<a___i___ & tarrvar4=i-1 & ((!(i=tarrvar4) | 
a___i___=a___tarrvar4___))

(====)
new_translate_out_array_in_one_formula_split@40@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : i=3 & (a[i-1])<(a[i])
new_translate_out_array_in_one_formula_split@40 EXIT: i=3 & a___tarrvar4___<a___i___ & tarrvar4=i-1 & ((!(i=tarrvar4) | 
a___i___=a___tarrvar4___))

(==tpdispatcher.ml#1550==)
simplify-syn@44@34@33@32@27@1
simplify-syn inp1 : i=3 & a___tarrvar4___<a___i___ & tarrvar4=i-1 & ((!(i=tarrvar4) | 
a___i___=a___tarrvar4___))
simplify-syn@44 EXIT: v0=3 & v1<v2 & v3=v0-1 & ((!(v0=v3) | v2=v1))

(==trans_arr.ml#2159==)
can_be_simplify@49@48@47@46@45@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@49 EXIT:false

(====)
new_translate_out_array_in_one_formula@50@48@47@46@45@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : f___hole_0
new_translate_out_array_in_one_formula@50 EXIT: f___hole_0

(====)
new_translate_out_array_in_one_formula_split@48@47@46@45@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
new_translate_out_array_in_one_formula_split@48 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==omega.ml#1092==)
can_be_simplify@51@47@46@45@34@33@32@27@1
can_be_simplify inp1 : f___hole_1
can_be_simplify@51 EXIT:true

(====)
simplify##@47@46@45@34@33@32@27@1
simplify## inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify##@47 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(====)
TP.simplify@46@45@34@33@32@27@1
TP.simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
TP.simplify@46 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==infer.ml#1081==)
simplify_raw@45@34@33@32@27@1
simplify_raw inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify_raw@45 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==trans_arr.ml#2159==)
can_be_simplify@56@55@54@53@52@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@56 EXIT:false

(==trans_arr.ml#2159==)
can_be_simplify@57@55@54@53@52@34@33@32@27@1
can_be_simplify inp1 : i=3
can_be_simplify@57 EXIT:true

(====)
new_translate_out_array_in_one_formula@58@55@54@53@52@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : f___hole_2 & i=3
new_translate_out_array_in_one_formula@58 EXIT: f___hole_2 & i=3

(====)
new_translate_out_array_in_one_formula_split@55@54@53@52@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : forall(i:(i!=3 | (a[i-1])<(a[i]))) & i=3
new_translate_out_array_in_one_formula_split@55 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i]))) & i=3

(==omega.ml#1092==)
can_be_simplify@59@54@53@52@34@33@32@27@1
can_be_simplify inp1 : f___hole_3
can_be_simplify@59 EXIT:true

(==omega.ml#1092==)
can_be_simplify@60@54@53@52@34@33@32@27@1
can_be_simplify inp1 : i=3
can_be_simplify@60 EXIT:true

(====)
simplify##@54@53@52@34@33@32@27@1
simplify## inp1 : forall(i:(i!=3 | (a[i-1])<(a[i]))) & i=3
simplify##@54 EXIT: i=3 & forall(i:(i!=3 | (a[i-1])<(a[i])))

(====)
TP.simplify@53@52@34@33@32@27@1
TP.simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i]))) & i=3
TP.simplify@53 EXIT: i=3 & forall(i:(i!=3 | (a[i-1])<(a[i])))

(==infer.ml#1082==)
simplify_raw@52@34@33@32@27@1
simplify_raw inp1 : forall(i:(i!=3 | (a[i-1])<(a[i]))) & i=3
simplify_raw@52 EXIT: i=3 & forall(i:(i!=3 | (a[i-1])<(a[i])))

(==trans_arr.ml#2159==)
can_be_simplify@65@64@63@62@61@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@65 EXIT:false

(====)
new_translate_out_array_in_one_formula@66@64@63@62@61@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : f___hole_4
new_translate_out_array_in_one_formula@66 EXIT: f___hole_4

(====)
new_translate_out_array_in_one_formula_split@64@63@62@61@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
new_translate_out_array_in_one_formula_split@64 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==omega.ml#1092==)
can_be_simplify@67@63@62@61@34@33@32@27@1
can_be_simplify inp1 : f___hole_5
can_be_simplify@67 EXIT:true

(====)
simplify##@63@62@61@34@33@32@27@1
simplify## inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify##@63 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(====)
TP.simplify@62@61@34@33@32@27@1
TP.simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
TP.simplify@62 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==infer.ml#1096==)
simplify_raw@61@34@33@32@27@1
simplify_raw inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify_raw@61 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==trans_arr.ml#2159==)
can_be_simplify@72@71@70@69@68@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@72 EXIT:false

(====)
new_translate_out_array_in_one_formula@73@71@70@69@68@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : f___hole_6
new_translate_out_array_in_one_formula@73 EXIT: f___hole_6

(====)
new_translate_out_array_in_one_formula_split@71@70@69@68@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
new_translate_out_array_in_one_formula_split@71 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==omega.ml#1092==)
can_be_simplify@74@70@69@68@34@33@32@27@1
can_be_simplify inp1 : f___hole_7
can_be_simplify@74 EXIT:true

(====)
simplify##@70@69@68@34@33@32@27@1
simplify## inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify##@70 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(====)
TP.simplify@69@68@34@33@32@27@1
TP.simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
TP.simplify@69 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==infer.ml#1112==)
simplify_raw@68@34@33@32@27@1
simplify_raw inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify_raw@68 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==omega.ml#1092==)
can_be_simplify@75@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@75 EXIT:false

!!! **infer.ml#1123:new_p: before simplify: forall(i:(i!=3 | (a[i-1])<(a[i])))
(==trans_arr.ml#2159==)
can_be_simplify@81@80@79@78@77@76@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@81 EXIT:false

(====)
new_translate_out_array_in_one_formula@82@80@79@78@77@76@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : f___hole_9
new_translate_out_array_in_one_formula@82 EXIT: f___hole_9

(====)
new_translate_out_array_in_one_formula_split@80@79@78@77@76@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
new_translate_out_array_in_one_formula_split@80 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==omega.ml#1092==)
can_be_simplify@83@79@78@77@76@34@33@32@27@1
can_be_simplify inp1 : f___hole_10
can_be_simplify@83 EXIT:true

(====)
simplify##@79@78@77@76@34@33@32@27@1
simplify## inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify##@79 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(====)
TP.simplify@78@77@76@34@33@32@27@1
TP.simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
TP.simplify@78 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==infer.ml#600==)
simplify_raw@77@76@34@33@32@27@1
simplify_raw inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify_raw@77 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==trans_arr.ml#2159==)
can_be_simplify@85@84@76@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@85 EXIT:false

(====)
new_translate_out_array_in_one_formula@86@84@76@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : f___hole_11
new_translate_out_array_in_one_formula@86 EXIT: f___hole_11

(====)
new_translate_out_array_in_one_formula_split@84@76@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
new_translate_out_array_in_one_formula_split@84 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==tpdispatcher.ml#1550==)
simplify-syn@87@76@34@33@32@27@1
simplify-syn inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify-syn@87 EXIT: forall(v0:(v0!=3 | (a[v0-1])<(a[v0])))

(==trans_arr.ml#2159==)
can_be_simplify@92@91@90@89@88@76@34@33@32@27@1
can_be_simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
can_be_simplify@92 EXIT:false

(====)
new_translate_out_array_in_one_formula@93@91@90@89@88@76@34@33@32@27@1
new_translate_out_array_in_one_formula inp1 : f___hole_12
new_translate_out_array_in_one_formula@93 EXIT: f___hole_12

(====)
new_translate_out_array_in_one_formula_split@91@90@89@88@76@34@33@32@27@1
new_translate_out_array_in_one_formula_split inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
new_translate_out_array_in_one_formula_split@91 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==omega.ml#1092==)
can_be_simplify@94@90@89@88@76@34@33@32@27@1
can_be_simplify inp1 : f___hole_13
can_be_simplify@94 EXIT:true

(====)
simplify##@90@89@88@76@34@33@32@27@1
simplify## inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify##@90 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(====)
TP.simplify@89@88@76@34@33@32@27@1
TP.simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
TP.simplify@89 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==infer.ml#600==)
simplify_raw@88@76@34@33@32@27@1
simplify_raw inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify_raw@88 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(====)
i.simplify@76@34@33@32@27@1
i.simplify inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
i.simplify inp2 :[a]
i.simplify@76 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

!!! **infer.ml#1137:new_p: forall(i:(i!=3 | (a[i-1])<(a[i])))
!!! **infer.ml#1138:new_p_ass: forall(i:(i!=3 | (a[i-1])<(a[i])))
(====)
simplify_disj_new@95@34@33@32@27@1
simplify_disj_new inp1 : forall(i:(i!=3 | (a[i-1])<(a[i])))
simplify_disj_new@95 EXIT: forall(i:(i!=3 | (a[i-1])<(a[i])))

(==tpdispatcher.ml#1550==)
simplify-syn@96@34@33@32@27@1
simplify-syn inp1 : forall(i_17:(i_17!=3 | (a[i_17-1])<(a[i_17])))
simplify-syn@96 EXIT: forall(v0:(v0!=3 | (a[v0-1])<(a[v0])))

(==trans_arr.ml#2043==)
can_be_simplify@98@97@34@33@32@27@1
can_be_simplify inp1 : true
can_be_simplify@98 EXIT:true

(==trans_arr.ml#2043==)
can_be_simplify@99@97@34@33@32@27@1
can_be_simplify inp1 : tarrvar5=i_17-1
can_be_simplify@99 EXIT:true

(==trans_arr.ml#2044==)
can_be_simplify@100@97@34@33@32@27@1
can_be_simplify inp1 : forall(i_17:(i_17!=3 | (a[tarrvar5])<(a[3])))
can_be_simplify@100 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@101@97@34@33@32@27@1
can_be_simplify inp1 : tarrvar5=i_17-1
can_be_simplify@101 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@102@97@34@33@32@27@1
can_be_simplify inp1 : true
can_be_simplify@102 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@103@97@34@33@32@27@1
can_be_simplify inp1 : forall(i_17:(i_17!=3 | (a[tarrvar5])<(a[3])))
can_be_simplify@103 EXIT:true

(==tpdispatcher.ml#2985==)
new_translate_out_array_in_imply_split@97@34@33@32@27@1
new_translate_out_array_in_imply_split inp1 : true & tarrvar5=i_17-1
new_translate_out_array_in_imply_split inp2 : forall(i_17:(i_17!=3 | (a[tarrvar5])<(a[3])))
new_translate_out_array_in_imply_split@97 EXIT:( true & tarrvar5=i_17-1 & ((!(3=tarrvar5) | a___3___=a___tarrvar5___)), forall(i_17:(i_17!=3 | a___tarrvar5___<a___3___)))

(==infer.ml#1570==)
infer_pure_m_1@34@33@32@27@1
infer_pure_m_1 inp1 :estate :( emp&i=3&{FLOW,(4,5)=__norm#E}[]
  es_heap:emp
  es_infer_vars: [a],[a])
infer_pure_m_1 inp2 :lhs xpure : i=3
infer_pure_m_1 inp3 :lhs xpure0 : i=3
infer_pure_m_1 inp4 :rhs xpure : (a[i-1])<(a[i])
infer_pure_m_1 inp5 :inf vars :[a]
infer_pure_m_1@34 EXIT:(new es,inf pure,rel_ass) :(None,Some( forall(i:(i!=3 | (a[i-1])<(a[i])))),[])

(==infer.ml#1646==)
infer_pure_m_2#1@33@32@27@1
infer_pure_m_2#1 inp1 :estate :( es_formula: emp&i=3&{FLOW,(4,5)=__norm#E}[]
 es_infer_obj: [@arrvar]
 es_infer_vars: [a]
 es_infer_vars_rel: []
 es_final_error: None,[a])
infer_pure_m_2#1 inp2 :lhs xpure : i=3
infer_pure_m_2#1 inp3 :lhs xpure0 : i=3
infer_pure_m_2#1 inp4 :rhs xpure : (a[i-1])<(a[i])
infer_pure_m_2#1@33 EXIT:(new es,inf pure,rel_ass) :(None,Some( forall(i:(i!=3 | (a[i-1])<(a[i])))),[])

(====)
infer_pure_top_level@32@27@1
infer_pure_top_level inp1 : i=3
infer_pure_top_level@32 EXIT:[(None,Some( forall(i:(i!=3 | (a[i-1])<(a[i])))), i=3)]

(==tpdispatcher.ml#1550==)
simplify-syn@104@27@1
simplify-syn inp1 : ((a[i-1])<(a[i]) | !((i=3 & forall(i_18:(i_18!=3 | (a[i_18-
1])<(a[i_18]))))))
simplify-syn@104 EXIT: ((a[v0-1])<(a[v0]) | !((v0=3 & forall(v1:(v1!=3 | (a[v1-1])<(a[v1]))))))

(==trans_arr.ml#2043==)
can_be_simplify@106@105@27@1
can_be_simplify inp1 : i=3
can_be_simplify@106 EXIT:true

(==trans_arr.ml#2043==)
can_be_simplify@107@105@27@1
can_be_simplify inp1 : forall(i_18:(i_18!=3 | (a[tarrvar6])<(a[3])))
can_be_simplify@107 EXIT:true

(==trans_arr.ml#2043==)
can_be_simplify@108@105@27@1
can_be_simplify inp1 : tarrvar6=i_18-1
can_be_simplify@108 EXIT:true

(==trans_arr.ml#2043==)
can_be_simplify@109@105@27@1
can_be_simplify inp1 : tarrvar7=i-1
can_be_simplify@109 EXIT:true

(==trans_arr.ml#2044==)
can_be_simplify@110@105@27@1
can_be_simplify inp1 : (a[tarrvar7])<(a[i])
can_be_simplify@110 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@111@105@27@1
can_be_simplify inp1 : tarrvar7=i-1
can_be_simplify@111 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@112@105@27@1
can_be_simplify inp1 : tarrvar6=i_18-1
can_be_simplify@112 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@113@105@27@1
can_be_simplify inp1 : forall(i_18:(i_18!=3 | (a[tarrvar6])<(a[3])))
can_be_simplify@113 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@114@105@27@1
can_be_simplify inp1 : i=3
can_be_simplify@114 EXIT:true

(==trans_arr.ml#1602==)
can_be_simplify@115@105@27@1
can_be_simplify inp1 : (a[tarrvar7])<(a[i])
can_be_simplify@115 EXIT:true

(==tpdispatcher.ml#2985==)
new_translate_out_array_in_imply_split@105@27@1
new_translate_out_array_in_imply_split inp1 : i=3 & forall(i_18:(i_18!=3 | (a[tarrvar6])<(a[3]))) & tarrvar6=i_18-1 & 
tarrvar7=i-1
new_translate_out_array_in_imply_split inp2 : (a[tarrvar7])<(a[i])
new_translate_out_array_in_imply_split@105 EXIT:( i=3 & forall(i_18:(i_18!=3 | a___tarrvar6___<a___3___)) & tarrvar6=i_18-1 & 
tarrvar7=i-1 & ((!(i=tarrvar7) | a___i___=a___tarrvar7___)) & ((!(i=3) | 
a___i___=a___3___)) & ((!(i=tarrvar6) | a___i___=a___tarrvar6___)) & 
((!(tarrvar7=3) | a___tarrvar7___=a___3___)) & ((!(tarrvar7=tarrvar6) | 
a___tarrvar7___=a___tarrvar6___)) & ((!(3=tarrvar6) | 
a___3___=a___tarrvar6___)), a___tarrvar7___<a___i___)

(==solver.ml#8392==)
simplify_filter_ante@116@27@1
simplify_filter_ante inp1 : i=3
simplify_filter_ante inp2 : (a[i-1])<(a[i])
simplify_filter_ante@116 EXIT: i=3

(==trans_arr.ml#2159==)
can_be_simplify@118@117@27@1
can_be_simplify inp1 : (a[i-1])<(a[i])
can_be_simplify@118 EXIT:true

(====)
new_translate_out_array_in_one_formula@119@117@27@1
new_translate_out_array_in_one_formula inp1 : (a[tarrvar8])<(a[i]) & tarrvar8=i-1
new_translate_out_array_in_one_formula@119 EXIT: a___tarrvar8___<a___i___ & tarrvar8=i-1 & ((!(i=tarrvar8) | 
a___i___=a___tarrvar8___))

(==musterr.ml#90==)
new_translate_out_array_in_one_formula_split@117@27@1
new_translate_out_array_in_one_formula_split inp1 : (a[i-1])<(a[i])
new_translate_out_array_in_one_formula_split@117 EXIT: a___tarrvar8___<a___i___ & tarrvar8=i-1 & ((!(i=tarrvar8) | 
a___i___=a___tarrvar8___))

(==tpdispatcher.ml#1550==)
simplify-syn@120@27@1
simplify-syn inp1 : a___tarrvar8___<a___i___ & tarrvar8=i-1 & ((!(i=tarrvar8) | 
a___i___=a___tarrvar8___))
simplify-syn@120 EXIT: v0<v1 & v2=v3-1 & ((!(v3=v2) | v1=v0))

(==trans_arr.ml#2159==)
can_be_simplify@122@121@27@1
can_be_simplify inp1 : i=3
can_be_simplify@122 EXIT:true

(==trans_arr.ml#2159==)
can_be_simplify@123@121@27@1
can_be_simplify inp1 : (a[i-1])<(a[i])
can_be_simplify@123 EXIT:true

(====)
new_translate_out_array_in_one_formula@124@121@27@1
new_translate_out_array_in_one_formula inp1 : i=3 & (a[tarrvar9])<(a[i]) & tarrvar9=i-1
new_translate_out_array_in_one_formula@124 EXIT: i=3 & a___tarrvar9___<a___i___ & tarrvar9=i-1 & ((!(i=tarrvar9) | 
a___i___=a___tarrvar9___))

(==musterr.ml#90==)
new_translate_out_array_in_one_formula_split@121@27@1
new_translate_out_array_in_one_formula_split inp1 : i=3 & (a[i-1])<(a[i])
new_translate_out_array_in_one_formula_split@121 EXIT: i=3 & a___tarrvar9___<a___i___ & tarrvar9=i-1 & ((!(i=tarrvar9) | 
a___i___=a___tarrvar9___))

(==tpdispatcher.ml#1550==)
simplify-syn@125@27@1
simplify-syn inp1 : i=3 & a___tarrvar9___<a___i___ & tarrvar9=i-1 & ((!(i=tarrvar9) | 
a___i___=a___tarrvar9___))
simplify-syn@125 EXIT: v0=3 & v1<v2 & v3=v0-1 & ((!(v0=v3) | v2=v1))

(==trans_arr.ml#2159==)
can_be_simplify@127@126@27@1
can_be_simplify inp1 : i=3
can_be_simplify@127 EXIT:true

(==trans_arr.ml#2159==)
can_be_simplify@128@126@27@1
can_be_simplify inp1 : (a[i-1])>=(a[i])
can_be_simplify@128 EXIT:true

(====)
new_translate_out_array_in_one_formula@129@126@27@1
new_translate_out_array_in_one_formula inp1 : i=3 & (a[tarrvar10])>=(a[i]) & tarrvar10=i-1
new_translate_out_array_in_one_formula@129 EXIT: i=3 & a___tarrvar10___>=a___i___ & tarrvar10=i-1 & ((!(i=tarrvar10) | 
a___i___=a___tarrvar10___))

(==musterr.ml#90==)
new_translate_out_array_in_one_formula_split@126@27@1
new_translate_out_array_in_one_formula_split inp1 : i=3 & (a[i-1])>=(a[i])
new_translate_out_array_in_one_formula_split@126 EXIT: i=3 & a___tarrvar10___>=a___i___ & tarrvar10=i-1 & ((!(i=tarrvar10) | 
a___i___=a___tarrvar10___))

(==tpdispatcher.ml#1550==)
simplify-syn@130@27@1
simplify-syn inp1 : i=3 & a___tarrvar10___>=a___i___ & tarrvar10=i-1 & ((!(i=tarrvar10) | 
a___i___=a___tarrvar10___))
simplify-syn@130 EXIT: v0=3 & v1>=v2 & v3=v0-1 & ((!(v0=v3) | v2=v1))

(==tpdispatcher.ml#1603==)
simplify_filter_ante@131@27@1
simplify_filter_ante inp1 : i=3
simplify_filter_ante inp2 : (a[i-1])<(a[i])
simplify_filter_ante@131 EXIT: i=3

(==trans_arr.ml#2159==)
can_be_simplify@133@132@27@1
can_be_simplify inp1 : (a[i-1])<(a[i])
can_be_simplify@133 EXIT:true

(====)
new_translate_out_array_in_one_formula@134@132@27@1
new_translate_out_array_in_one_formula inp1 : (a[tarrvar11])<(a[i]) & tarrvar11=i-1
new_translate_out_array_in_one_formula@134 EXIT: a___tarrvar11___<a___i___ & tarrvar11=i-1 & ((!(i=tarrvar11) | 
a___i___=a___tarrvar11___))

(==musterr.ml#90==)
new_translate_out_array_in_one_formula_split@132@27@1
new_translate_out_array_in_one_formula_split inp1 : (a[i-1])<(a[i])
new_translate_out_array_in_one_formula_split@132 EXIT: a___tarrvar11___<a___i___ & tarrvar11=i-1 & ((!(i=tarrvar11) | 
a___i___=a___tarrvar11___))

(==tpdispatcher.ml#1550==)
simplify-syn@135@27@1
simplify-syn inp1 : a___tarrvar11___<a___i___ & tarrvar11=i-1 & ((!(i=tarrvar11) | 
a___i___=a___tarrvar11___))
simplify-syn@135 EXIT: v0<v1 & v2=v3-1 & ((!(v3=v2) | v1=v0))

(==trans_arr.ml#2159==)
can_be_simplify@137@136@27@1
can_be_simplify inp1 : i=3
can_be_simplify@137 EXIT:true

(==trans_arr.ml#2159==)
can_be_simplify@138@136@27@1
can_be_simplify inp1 : (a[i-1])<(a[i])
can_be_simplify@138 EXIT:true

(====)
new_translate_out_array_in_one_formula@139@136@27@1
new_translate_out_array_in_one_formula inp1 : i=3 & (a[tarrvar12])<(a[i]) & tarrvar12=i-1
new_translate_out_array_in_one_formula@139 EXIT: i=3 & a___tarrvar12___<a___i___ & tarrvar12=i-1 & ((!(i=tarrvar12) | 
a___i___=a___tarrvar12___))

(==musterr.ml#90==)
new_translate_out_array_in_one_formula_split@136@27@1
new_translate_out_array_in_one_formula_split inp1 : i=3 & (a[i-1])<(a[i])
new_translate_out_array_in_one_formula_split@136 EXIT: i=3 & a___tarrvar12___<a___i___ & tarrvar12=i-1 & ((!(i=tarrvar12) | 
a___i___=a___tarrvar12___))

(==tpdispatcher.ml#1550==)
simplify-syn@140@27@1
simplify-syn inp1 : i=3 & a___tarrvar12___<a___i___ & tarrvar12=i-1 & ((!(i=tarrvar12) | 
a___i___=a___tarrvar12___))
simplify-syn@140 EXIT: v0=3 & v1<v2 & v3=v0-1 & ((!(v0=v3) | v2=v1))

(==trans_arr.ml#2159==)
can_be_simplify@142@141@27@1
can_be_simplify inp1 : i=3
can_be_simplify@142 EXIT:true

(==trans_arr.ml#2159==)
can_be_simplify@143@141@27@1
can_be_simplify inp1 : (a[i-1])>=(a[i])
can_be_simplify@143 EXIT:true

(====)
new_translate_out_array_in_one_formula@144@141@27@1
new_translate_out_array_in_one_formula inp1 : i=3 & (a[tarrvar13])>=(a[i]) & tarrvar13=i-1
new_translate_out_array_in_one_formula@144 EXIT: i=3 & a___tarrvar13___>=a___i___ & tarrvar13=i-1 & ((!(i=tarrvar13) | 
a___i___=a___tarrvar13___))

(==musterr.ml#90==)
new_translate_out_array_in_one_formula_split@141@27@1
new_translate_out_array_in_one_formula_split inp1 : i=3 & (a[i-1])>=(a[i])
new_translate_out_array_in_one_formula_split@141 EXIT: i=3 & a___tarrvar13___>=a___i___ & tarrvar13=i-1 & ((!(i=tarrvar13) | 
a___i___=a___tarrvar13___))

(==tpdispatcher.ml#1550==)
simplify-syn@145@27@1
simplify-syn inp1 : i=3 & a___tarrvar13___>=a___i___ & tarrvar13=i-1 & ((!(i=tarrvar13) | 
a___i___=a___tarrvar13___))
simplify-syn@145 EXIT: v0=3 & v1>=v2 & v3=v0-1 & ((!(v0=v3) | v2=v1))

(==solver.ml#7518==)
heap_entail_empty_rhs_heap#1@27@1
heap_entail_empty_rhs_heap#1 inp1 : es_formula: emp&i=3&{FLOW,(4,5)=__norm#E}[]
 es_infer_obj: [@arrvar]
 es_infer_vars: [a]
 es_infer_vars_rel: []
 es_final_error: None
heap_entail_empty_rhs_heap#1 inp2 : emp&i=3&{FLOW,(4,5)=__norm#E}[]
heap_entail_empty_rhs_heap#1 inp3 : (a[i-1])<(a[i])
heap_entail_empty_rhs_heap#1 inp4 :false
heap_entail_empty_rhs_heap#1@27 EXIT: 
MaybeErr Context: 
                   fe_kind: MAY
                   fe_name: logical bug
                   fe_locs: {
                             fc_message:  i=3 |-  (a[i-1])<(a[i]). LOCS:[1] (may-bug)
                             fc_current_lhs_flow: {FLOW,(4,5)=__norm#E}}
[[empty]]
CEX:false


(==sleekengine.ml#1178==)
run_infer_one_pass@1
run_infer_one_pass inp1 :[a]
run_infer_one_pass inp2 :IFORM:(emp) * ([] & i = 3)( FLOW __norm)
run_infer_one_pass inp3 :IFORMStruc:EBase: [][](emp) * ([] & (a[i]) > (a[i-1]))( FLOW __norm) 
run_infer_one_pass@1 EXIT:((false, 
MaybeErr Context: 
                   fe_kind: MAY
                   fe_name: logical bug
                   fe_locs: {
                             fc_message:  i=3 |-  (a[i-1])<(a[i]). LOCS:[1] (may-bug)
                             fc_current_lhs_flow: {FLOW,(4,5)=__norm#E}}
[[empty]]
CEX:false
,[]),?)

Entail (1) : Fail.(may) cause: i=3 |-  (a[i-1])<(a[i]). LOCS:[1] (may-bug)

Residue:
 
MaybeErr Context: 
                   fe_kind: MAY
                   fe_name: logical bug
                   fe_locs: {
                             fc_message:  i=3 |-  (a[i-1])<(a[i]). LOCS:[1] (may-bug)
                             fc_current_lhs_flow: {FLOW,(4,5)=__norm#E}}
[[empty]]
CEX:false

Stop z3... 8 invocations Stop Omega... 7 invocations 
SAT Count   : 11
SAT % Hit   : 54.54%
IMPLY Count : 5
IMPLY % Hit : 40.%
Time(cache overhead) : 0.012001 (seconds)

!!! log(small):(0.099035,30)
Total verification time: 0.152009 second(s)
	Time spent in main process: 0.128008 second(s)
	Time spent in child processes: 0.024001 second(s)

