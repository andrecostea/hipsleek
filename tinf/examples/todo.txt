# mutual-5b.ss

How come more spec is producing a worse result
than requires true ensures true?

# case {
    x <= 0 -> requires Term ensures true;
    x > 0 -> requires Loop ensures true;
  }

Termination Inference Result:
g:  case {
  1<=x -> requires emp & MayLoop[]
 ensures emp & true; 
  x<=0 -> requires emp & Term[30,2]
 ensures emp & true; 
  }
f:  case {
  x<=0 -> requires emp & Term[30]
 ensures emp & true; 
  0<x -> requires emp & Loop[]
 ensures emp & true; 
  }
===================================================
# rec-f91a.ss

Poor result without post. Should the MayLoop conditions be
combined if they have the same post?

Termination Inference Result:
f91:  case {
  n<=90 & n<=89 & n<=0 & n<=(0-1) & n<=(0-2) & n<=(0-
  3) -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & n<=0 & n<=(0-1) & n<=(0-2) & 0<=(2+
  n) -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & n<=0 & n<=(0-1) & 0<=(1+
  n) -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & n<=0 & 
  0<=n -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & 1<=n -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & 90<=n -> requires emp & MayLoop[]
 ensures emp & true; 
  91<=n -> requires emp & Term[29,1]
 ensures emp & true; 
===================================================
# rec-f91b1.ss

# rec-f91b?.ss 
 (1) requires tidying up cases ..
 (2) check why others can handle f91? Are they hard-wired?

case {
  n>=91 -> requires true ensures res=n;
  n<91 -> requires true ensures res=91;
}

Post-cond seems to critical to support @term
How come others can also handle it.
Is it because they have  infer_post?
Can we change the example to f92 instead?

f91:  case {
  91<=n -> requires emp & Term[29,1]
 ensures emp & res=n; 
  n<91 -> requires emp & Term[29,3,90+(-1*n)]
 ensures emp & res=91; 
  }

# rec-f91b2.ss

 case {
  n>91 -> requires true ensures res=n;
  n<=91 -> requires true ensures res=91;
 }

Seems correct but maybe can combine
the base-case conditions if the post is the same.
This would then give us the same result as that
from rec-f91b1.ss:

case {
  n>=91 -> requires true ensures res=n;
  n<91 -> requires true ensures res=91;
}

Termination Inference Result:
f91:  case {
  91<n -> requires emp & Term[29,1]
 ensures emp & res=n; 
  n<=91 & n<=90 -> requires emp & Term[29,4,90+(-1*n)]
 ensures emp & res=91; 
  n<=91 & n=91 -> requires emp & Term[29,2]
 ensures emp & res=91; 
  }

# rec-f91b3.ss

Poor result without post. Should the MayLoop conditions be
combined if they have the same post?

Termination Inference Result:
f91:  case {
  n<=90 & n<=89 & n<=0 & n<=(0-1) & n<=(0-2) & n<=(0-
  3) -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & n<=0 & n<=(0-1) & n<=(0-2) & 0<=(2+
  n) -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & n<=0 & n<=(0-1) & 0<=(1+
  n) -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & n<=0 & 
  0<=n -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & n<=89 & 1<=n -> requires emp & MayLoop[]
 ensures emp & true; 
  n<=90 & 90<=n -> requires emp & MayLoop[]
 ensures emp & true; 
  91<=n -> requires emp & Term[29,1]
 ensures emp & true; 
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
