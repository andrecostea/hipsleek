# termu-1c.ss

Why isn't @term entailment logged?

id: 1; caller: []; line: 10; classic: false; kind: POST; hec_num: 2; evars: []; infer_vars: []; c_heap: emp
============================================================

============================================================
# termu-1c3.ss

!!!Number of sleek log entries 7
!!!Logging logs/sleek_log_termu-1c3_ss.txt

Why only 1 logged entry printed?
============================================================
# termu-1c4.ss

why are there 4 termination assumptions?

I was expecting just 3:

infer [@term] x>=0 & fpre(x) & x'=x-1 |- fpre(x').

infer [@term] x>=0 & fpre(x) & x'=x-1 & fpost(x') |- fpost(x).

infer [@term] x<0 & Term[] |- fpost(x).
============================================================
# termu-1c4.ss

UTPre@f fpre(int x).
UTPost@f fpost(int x).

Perhaps fpost need not carry any parameter; as
the purpose is to capture base versus recursive cases.
I guess it is sufficient to declare:

UTPost@f fpost().

checkentail Term[] |- fpost@f().
// ok

checkentail Loop |- fpost@f().
// should check for false leh..

========================================================
infer [@term] x<0 & Term[] |- fpost().
print residue.
/*
# exp-u-1c4a.slk // 2

 inferred UTPost rel: [emp&x<0&
                        {FLOW,(21,22)=__norm}[]: [] -> TermR@f{0, true}()]
should use:
  x<0 & Term[] -> TermR@f{..}

*/

infer [] x<0 & Loop |- fpost().
print residue.
/*
# exp-u-1c4a.slk // 3

Got below but should fail!

Entail (3) : Valid. 
 <1>emp&Loop[] & x<0&{FLOW,(21,22)=__norm}[]
[[empty]]
*/

infer [@term] x<0 & Loop |- fpost().
print residue.
/*
# exp-u-1c4a.slk // 4

Got below but should attempt to infer false on conseq

 <1>emp&Loop[] & x<0&{FLOW,(21,22)=__norm}[]
 inferred UTPost rel: [emp&x<0&
                        {FLOW,(21,22)=__norm}[]: [] -> TermR@f{0, true}()]


========================================================
============================================================
============================================================
============================================================
============================================================
========================================================
============================================================
============================================================
============================================================
============================================================
========================================================
============================================================
============================================================
============================================================
============================================================
========================================================
