/*
# ack.ss

Why is below going into an infinite loop?
Can we print some intermediate results?
Can we have some upper bound cut-off?

infer [@term]
 requires true
 ensures true;

Base/Rec Case Splitting:
[	Ack: [[4] m=0@B,[5] 1<=n & 1<=m@R,[6] n<=(0-1) & 1<=m@R,[7] m<=(0-1) & 1<=n@R,[8] n<=(0-1) & m<=(0-1)@R,[9] n=0 & 1<=m@R,[10] n=0 & m<=(0-1)@R]
]
====================================================================
# ack3b.ss

 infer [@term]
 case {
  m<0 -> requires Loop ensures false;
  m>=0 -> 
   case {
    n<0 -> requires MayLoop ensures true;
    n>=0 -> requires true ensures res>=0;
   }
  }

Q : Can we not combine requires false ensures false?


Base/Rec Case Splitting:
[	Ack: [[7] m=0 & 0<=n@B,[8] m=0 & n<=(0-1)@B,[9] 1<=n & 1<=m@R,[10] n=0 & 1<=m@R,[11] n<=(0-1) & 1<=m@R]
]
Termination Inference Result:
Ack:  case {
  m<=(0-1) -> requires emp & Loop[]
              ensures false & false; 
  0<=m -> case {
           n<0 -> case {
                   // why did we not combine require false ensures false?
                   m=0 & 0<=n -> 
                     requires false & false
                     ensures false & false; 
                   1<=n &  1<=m -> 
                     requires false & false
                     ensures false & false; 
                   n=0 & 1<=m -> 
                     requires false & false
                     ensures false & false; 
                   m=0 & n<=(0-1) -> 
                     requires emp & Term[3,2]
                     ensures emp & true; 
                   n<=(0-1) & 1<=m -> 
                     requires emp & Loop[]
                     ensures false & false; 
                   }
           
           0<=n -> case {
                 //can we combine the  cases?
                    m=0 & 0<=n -> 
                      requires emp & Term[3,1]
                      ensures emp & 0<=res; 
                    1<=n & 1<=m -> 
                     requires emp & Term[3,3,0+(1*m)+(0*n),0+(1*m)+(1*n)]
                     ensures emp & 0<=res; 
                    n=0 & 1<=m -> 
                     requires emp & Term[3,3,0+(1*m)+(0*n),0+(1*m)+(1*n)]
                     ensures emp & 0<=res; 
                    m=0 & n<=(0-1) -> 
                      requires false & false
                      ensures false & false; 
                    n<=(0-1) &  1<=m -> 
                      requires false & false
                      ensures false & false; 
                    }
           
           }

====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
