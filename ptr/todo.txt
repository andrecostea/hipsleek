- add data inv
- add baga-arr
- improve xpure
- add arr-seg lemmas
===========================================================
# ex7c.slk

checkentail
  self::arr_int<_,q1>*q1::arr_seg<p,n-1> //& q1=self+1 
     & a>0 & n=a+b & b>=0 
  |- (exists q: self::arr_seg<q,a>*q::arr_seg<p,b>)
.

# Why is there a base-case-unfold failure?

Entail 3: Fail.(may) cause:base case unfold failed

===========================================================
# ex7c1.slk

# why isn't process_action and folding traced tgt?

# how come we have funny matches .. like q1,self?
  can we filter them out based on LHS and RHS?

# can we print method header to determine calling sequence?

(==solver.ml#10756==)
compute_actions@1
compute_actions inp1 :EQ ptr:[(a_135,a)]
compute_actions inp2 :LHS heap: self::arr_int<Anon_14,q1>@M * q1::arr_seg<p,flted_22_114>@M
compute_actions inp3 :LHS pure: 0<=b & n=b+a & 0<a & flted_22_114+1=n
compute_actions inp4 :RHS cand:[ self::arr_seg<q,a_135>@M]
compute_actions inp5 :RHS pure: a_135=a
compute_actions inp6 :right alias:[a_135,q]
compute_actions@1 EXIT: SEARCH =>[
  Prio:1
  COND =>[
   Prio:1
   Fold =>
     LHS: self::arr_int<Anon_14,q1>@M
     RHS: self::arr_seg<q,a_135>@M;
   Prio:1
   SEARCH =>[
    Prio:1
    (Lemma ==> lem_12_left) =>
      LHS: q1::arr_seg<p,flted_22_114>@M
      RHS: self::arr_seg<q,a_135>@M;
    Prio:4
    BaseCaseUnfold =>
      LHS: q1::arr_seg<p,flted_22_114>@M
      RHS: self::arr_seg<q,a_135>@M
    ]
    ]
   ]
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
