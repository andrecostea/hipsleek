1 int max( i n t x, i n t y)
2  where { @x = @return, @y = @return } {
3  if (x = y) 
        {x = y;}
4  return x;
5 }

Can S(x) <: S(res) be captured as x <s: res.
This may be OK if x is related as x::<value,security>

requires true
ensures  x <s: res /\  y <s: res

 if F(x,y,z) then
  // Context' = Context + {x,y,z}
  v = ...
  // {x,y,z} <: v & Context<:v & State = State+{v'}
 else ..
 // Context'=Context

if F(v) then
   // Context'=Context+{v'}
   w = ..
   // Context'=Context+{v'} & v <: w & Context<:w & State = State+{w'}

// Context'=Context

method(...,Context, ref State)

if F(x) {
  //Context'=Context+{x}
  print(1);
  // L<:L & Context+{x}<:L
  // Context<:L & x<:L

}

print(v)
 requires true
 ensures  v<:L & Context<:L;



foo(int v} 
  requires true
  ensures  exists(v': L<:v' & Context<:v' & State'=State+{v'};
  ensures  exists(v':  Context<:v' & & State'=State+{v'})
  ensures  true ;
{
  // Context'=Context
  v = 5
  // print(v) # how to model? 
  // L<:v' & Context<:v' & State = State+{v'}
}

foo(ref int v} 
  requires true
  ensures  Context<:v' & State' = State+{v'};
{
  // Context'=Context
  v = 5
  // L<:v' & Context<:v' & State = State+{v'}
}

foo(ref Log v} 
  requires true
  ensures  Context<:L & State' = State+{L};
  ensures  Context<:L & State' = State+{L};
{
  // Context'=Context
  v.low = 5
  // L<:L & Context<:L & State = State+{L}
}


S(constant) = L


6 class Log { String buffer[LOW]; ... }
7 int maxWithMessage(Log log, i n t x, i n t y)
8   where { @x = @return
9   , @y = @return
10   , @log = LOW
11   } and { LOW }
   {
12 if (x = y) { x = y; }
13 log.buffer = "max was called";
14 return x;
15 }

requires
ensures   x<:res & y<:res & qstate'=qstate+{L};


context = {....}
