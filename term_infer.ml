open Cpure
open Cformula
open Gen.Basic
open Globals
open Cast

module CP = Cpure

type term_type =
	| Base
	| Rec of ident (* Name of recursive callee *)

type term_res =
	| Loop
	| Term
	| Unknown of string

type term_ctx = {
	t_type 				: term_type;
	(* Original Context associating with base cases or recursive cases *)
	t_ctx 				: list_failesc_context;	
	t_pure_ctx		: CP.formula list;
	(* Args list and Params list *)
	t_params			: (spec_var list * spec_var list); 
	(* Pure condition of function parameters for base cases or recursive cases *)
	(* Generated by simplifying t_ctx via exist elimination                    *)
	t_cond_pure 	: (CP.formula * term_res) list; 
}

type list_term_ctx = term_ctx list

type term_case_spec = ((CP.formula list) * term_res) list

type term_trans_constraint = (term_res * term_res)

let term_spec_tbl : (ident, term_case_spec) Hashtbl.t = Hashtbl.create 10

let term_ctx_tbl : (ident, list_term_ctx) Hashtbl.t = Hashtbl.create 10

(* Cprinter Utilities *)
let print_path_trace = ref (fun (c: path_trace) -> "Printer has not been initialized.")
let print_pure_formula = ref (fun (c: CP.formula) -> "Printer has not been initialized.")
let print_term_case_spec = ref (fun (c: term_case_spec) -> "Printer has not been initialized.")
let print_term_ctx = ref (fun (c: term_ctx) -> "Printer has not been initialized.")
let print_term_trans_constraint = ref (fun (c: term_trans_constraint) -> "Printer has not been initialized.")

let partition_term_ctx tctx = 
	List.partition (fun ctx -> match ctx.t_type with
	| Base -> true | _ -> false) tctx
	
let collect_path_trace_term_ctx tctx =
	collect_path_trace_list_failesc_context tctx.t_ctx 

(* If the path trace of a base context is a SUPERSET of *)
(* the path trace of a recursive context, then the      *)
(* recursive call is met BEFORE the return statement    *)
(* so that these labels are not allowed in base context *)
let remove_incorrect_base_term_ctx tctx list_lbl =
	(* let _ = print_string ("rc_lbl: " ^ (pr_list !print_path_trace list_lbl)) in *)
	{ tctx with t_ctx = match tctx.t_type with
	| Base -> List.map (fun (fail_c, esc_c, succ_c) ->
			let succ_c = List.filter (fun (lbl, _) -> 
				not (List.exists (fun l -> Gen.BList.subset_eq (=) l lbl) list_lbl)) succ_c in
			(fail_c, esc_c, succ_c)) tctx.t_ctx
	| Rec _ -> tctx.t_ctx}
	
let remove_incorrect_base_list_term_ctx tctx =
	let bs, rc = partition_term_ctx tctx in
	let list_rec_lbl = List.concat (List.map collect_path_trace_term_ctx rc) in
	List.map (fun ctx -> remove_incorrect_base_term_ctx ctx list_rec_lbl) tctx
	
let remove_unsat_ctx_list_term_ctx tctx =
	List.map (fun ctx -> 
		{ctx with t_ctx = remove_unsat_succ_ctx_list_failesc_context ctx.t_ctx}) tctx
	
let remove_empty_ctx_list_term_ctx tctx = 
	let tctx = List.map (fun ctx -> 
		{ctx with t_ctx = remove_empty_succ_ctx_list_failesc_context ctx.t_ctx}) tctx in
	List.filter (fun ctx -> not (ctx.t_ctx = [])) tctx

(* Get the pure condition from context *)
(* and assign Term or Unknown for Base *)
(* and Rec, resp.                      *)
let update_cond_pure_term_ctx	tctx =
	let lf = collect_formula_list_failesc_context tctx.t_ctx in
	let lpf = List.concat (List.map pure_of_formula lf) in
	(* let _ = print_endline (pr_list !print_pure_formula lpf) in *)
	{tctx with 
		t_pure_ctx = lpf;
		t_cond_pure = List.map (fun f ->
			match tctx.t_type with
			| Base -> (f, Term)
			| Rec _ -> (f, Unknown "")) lpf;}
	
let update_cond_pure_list_term_ctx tctx = 
	List.map update_cond_pure_term_ctx tctx

(* Simplify the termination context to get *)
(* the conditions on method's arguments    *)
let simplify_t_cond_pure args (f, t_res) =
	let qsv = diff_svl (CP.fv f) args in
	(* a!=b has already been transformed to a<b | a>b by Omega *)
	let simpl_f = mkExists_with_simpl Omega.simplify qsv f None no_pos in
	List.map (fun f -> (f, match t_res with
	| Unknown "" -> Unknown (string_of_int (fresh_int ()))
	| _ -> t_res)) (CP.list_of_disjs simpl_f)
		
let simplify_cond_pure_term_ctx args tctx =
	{tctx with t_cond_pure = List.concat (List.map (simplify_t_cond_pure args) tctx.t_cond_pure);}
	
let simplify_cond_pure_list_term_ctx proc tctx =
	let farg_types, farg_names = List.split proc.proc_args in	
	let farg_spec_vars = List.map2 (fun n t -> CP.SpecVar (t, n, Unprimed)) farg_names farg_types in 	
	List.map (simplify_cond_pure_term_ctx farg_spec_vars) tctx
	
(* Construct case spec of termination from termination context *)
let case_spec_of_term_ctx tctx =
	List.map (fun (f, t_res) -> ([f], t_res)) tctx.t_cond_pure

(* TODO: Do we need to check case coverage? *)		
let term_case_spec_of_list_term_ctx tctx =
	List.concat (List.map case_spec_of_term_ctx tctx) 
	
(* Look up termination context and spec *)
let look_up_term_ctx mn =
	Hashtbl.find term_ctx_tbl mn
	
let look_up_term_spec mn =
	Hashtbl.find term_spec_tbl mn
	
let rename_term_spec (fsv, tsv) tspec = 
	List.map (fun (cond, tres) -> 
		(List.map (CP.subst_avoid_capture fsv tsv) cond, tres)) tspec

(* Collect set of termination transition constraints *)
(* based on the termination context of a function   *)
let collect_term_trans_constraints_one_case is_sat (cond, unk) (mn, ctx) =
	let mn_tspec = look_up_term_spec mn in
	let callee_tspec = rename_term_spec ctx.t_params mn_tspec in
	let _ = print_endline (!print_term_case_spec callee_tspec) in
	List.fold_left (fun a (c_cond, c_tres) ->
		(* if [cond] /\ [ctx] /\ [c_cond] is SAT then unk >> c_tres *)
		let trans_ctx = join_conjunctions (cond @ ctx.t_pure_ctx @ c_cond) in
		let _ = print_endline ("\nTRANS_CTX: " ^ (!print_pure_formula trans_ctx) ^ "\n") in
		if (is_sat trans_ctx) then a @ [(unk, c_tres)] else a) [] callee_tspec

let collect_term_trans_constraints_one_method is_sat mn = 
	let mn_tctx = look_up_term_ctx mn in
	let mn_tspec = look_up_term_spec mn in
	let unk_cases = List.filter (fun (cond, r) ->
		match r with | Unknown _ -> true | _ -> false) mn_tspec in
	(* (name_of_callee, term_ctx) *)
	let rec_ctx = List.fold_left (fun a ctx -> 
		match ctx.t_type with
		| Base -> a
		| Rec c -> a @ [(c, ctx)]) [] mn_tctx in
	List.concat (List.map (fun c -> 
		List.concat (List.map (collect_term_trans_constraints_one_case is_sat c) rec_ctx)) unk_cases)
	
let main is_sat procs =
	List.iter (fun proc ->
		let mn = proc.proc_name in
		let _ = print_endline ("Termination Inference for " ^ mn) in
		let t_ctx = look_up_term_ctx mn in
		let t_case_spec = look_up_term_spec mn in 
		let t_constraints = collect_term_trans_constraints_one_method is_sat mn in
		print_endline (pr_list !print_term_trans_constraint t_constraints)
		(* print_endline (pr_list (fun ctx ->                                *)
		(* 	"\n=============\n" ^ (!print_term_ctx ctx)) t_ctx); *)
		(* print_endline (!print_term_case_spec t_case_spec)     *)
	) procs



