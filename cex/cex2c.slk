pred_prim state<x:list(int)>
  inv true.

pred_prim add<n:int>
  inv true.

pred_prim state1<x:list(string)>
  inv true.


// lemma_prop "lemma_prop_list" ss::state<L1> * ss::add<n> & true
//    -> ss::state<L2> & L2 = append(L1,[n]).

lemma_prop "lemma_prop_list" self::state<L1> * self::add<n> & true
    -> self::state<L2> & L2 = append(L1,[n]).

// checkentail cx::state<[2,3]> |- true.

checkentail dx::state1<[#main]> |- true.

// // expect Valid.
// checkentail cx::state<[#main,#if_1,#inf_loop]> |- cx::state<[#main,#if_1,#inf_loop]>.
// // OK
// print residue.


// checkentail cx::state<[-1,-2,-3]> |- cx::state<[-1,-2,3]>.
// // OK
// print residue.

// checkentail cx::state<[1,2,3]> |- cx::state<[1,2,3]>.
// // OK
// print residue.
