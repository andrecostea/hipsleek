# 1 "lexer.mll"
 
open Globals

open Token
(** A signature for specialized tokens. *)
module Sig = Camlp4.Sig

module Make (Token : SleekTokenS) 
= struct
  module Loc = Token.Loc
  module Token = Token

  open Lexing
  

  (* Error report *)
  module Error = struct

    type t =
      | Illegal_character of char
      | Illegal_escape    of string
      | Unterminated_comment
      | Unterminated_string
      | Unterminated_java
      | Comment_start
      | Comment_not_end
      | Literal_overflow of string

    exception E of t

    open Format

    let print ppf =
      function
      | Illegal_character c -> fprintf ppf "Illegal character (%s)" (Char.escaped c)
      | Illegal_escape s -> fprintf ppf "Illegal backslash escape in string or character (%s)" s
      | Unterminated_comment -> fprintf ppf "Comment not terminated"
      | Unterminated_string -> fprintf ppf "String literal not terminated"
      | Unterminated_java -> fprintf ppf "java code not terminated"
      | Literal_overflow ty -> fprintf ppf "Integer literal exceeds the range of representable integers of type %s" ty
      | Comment_start -> fprintf ppf "this is the start of a comment"
      | Comment_not_end -> fprintf ppf "this is not the end of a comment"

    let to_string x =
      let b = Buffer.create 50 in
      let () = bprintf b "%a" print x in Buffer.contents b
  end;;

  let module M = Camlp4.ErrorHandler.Register(Error) in ()

  open Error

  type context =
  { loc        : Loc.t    ;
    in_comment : bool     ;
    lexbuf     : lexbuf   ;
    buffer     : Buffer.t }

  let default_context lb =
  { loc        = Loc.ghost ;
    in_comment = false     ;
    lexbuf     = lb        ;
    buffer     = Buffer.create 256 }

  (* To buffer string literals *)

  let store c = Buffer.add_string c.buffer (Lexing.lexeme c.lexbuf)
  let istore_char c i = Buffer.add_char c.buffer (Lexing.lexeme_char c.lexbuf i)
  let buff_contents c =
    let contents = Buffer.contents c.buffer in
    Buffer.reset c.buffer; contents

  let loc c = Loc.merge c.loc (Loc.of_lexbuf c.lexbuf)
  let is_in_comment c = c.in_comment
  let in_comment c = { (c) with in_comment = true }
  let set_start_p c = c.lexbuf.lex_start_p <- Loc.start_pos c.loc
  let move_start_p shift c =
    let p = c.lexbuf.lex_start_p in
    c.lexbuf.lex_start_p <- { (p) with pos_cnum = p.pos_cnum + shift }

  let update_loc c = { (c) with loc = Loc.of_lexbuf c.lexbuf }
  let with_curr_loc f c = f (update_loc c) c.lexbuf
  let parse_nested f c =   with_curr_loc f c;   set_start_p c;    buff_contents c
  let shift n c = { (c) with loc = Loc.move `both n c.loc }
  let store_parse f c = store c ; f c c.lexbuf
  let parse f c = f c c.lexbuf
  
  (* Update the current location with file name and line number. *)

  let update_loc c file line absolute chars =
    let lexbuf = c.lexbuf in
    let pos = lexbuf.lex_curr_p in
    let new_file = match file with
                  | None -> pos.pos_fname
                  | Some s -> s  in
    lexbuf.lex_curr_p <- { pos with
      pos_fname = new_file;
      pos_lnum = if absolute then line else pos.pos_lnum + line;
      pos_bol = pos.pos_cnum - chars;
    }

  let err error loc = raise(Loc.Exc_located(loc, Error.E error))

  let warn error loc = Format.eprintf "Warning: %a: %a@." Loc.print loc Error.print error

 let sleek_keywords = Hashtbl.create 100
 let comment_level = ref 0
 let _ = List.map (fun ((k,t):(string*sleek_token)) -> Hashtbl.add sleek_keywords k t)
	[("assert", ASSERT);
	 ("assume", ASSUME);
   ("alln", ALLN);
   ("app", APPEND);
   ("bagmax", BAGMAX);
	 ("bagmin", BAGMIN);
	 ("bind", BIND);
	 ("bool", BOOL);
	 ("break", BREAK);
	 ("case",CASE);
   ("catch", CATCH);
	 ("checkentail", CHECKENTAIL);
	 ("capture_residue", CAPTURERESIDUE);
	 ("class", CLASS);
	 ("coercion", COERCION);
	 ("compose", COMPOSE);
   ("combine", COMBINE);
	 ("const", CONST);
	 ("continue", CONTINUE);
	 ("data", DATA);
	 ("debug", DDEBUG);
	 ("diff", DIFF);
	 ("dynamic", DYNAMIC);
	 ("else", ELSE_TT);
	 ("ensures", ENSURES);
	 ("enum", ENUM);
	 ("ex", EXISTS);
	 ("exists", EXISTS);
	 ("extends", EXTENDS);
	 ("false", FALSE);
   ("finalizes", FINALIZE);
   ("finally", FINALLY);
	 ("float", FLOAT);
	 ("forall", FORALL);
   ("global",GLOBAL);
	 ("head",HEAD);
   ("ho_pred",HPRED);
   ("if", IF);
	 ("in", IN_T);
   ("inlist", INLIST);
	 ("int", INT);
	 ("intersect", INTERSECT);
	 ("inv", INV);
   ("join", JOIN);
	 ("lemma", LEMMA);
   ("len", LENGTH);
	 ("let", LET);
	 ("max", MAX);
	 ("min", MIN);
	 ("new", NEW);
	 ("notin", NOTIN);
   ("notinlist", NOTINLIST);
	 ("null", NULL);
	 ("off", OFF);
	 ("on", ON);
	 ("or", ORWORD);
   ("perm",PERM);
	 ("pred", PRED);
     ("print", PRINT);
	 ("dprint", DPRINT);
   ("raise", RAISE);
	 ("ref", REF);
("relation", REL);
	 ("requires", REQUIRES);
   ("refines", REFINES);
	 ("res", RES "res");
   ("rev",REVERSE);
	 ("return", RETURN);
	 ("self", SELFT "self");
   ("set",SET);
	 ("split", SPLIT);
	 ("subset", SUBSET);
	 ("static", STATIC);
   ("tail",TAIL);
	 ("then", THEN);
	 ("this", THIS "this");
   ("time", DTIME);
   ("throws", THROWS);
	 ("to", TO);
	 ("true", TRUE);
   ("try", TRY);
	 ("unfold", UNFOLD);
	 ("union", UNION);
	 ("void", VOID);
   ("variance", VARIANCE);
	 ("while", WHILE);
   ("with", WITH);
	 (flow, FLOW Globals.flow);]

# 200 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\189\255\190\255\078\000\194\255\002\000\158\000\209\255\
    \012\000\211\255\031\000\159\000\218\255\033\000\157\000\035\000\
    \227\255\228\255\229\255\230\255\231\255\079\000\169\000\236\255\
    \065\000\101\000\243\255\156\000\036\001\248\000\039\001\053\001\
    \104\001\001\000\255\255\249\255\250\255\251\255\126\001\092\000\
    \157\000\136\001\174\001\203\001\170\001\237\001\011\002\035\002\
    \159\001\103\000\059\001\130\000\061\002\248\255\095\002\071\002\
    \131\000\241\255\083\002\134\002\242\255\206\255\246\255\124\000\
    \245\255\203\255\244\255\239\255\237\255\199\255\200\255\235\255\
    \114\000\232\255\112\000\223\255\215\255\151\000\221\255\219\255\
    \202\255\207\255\217\255\213\255\210\255\205\255\208\255\204\255\
    \253\002\250\255\004\000\251\255\252\255\075\003\254\255\255\255\
    \108\001\252\255\005\000\253\255\173\000\169\000\255\255\254\255\
    \007\000\254\255\006\000\255\255\104\001\247\255\248\255\008\000\
    \249\255\065\004\255\255\250\255\157\002\189\002\253\255\113\001\
    \103\001\219\002\252\255\099\004\251\255\142\000\253\255\254\255\
    \113\000\145\000\148\000\146\000\148\000\255\255\251\001\254\255\
    \111\001\232\000\254\255\035\002\036\002\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\064\000\255\255\058\000\059\000\255\255\
    \057\000\255\255\043\000\041\000\255\255\035\000\039\000\030\000\
    \255\255\255\255\255\255\255\255\255\255\021\000\054\000\255\255\
    \017\000\015\000\255\255\062\000\063\000\060\000\002\000\002\000\
    \001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\002\000\002\000\003\000\255\255\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\007\000\007\000\
    \007\000\255\255\255\255\255\255\255\255\255\255\255\255\008\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \022\000\255\255\031\000\255\255\255\255\033\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\255\255\255\255\002\000\255\255\255\255\
    \255\255\255\255\002\000\255\255\003\000\003\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\006\000\
    \255\255\008\000\255\255\255\255\005\000\005\000\255\255\001\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\001\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\049\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\053\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \089\000\000\000\255\255\000\000\000\000\255\255\000\000\000\000\
    \097\000\000\000\255\255\000\000\255\255\255\255\000\000\000\000\
    \105\000\000\000\255\255\000\000\109\000\000\000\000\000\255\255\
    \000\000\115\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\000\000\127\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\135\000\000\000\
    \255\255\138\000\000\000\140\000\140\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\032\000\034\000\034\000\032\000\033\000\091\000\099\000\
    \107\000\107\000\112\000\000\000\106\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \032\000\010\000\026\000\012\000\017\000\005\000\025\000\029\000\
    \007\000\019\000\027\000\006\000\020\000\011\000\016\000\028\000\
    \031\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\021\000\004\000\014\000\015\000\013\000\087\000\
    \024\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\008\000\083\000\018\000\079\000\003\000\
    \074\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\009\000\022\000\023\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \084\000\072\000\068\000\067\000\044\000\044\000\057\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\060\000\057\000\064\000\073\000\003\000\075\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\085\000\077\000\066\000\081\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\078\000\069\000\103\000\
    \102\000\065\000\076\000\086\000\080\000\082\000\129\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\128\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \002\000\130\000\051\000\131\000\132\000\050\000\071\000\255\255\
    \133\000\000\000\139\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\070\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\051\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\063\000\000\000\
    \000\000\000\000\000\000\062\000\052\000\038\000\000\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\061\000\060\000\038\000\000\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
    \120\000\032\000\112\000\036\000\032\000\111\000\099\000\039\000\
    \136\000\098\000\120\000\120\000\000\000\000\000\000\000\000\000\
    \000\000\036\000\000\000\000\000\040\000\000\000\030\000\120\000\
    \032\000\000\000\114\000\000\000\000\000\041\000\126\000\136\000\
    \000\000\120\000\000\000\037\000\030\000\035\000\101\000\039\000\
    \000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\
    \000\000\037\000\000\000\035\000\040\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\041\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\000\000\000\000\113\000\000\000\000\000\000\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\000\000\044\000\044\000\000\000\045\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\000\000\036\000\000\000\
    \255\255\000\000\036\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\000\000\136\000\000\000\000\000\000\000\
    \000\000\044\000\000\000\000\000\000\000\042\000\000\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\000\000\037\000\036\000\
    \035\000\000\000\037\000\136\000\035\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\
    \000\000\000\000\043\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\046\000\000\000\000\000\000\000\048\000\037\000\
    \048\000\035\000\000\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\255\255\141\000\000\000\
    \000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
    \000\000\000\000\046\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\056\000\000\000\056\000\
    \000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
    \110\000\000\000\000\000\000\000\255\255\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\000\000\047\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\000\000\000\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\056\000\000\000\000\000\000\000\000\000\000\000\056\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
    \000\000\000\000\000\000\056\000\000\000\000\000\000\000\056\000\
    \000\000\056\000\000\000\000\000\000\000\054\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\000\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\000\000\000\000\000\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\000\000\000\000\000\000\091\000\
    \000\000\000\000\090\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \000\000\000\000\000\000\000\000\093\000\000\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \095\000\000\000\094\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\000\000\000\000\
    \000\000\000\000\093\000\000\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\000\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\092\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\000\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\000\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\120\000\000\000\000\000\119\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\118\000\000\000\118\000\000\000\000\000\000\000\000\000\
    \118\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \117\000\117\000\117\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\118\000\000\000\000\000\
    \000\000\000\000\000\000\118\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\000\000\000\000\000\000\000\000\000\000\118\000\
    \000\000\000\000\000\000\118\000\000\000\118\000\000\000\000\000\
    \000\000\116\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\033\000\000\000\000\000\090\000\098\000\
    \106\000\104\000\111\000\255\255\104\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\000\000\013\000\000\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \008\000\021\000\024\000\025\000\039\000\039\000\049\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\051\000\056\000\063\000\072\000\003\000\074\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\006\000\014\000\027\000\011\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\077\000\022\000\100\000\
    \101\000\027\000\014\000\006\000\011\000\011\000\128\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\125\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\129\000\029\000\130\000\131\000\029\000\022\000\104\000\
    \132\000\255\255\137\000\255\255\255\255\255\255\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\022\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\050\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\028\000\255\255\
    \255\255\255\255\255\255\028\000\029\000\030\000\255\255\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\028\000\050\000\031\000\255\255\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\255\255\
    \120\000\032\000\108\000\030\000\032\000\108\000\096\000\031\000\
    \136\000\096\000\119\000\119\000\255\255\255\255\255\255\255\255\
    \255\255\031\000\255\255\255\255\031\000\255\255\030\000\120\000\
    \032\000\255\255\108\000\255\255\255\255\031\000\125\000\136\000\
    \255\255\119\000\255\255\030\000\031\000\030\000\096\000\031\000\
    \255\255\255\255\255\255\096\000\255\255\255\255\255\255\255\255\
    \255\255\031\000\255\255\031\000\031\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\031\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\255\255\255\255\108\000\255\255\255\255\255\255\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\255\255\044\000\044\000\255\255\038\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \137\000\041\000\041\000\041\000\041\000\041\000\041\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\255\255\044\000\255\255\
    \029\000\255\255\042\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\255\255\134\000\255\255\255\255\255\255\
    \255\255\044\000\255\255\255\255\255\255\042\000\255\255\042\000\
    \042\000\042\000\042\000\042\000\042\000\255\255\044\000\043\000\
    \044\000\255\255\042\000\134\000\042\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\255\255\
    \255\255\255\255\043\000\255\255\255\255\139\000\140\000\255\255\
    \255\255\255\255\045\000\255\255\255\255\255\255\046\000\043\000\
    \046\000\043\000\255\255\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\139\000\140\000\255\255\
    \255\255\255\255\255\255\255\255\045\000\255\255\255\255\255\255\
    \255\255\255\255\045\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\052\000\255\255\052\000\
    \255\255\255\255\255\255\255\255\052\000\255\255\255\255\255\255\
    \108\000\255\255\255\255\255\255\096\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\255\255\047\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\255\255\255\255\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\052\000\255\255\255\255\255\255\255\255\255\255\052\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\255\255\255\255\
    \255\255\255\255\255\255\052\000\255\255\255\255\255\255\052\000\
    \255\255\052\000\255\255\255\255\255\255\052\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\255\255\059\000\
    \059\000\059\000\059\000\059\000\059\000\116\000\116\000\116\000\
    \116\000\116\000\116\000\116\000\116\000\116\000\116\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\116\000\116\000\
    \116\000\116\000\116\000\116\000\255\255\255\255\255\255\059\000\
    \059\000\059\000\059\000\059\000\059\000\117\000\117\000\117\000\
    \117\000\117\000\117\000\117\000\117\000\117\000\117\000\255\255\
    \255\255\255\255\255\255\134\000\255\255\255\255\116\000\116\000\
    \116\000\116\000\116\000\116\000\255\255\255\255\255\255\088\000\
    \255\255\255\255\088\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\139\000\140\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\052\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \255\255\255\255\255\255\255\255\088\000\255\255\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\255\255\088\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\255\255\255\255\
    \255\255\255\255\093\000\255\255\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\255\255\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\255\255\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\255\255\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\113\000\255\255\255\255\113\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\113\000\255\255\113\000\255\255\255\255\255\255\255\255\
    \113\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\123\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\113\000\255\255\255\255\
    \255\255\255\255\255\255\113\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\255\255\255\255\255\255\255\255\255\255\113\000\
    \255\255\255\255\255\255\113\000\255\255\113\000\255\255\255\255\
    \255\255\113\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\123\000\123\000\123\000\123\000\
    \123\000\123\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\113\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\001\000\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\113\000\119\000\255\255\113\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_code = 
   "\255\001\255\255\000\001\255";
}

let rec tokenizer file_name lexbuf =
  __ocaml_lex_tokenizer_rec file_name lexbuf 0
and __ocaml_lex_tokenizer_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 217 "lexer.mll"
                                       ( update_loc file_name None 1 false 0; tokenizer file_name lexbuf )
# 743 "lexer.ml"

  | 1 ->
# 218 "lexer.mll"
                                                            ( tokenizer file_name lexbuf )
# 748 "lexer.ml"

  | 2 ->
let
# 219 "lexer.mll"
                   i
# 754 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 220 "lexer.mll"
        ( try  INT_LITER(int_of_string i, i)
          with Failure _ -> err (Literal_overflow "int") (Loc.of_lexbuf lexbuf) )
# 759 "lexer.ml"

  | 3 ->
let
# 222 "lexer.mll"
                     f
# 765 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 223 "lexer.mll"
        ( try  FLOAT_LIT(float_of_string f, f)
          with Failure _ -> err (Literal_overflow "float") (Loc.of_lexbuf lexbuf) )
# 770 "lexer.ml"

  | 4 ->
let
# 225 "lexer.mll"
                    i
# 776 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 226 "lexer.mll"
        ( try  INT_LITER(int_of_string i, i) (*can try different converter if needed*)
          with Failure _ -> err (Literal_overflow "int32") (Loc.of_lexbuf lexbuf) )
# 781 "lexer.ml"

  | 5 ->
let
# 228 "lexer.mll"
                    i
# 787 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 229 "lexer.mll"
        ( try  INT_LITER(int_of_string i, i) (*can try different converter if needed*)
          with Failure _ -> err (Literal_overflow "int64") (Loc.of_lexbuf lexbuf) )
# 792 "lexer.ml"

  | 6 ->
let
# 231 "lexer.mll"
                    i
# 798 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 232 "lexer.mll"
        ( try INT_LITER(int_of_string i, i) (*can try different converter if needed*)
          with Failure _ -> err (Literal_overflow "nativeint") (Loc.of_lexbuf lexbuf) )
# 803 "lexer.ml"

  | 7 ->
let
# 234 "lexer.mll"
                c
# 809 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 235 "lexer.mll"
        ( err (Illegal_escape (String.make 1 c)) (Loc.of_lexbuf lexbuf)         )
# 813 "lexer.ml"

  | 8 ->
# 236 "lexer.mll"
         ( comment_level := 0; comment file_name lexbuf )
# 818 "lexer.ml"

  | 9 ->
# 237 "lexer.mll"
         ( line_comment file_name lexbuf )
# 823 "lexer.ml"

  | 10 ->
# 239 "lexer.mll"
        ( warn Comment_start (Loc.of_lexbuf lexbuf);   
          comment_level := 0;
          comment file_name lexbuf)
# 830 "lexer.ml"

  | 11 ->
# 243 "lexer.mll"
        ( warn Comment_not_end (Loc.of_lexbuf lexbuf)                           ;
          move_start_p (-1) file_name; STAR                                      )
# 836 "lexer.ml"

  | 12 ->
# 246 "lexer.mll"
        ( with_curr_loc string file_name;
          let s = buff_contents file_name in STRING (Camlp4.Struct.Token.Eval.string s, s)     )
# 842 "lexer.ml"

  | 13 ->
let
# 248 "lexer.mll"
                    x
# 848 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 249 "lexer.mll"
        ( update_loc file_name None 1 false 1; CHAR_LIT (Camlp4.Struct.Token.Eval.char x, x)       )
# 852 "lexer.ml"

  | 14 ->
let
# 254 "lexer.mll"
             x
# 858 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 254 "lexer.mll"
                                                   ( CHAR_LIT (Camlp4.Struct.Token.Eval.char x, x) )
# 862 "lexer.ml"

  | 15 ->
# 255 "lexer.mll"
        ( AND )
# 867 "lexer.ml"

  | 16 ->
# 256 "lexer.mll"
         ( ANDAND )
# 872 "lexer.ml"

  | 17 ->
# 257 "lexer.mll"
        ( AT )
# 877 "lexer.ml"

  | 18 ->
# 258 "lexer.mll"
         (IMM)
# 882 "lexer.ml"

  | 19 ->
# 259 "lexer.mll"
        ( CBRACE )
# 887 "lexer.ml"

  | 20 ->
# 260 "lexer.mll"
         (CLIST)
# 892 "lexer.ml"

  | 21 ->
# 261 "lexer.mll"
        ( COLON )
# 897 "lexer.ml"

  | 22 ->
# 262 "lexer.mll"
         ( COLONCOLON )
# 902 "lexer.ml"

  | 23 ->
# 263 "lexer.mll"
          ( COLONCOLONCOLON )
# 907 "lexer.ml"

  | 24 ->
# 264 "lexer.mll"
        ( COMMA )
# 912 "lexer.ml"

  | 25 ->
# 265 "lexer.mll"
        ( CPAREN )
# 917 "lexer.ml"

  | 26 ->
# 266 "lexer.mll"
        ( CSQUARE )
# 922 "lexer.ml"

  | 27 ->
# 267 "lexer.mll"
        ( DOLLAR )
# 927 "lexer.ml"

  | 28 ->
# 268 "lexer.mll"
        ( DOT )
# 932 "lexer.ml"

  | 29 ->
# 269 "lexer.mll"
         ( DOUBLEQUOTE )
# 937 "lexer.ml"

  | 30 ->
# 270 "lexer.mll"
        ( EQ )
# 942 "lexer.ml"

  | 31 ->
# 271 "lexer.mll"
         ( EQEQ )
# 947 "lexer.ml"

  | 32 ->
# 272 "lexer.mll"
          ( ESCAPE )
# 952 "lexer.ml"

  | 33 ->
# 273 "lexer.mll"
         ( RIGHTARROW )
# 957 "lexer.ml"

  | 34 ->
# 274 "lexer.mll"
          ( EQUIV )
# 962 "lexer.ml"

  | 35 ->
# 275 "lexer.mll"
        ( GT )
# 967 "lexer.ml"

  | 36 ->
# 276 "lexer.mll"
         ( GTE )
# 972 "lexer.ml"

  | 37 ->
# 277 "lexer.mll"
        ( HASH )
# 977 "lexer.ml"

  | 38 ->
# 278 "lexer.mll"
         ( LEFTARROW )
# 982 "lexer.ml"

  | 39 ->
# 279 "lexer.mll"
        ( LT )
# 987 "lexer.ml"

  | 40 ->
# 280 "lexer.mll"
         ( LTE )
# 992 "lexer.ml"

  | 41 ->
# 281 "lexer.mll"
        ( MINUS )
# 997 "lexer.ml"

  | 42 ->
# 282 "lexer.mll"
         ( NEQ )
# 1002 "lexer.ml"

  | 43 ->
# 283 "lexer.mll"
        ( NOT )
# 1007 "lexer.ml"

  | 44 ->
# 284 "lexer.mll"
        ( OBRACE )
# 1012 "lexer.ml"

  | 45 ->
# 285 "lexer.mll"
         (OLIST)
# 1017 "lexer.ml"

  | 46 ->
# 286 "lexer.mll"
        ( OPAREN )
# 1022 "lexer.ml"

  | 47 ->
# 287 "lexer.mll"
         ( OP_ADD_ASSIGN )
# 1027 "lexer.ml"

  | 48 ->
# 288 "lexer.mll"
         ( OP_DEC )
# 1032 "lexer.ml"

  | 49 ->
# 289 "lexer.mll"
         ( OP_DIV_ASSIGN )
# 1037 "lexer.ml"

  | 50 ->
# 290 "lexer.mll"
         ( OP_INC )
# 1042 "lexer.ml"

  | 51 ->
# 291 "lexer.mll"
         ( OP_MOD_ASSIGN )
# 1047 "lexer.ml"

  | 52 ->
# 292 "lexer.mll"
         ( OP_MULT_ASSIGN )
# 1052 "lexer.ml"

  | 53 ->
# 293 "lexer.mll"
         ( OP_SUB_ASSIGN )
# 1057 "lexer.ml"

  | 54 ->
# 294 "lexer.mll"
        ( OR )
# 1062 "lexer.ml"

  | 55 ->
# 295 "lexer.mll"
         ( OROR )
# 1067 "lexer.ml"

  | 56 ->
# 296 "lexer.mll"
         ( (* (print_string "der\n"; *)DERIVE )
# 1072 "lexer.ml"

  | 57 ->
# 297 "lexer.mll"
        ( OSQUARE )
# 1077 "lexer.ml"

  | 58 ->
# 298 "lexer.mll"
        ( PERCENT )
# 1082 "lexer.ml"

  | 59 ->
# 299 "lexer.mll"
        ( PLUS )
# 1087 "lexer.ml"

  | 60 ->
# 300 "lexer.mll"
         ( PRIME )
# 1092 "lexer.ml"

  | 61 ->
# 301 "lexer.mll"
        ( SEMICOLON )
# 1097 "lexer.ml"

  | 62 ->
# 302 "lexer.mll"
        ( STAR )
# 1102 "lexer.ml"

  | 63 ->
# 303 "lexer.mll"
        ( DIV )
# 1107 "lexer.ml"

  | 64 ->
let
# 304 "lexer.mll"
             idstr
# 1113 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 305 "lexer.mll"
   (
		if idstr = "_" then
		  IDENTIFIER ("Anon" ^ fresh_trailer ())
		else if idstr = "java" then begin
      store file_name; JAVA (parse_nested java file_name)
		end else
		  try Hashtbl.find sleek_keywords idstr
		  with | _ -> IDENTIFIER idstr
	  )
# 1125 "lexer.ml"

  | 65 ->
# 315 "lexer.mll"
      ( let pos = lexbuf.lex_curr_p in
        lexbuf.lex_curr_p <- { pos with pos_bol  = pos.pos_bol  + 1 ;
                                        pos_cnum = pos.pos_cnum + 1 }; EOF      )
# 1132 "lexer.ml"

  | 66 ->
let
# 318 "lexer.mll"
           c
# 1138 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 318 "lexer.mll"
                             ( err (Illegal_character c) (Loc.of_lexbuf lexbuf) )
# 1142 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tokenizer_rec file_name lexbuf __ocaml_lex_state

and java file_name lexbuf =
  __ocaml_lex_java_rec file_name lexbuf 88
and __ocaml_lex_java_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 322 "lexer.mll"
          ( store file_name; with_curr_loc java file_name; parse java file_name )
# 1153 "lexer.ml"

  | 1 ->
# 323 "lexer.mll"
                                                                (store file_name)
# 1158 "lexer.ml"

  | 2 ->
# 324 "lexer.mll"
                                                   ( store_parse java file_name )
# 1163 "lexer.ml"

  | 3 ->
# 325 "lexer.mll"
                                         ( err Unterminated_java (loc file_name))
# 1168 "lexer.ml"

  | 4 ->
# 326 "lexer.mll"
               ( update_loc file_name None 1 false 0; store_parse java file_name)
# 1173 "lexer.ml"

  | 5 ->
# 327 "lexer.mll"
                                                   ( store_parse java file_name )
# 1178 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_java_rec file_name lexbuf __ocaml_lex_state

and comment file_name lexbuf =
  __ocaml_lex_comment_rec file_name lexbuf 96
and __ocaml_lex_comment_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 330 "lexer.mll"
         ( 
	  if !comment_level = 0 then
		tokenizer file_name lexbuf 
	  else begin
		comment_level := !comment_level - 1;
		comment file_name lexbuf
	  end	)
# 1195 "lexer.ml"

  | 1 ->
# 337 "lexer.mll"
         (
	  comment_level := !comment_level + 1;
	  comment file_name lexbuf)
# 1202 "lexer.ml"

  | 2 ->
# 340 "lexer.mll"
            ( update_loc file_name None 1 false 0; comment file_name lexbuf )
# 1207 "lexer.ml"

  | 3 ->
# 341 "lexer.mll"
       ( comment file_name lexbuf )
# 1212 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec file_name lexbuf __ocaml_lex_state

and line_comment file_name lexbuf =
  __ocaml_lex_line_comment_rec file_name lexbuf 104
and __ocaml_lex_line_comment_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 344 "lexer.mll"
            ( update_loc file_name None 1 false 0; tokenizer file_name lexbuf )
# 1223 "lexer.ml"

  | 1 ->
# 345 "lexer.mll"
      ( line_comment file_name lexbuf )
# 1228 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_comment_rec file_name lexbuf __ocaml_lex_state

and string c lexbuf =
lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ;   __ocaml_lex_string_rec c lexbuf 108
and __ocaml_lex_string_rec c lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 349 "lexer.mll"
                                                                ( set_start_p c )
# 1239 "lexer.ml"

  | 1 ->
let
# 350 "lexer.mll"
                                    space
# 1245 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 351 "lexer.mll"
        ( update_loc c None 1 false (String.length space);
          store_parse string c                                                  )
# 1250 "lexer.ml"

  | 2 ->
# 353 "lexer.mll"
                                                         ( store_parse string c )
# 1255 "lexer.ml"

  | 3 ->
# 354 "lexer.mll"
                                                         ( store_parse string c )
# 1260 "lexer.ml"

  | 4 ->
# 355 "lexer.mll"
                                                         ( store_parse string c )
# 1265 "lexer.ml"

  | 5 ->
let
# 356 "lexer.mll"
                 x
# 1271 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 357 "lexer.mll"
        ( if is_in_comment c
          then store_parse string c
          else begin
            warn (Illegal_escape (String.make 1 x)) (Loc.of_lexbuf lexbuf);
            store_parse string c
          end )
# 1280 "lexer.ml"

  | 6 ->
# 364 "lexer.mll"
      ( update_loc c None 1 false 0; store_parse string c                       )
# 1285 "lexer.ml"

  | 7 ->
# 365 "lexer.mll"
                                              ( err Unterminated_string (loc c) )
# 1290 "lexer.ml"

  | 8 ->
# 366 "lexer.mll"
                                                         ( store_parse string c )
# 1295 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec c lexbuf __ocaml_lex_state

and preprocess file_name lexbuf =
  __ocaml_lex_preprocess_rec file_name lexbuf 125
and __ocaml_lex_preprocess_rec file_name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 371 "lexer.mll"
      (
		(* processing import *)
		let _ = rip_ws lexbuf in
		let tmp_file_name = get_file_name lexbuf in
		let f1 = String.sub tmp_file_name 1 (String.length tmp_file_name - 2) in
		let in_file = open_in f1 in
		let cont = ref true in
		let in_cont = Buffer.create 1024 in
		  while !cont do
			try
			  let line = input_line in_file in
				Buffer.add_string in_cont (line ^ "\n")
			with
			  | End_of_file -> cont := false
		  done;
		  output_string file_name (Buffer.contents in_cont);
		  preprocess file_name lexbuf
      )
# 1323 "lexer.ml"

  | 1 ->
let
# 389 "lexer.mll"
         c
# 1329 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 390 "lexer.mll"
      ( (* other character, just copy it over *)
		output_char file_name c;
		preprocess file_name lexbuf  
      )
# 1336 "lexer.ml"

  | 2 ->
# 394 "lexer.mll"
        ( EOF )
# 1341 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_preprocess_rec file_name lexbuf __ocaml_lex_state

and rip_ws lexbuf =
  __ocaml_lex_rip_ws_rec lexbuf 134
and __ocaml_lex_rip_ws_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 397 "lexer.mll"
                     ws
# 1353 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 397 "lexer.mll"
                        ( ws )
# 1357 "lexer.ml"

  | 1 ->
# 398 "lexer.mll"
       ( print_string "There must be whitespace after import directive\n"; exit (-1) )
# 1362 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_rip_ws_rec lexbuf __ocaml_lex_state

and get_file_name lexbuf =
  __ocaml_lex_get_file_name_rec lexbuf 137
and __ocaml_lex_get_file_name_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 401 "lexer.mll"
                                fn
# 1374 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 401 "lexer.mll"
                                   ( fn )
# 1378 "lexer.ml"

  | 1 ->
# 402 "lexer.mll"
      ( print_string "file name following import must be enclosed in double quotes\n"; exit (-1) )
# 1383 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_get_file_name_rec lexbuf __ocaml_lex_state

;;

# 404 "lexer.mll"
 

  let lexing_store s buff max =
    let rec self n s =
      if n >= max then n
      else
        match Stream.peek s with
        | Some x ->
            Stream.junk s;
            buff.[n] <- x;
            succ n
        | _ -> n
    in
    self 0 s

  let from_context c =
    let next _ =
      let tok = with_curr_loc tokenizer c in
      let loc = Loc.of_lexbuf c.lexbuf in
      Some ((tok, loc))
    in Stream.from next

  let from_lexbuf lb =
    let c = { (default_context lb) with  loc = Loc.of_lexbuf lb}
    in from_context c

  let setup_loc lb loc =
    let start_pos = Loc.start_pos loc in
    lb.lex_abs_pos <- start_pos.pos_cnum;
    lb.lex_curr_p  <- start_pos

  let from_string loc str =
    let lb = Lexing.from_string str in
    setup_loc lb loc;
    from_lexbuf lb

  let from_stream loc strm =
    let lb = Lexing.from_function (lexing_store strm) in
    setup_loc lb loc;
    from_lexbuf lb

  let mk () loc strm = from_stream loc strm
end

# 1434 "lexer.ml"
