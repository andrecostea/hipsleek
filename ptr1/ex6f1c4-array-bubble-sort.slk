data arrI {
  int val;
}.

pred arr_seg<i,n> == i=n & i>=0
  or x::arrI<_>*self::arr_seg<i,n-1> & x=self+(n-1) & i>=0 
  inv n>=i & i>=0.

infer[@classic] x::arrI<_> * base::arr_seg<i,n-1> * y::arrI<_>
  & x=base+(n-1) & i>=0 & y=x+1
  |- base::arr_seg<i,n+1>.
expect Valid.

infer[@classic] x::arrI<_> * base::arr_seg<i,n-1> 
  & x=base+(n-1) & i>=0 & y=x+1
  |- base::arr_seg<i,n>.
expect Valid.

infer[@classic] x::arrI<_> & x=base+i & i>=0 
  |- base::arr_seg<i,i+1>.
expect Valid.

/*
# ex6f1c4.slk --pnum 2

# why does pred vs pred give a FOLD?
  why isn't it data vs pred?

!!! **context.ml#3661:compute_action (steps) :
 ### RHS Cand :[ base::arr_seg<i_76,n_77>@M]
 ### action :
 COND =>[
  Prio:1
  Unfold 0 =>
    LHS: base::arr_seg<i,flted_14_51>@M
    RHS: base::arr_seg<i_76,n_77>@M;
  Prio:1
  Match =>
    LHS: base::arr_seg<i,flted_14_51>@M
    RHS: base::arr_seg<i_76,n_77>@M;
  Prio:2
  Fold =>
    LHS: base::arr_seg<i,flted_14_51>@M
    RHS: base::arr_seg<i_76,n_77>@M;
  Prio:3
  BaseCaseUnfold =>
    LHS: base::arr_seg<i,flted_14_51>@M
    RHS: base::arr_seg<i_76,n_77>@M
  ]

*/
