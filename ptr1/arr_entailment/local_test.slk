// README:

//       Use @arr_ba for bi-abduction
//       Use @arr_en for classical entailment.

//       In classical entailment, by default, it will just return TRUE or FALSE.
//       To generate pre-condition instead of just TRUE or FALSE, run with "--arr-pre".
//       For example, ../../sleek ex1.slk --arr-pre
//       To print all the intermediate steps, run with --verbose-arr
      
pred_prim Aseg<start:int, end:int>.
pred_prim AsegNE<start:int, end:int>.
pred_prim Elem<start:int,value:int>.




// infer[@arr_enfr] base_2306::Elem<i_2307,v_2308> * base_2306::AsegNE<t_t0,i_2307>* base_2306::Elem<i,v> &
// v_bool_12_2261' & t_t1!=v_2308 & v_bool_12_2270' & k<=(t_t6-3) & 0<=k & 
// t_t0=k+1 & i=k & i_2307=t_t6-1 & v=t_t1 & t_t7=v_2308 & length'=t_t6 & 
// length_2175=t_t6 & length=t_t6 & base=base_2306 & arr'=base_2306 & 
// arr=base_2306 & a'=k+base_2306 & a=k+base_2306
//  |-  exists length_2330: arr'::AsegNE<k_2329,length_2330> & a'=k_2329+arr' & 0<=k_2329 & k_2329<=length' & length_2330=length'.

infer[@arr_enfr] arr::Elem<k,v>|- arr::AsegNE<k,k+1>.

// infer[@arr_enfr] a'::AsegNE<flted_28_2676,array_size_2123> & j>=0 & j<array_size_2123
// & v_int_star_33_2457'=j'+a' & flted_28_2676=0 & flted_27_2210=0
// & index_2661=index & j_2665=j & index'=t_t265 & t_t293=t_t265 & v=t_t265 & flted_16_2122=0 & flted_27_2209=i_2647+1 & t_t292=i_2647+1 & i=i_2647 & v_int_star_24_2197'=a'+i_2647
// & array_size'=array_size & a=a' & base=a' & i'=i_2647 & array_size_2123=array_size & flted_28_2675=i_2647+1 & t_t264=i_2647+1 & 1<=i_2647 & i_2647<=(array_size-2) & v_bool_12_2176' & v_bool_12_2479'
// |- a'::Elem<i_2695,Anon_24>& i_2695=j. //& v_int_star_33_2457'=i_2695+base_2694.

/*
frame interface lhs_p: [ flted_28_2676<array_size_2123, true, flted_28_2675=t_t264 & i'=t_t264-1 & a=base & array_size'=array_size_2123 & 
 array_size=array_size_2123 & i=t_t264-1 & t_t292=t_t264 & 
 flted_27_2209=t_t264 & i_2647=t_t264-1 & flted_16_2122=0 & t_t293=v & 
 index'=v & t_t265=v & j=j_2665 & index=index_2661 & flted_27_2210=0 & 
 flted_28_2676=0 & a'=base & j'=v_int_star_33_2457'-base & 2<=t_t264 & 
 t_t264<array_size_2123 & v_bool_12_2479' & v_bool_12_2176']
norm to pure  (exists(Anon_24:exists(base_2694:exists(t_t2:exists(i_2695:t_t3=Anon_24 & 
                                                            a'=base_2694 & 
                                                            i_2695=v_int_star_33_2457'-
                                                            base_2694 & 
                                                            flted_28_2676<i_2695 & 
                                                            array_size_2123>i_2695 & 
                                                            (i_2695+1)<array_size_2123)))) | 
  exists(Anon_24:exists(base_2694:exists(t_t2:exists(i_2695:t_t3=Anon_24 & 
                                                            a'=base_2694 & 
                                                            i_2695=v_int_star_33_2457'-
                                                            base_2694 & 
                                                            flted_28_2676<i_2695 & 
                                                            array_size_2123>i_2695 & 
                                                            i_2695+1=array_size_2123)))) | 
  exists(Anon_24:exists(base_2694:exists(t_t0:exists(i_2695:t_t1=Anon_24 & 
                                                            a'=base_2694 & 
                                                            i_2695=v_int_star_33_2457'-
                                                            base_2694 & 
                                                            flted_28_2676=i_2695 & 
                                                            (flted_28_2676+1)<array_size_2123)))) | 
  exists(Anon_24:exists(base_2694:exists(t_t0:exists(i_2695:t_t1=Anon_24 & 
                                                            a'=base_2694 & 
                                                            i_2695=v_int_star_33_2457'-
                                                            base_2694 & 
                                                            flted_28_2676=i_2695 & 
                                                            flted_28_2676+1=array_size_2123)))))

*/
// infer[@arr_en] exists ex7,ex9 : base::Elem<v1, 0, 0> * base::AsegNE<v0, v0+2> * base::AsegNE<a1, a1+1> * base::Elem<a3, 0, 0> & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0 |- exists ex7,ex9,a11,u0,u1,w0,w1,z : base::Elem<v0, u0, w0> * base::Elem<v0+1, u1, w1> * base::AsegNE<z, z+1> * base::Elem<v1, 0, 0> * base::Elem<a3, 0, 0> & a1=a11 & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0.
// expect Fail.

// // 17
// // slar/Base/s052.sli
// infer[@arr_en] base::AsegNE<u0, u1+1> & u0+3<=u1 & x=1 |- exists ex1,ex2,ex4,ex5,w1 : base::AsegNE<u0, w1+1> * base::AsegNE<w1+1, u1+1>.
// expect Valid.

// lhs_p  u0<flted_17_27 & u0>0 & flted_17_27>0 & x=1 & u1=flted_17_27-1 & u0<=(flted_17_27-4)
// rhs_p  flted_17_42<flted_17_41 & u0_49<flted_17_43 & u0_49>0 & flted_17_43>0 & 
//  flted_17_42>0 & flted_17_41>0 & 
//  ((flted_17_41<=u0_49 | flted_17_43<=flted_17_42)) & 
//  flted_17_42=flted_17_43 & w1_48=flted_17_43-1 & u1=flted_17_41-1 & u0=u0_49



// norm to pure  exists(w1_48:exists(flted_17_41:exists(flted_17_42:exists(flted_17_43:exists(u0_49:
// flted_17_43<=flted_17_42 & flted_17_42<flted_17_41 & u0_49<flted_17_43 & 
// u0_49>0 & flted_17_43>0 & flted_17_42>0 & flted_17_41>0 & 
// ((flted_17_41<=u0_49 | flted_17_43<=flted_17_42)) & 
// flted_17_42=flted_17_43 & w1_48=flted_17_43-1 & u1=flted_17_41-1 & 
// u0=u0_49 & u0=u0_49 & flted_17_43<flted_17_27 & flted_17_43=flted_17_42 & 
// flted_17_41=flted_17_27)))))



// exists(w1_48:exists(ex2_45:exists(ex1_44:exists(flted_17_41:exists(flted_17_42:exists(flted_17_43:exists(u0_49:
// flted_17_43<=flted_17_42 & flted_17_42<flted_17_41 & u0_49<flted_17_43 & 
// u0_49>0 & flted_17_43>0 & flted_17_42>0 & flted_17_41>0 & 
// ((flted_17_41<=u0_49 | flted_17_43<=flted_17_42)) & 
// flted_17_42=flted_17_43 & w1_48=flted_17_43-1 & u1=flted_17_41-1 & 
// ex2_45=ex1_44 & u0=u0_49 & u0=u0_49 & flted_17_43<flted_17_27 & 
// flted_17_43=flted_17_42 & flted_17_41=flted_17_27)))))))

// !!! **tpdispatcher.ml#492:init_tp by default: 
// !!! **WARNING****sleek.ml#418:[../../prelude.slk,local_test.slk]
// lhs:  (exists flted_17_27: base::AsegNE<u0,flted_17_27>@M&
// x=1 & (3+u0)<=u1 & flted_17_27=1+u1&{FLOW,(4,5)=__norm#E}[])
// rhs:  (exists u0_49,flted_17_41,flted_17_42,flted_17_43,ex1_44,ex2_45,
// w1_48: base::AsegNE<u0_49,flted_17_43>@M * 
//        base::AsegNE<flted_17_42,flted_17_41>@M&
// flted_17_43=1+w1_48 & flted_17_42=1+w1_48 & flted_17_41=1+u1 & 
// ex1_44=ex2_45 & u0_49=u0&{FLOW,(4,5)=__norm#E}[])

// Starting Omega.../usr/local/bin/oc
// before match_common lhs_h: [AsegNE<u0,flted_17_27>]
// before match_common rhs_h: [AsegNE<u0_49,flted_17_43>,AsegNE<flted_17_42,flted_17_41>]
// after match_common lhs_h: [AsegNE<u0,flted_17_27>]
// after match_common rhs_h: [AsegNE<flted_17_42,flted_17_41>,AsegNE<u0_49,flted_17_43>]
//    [AsegNE<u0,flted_17_27>] |- [AsegNE<flted_17_42,flted_17_41>*AsegNE<u0_49,flted_17_43>]
//       # AsegNE<u0,flted_17_27> # ; [EMP] |- [AsegNE<flted_17_42,flted_17_41>*AsegNE<u0_49,flted_17_43>]
//          # AsegNE<u0,flted_17_27> # ; [EMP] |- # AsegNE<u0_49,flted_17_43> # ; [AsegNE<flted_17_42,flted_17_41>]
//             # AsegNE<u0,flted_17_27> # ; [EMP] |- # AsegNE<u0,flted_17_43> # ; [AsegNE<flted_17_42,flted_17_41>]
//                [EMP] |- # AsegNE<flted_17_27,flted_17_43> # ; [AsegNE<flted_17_42,flted_17_41>]
//                [EMP] |- [AsegNE<flted_17_42,flted_17_41>]
//                [EMP] |- [EMP]
//                # AsegNE<flted_17_43,flted_17_27> # ; [EMP] |- [AsegNE<flted_17_42,flted_17_41>]
//                   # AsegNE<flted_17_43,flted_17_27> # ; [EMP] |- # AsegNE<flted_17_42,flted_17_41> # ; [EMP]
//                      # AsegNE<flted_17_43,flted_17_27> # ; [EMP] |- # AsegNE<flted_17_43,flted_17_41> # ; [EMP]
//                         [EMP] |- # AsegNE<flted_17_27,flted_17_41> # ; [EMP]
//                         [EMP] |- [EMP]
//                         # AsegNE<flted_17_41,flted_17_27> # ; [EMP] |- [EMP]
//                         [EMP] |- [EMP]
//                         [EMP] |- [EMP]
//                      # AsegNE<flted_17_43,flted_17_27> # ; [EMP] |- # Gap<_,flted_17_43,flted_17_42> # ; # AsegNE<flted_17_42,flted_17_41> # ; [EMP]
//                      # Gap<_,flted_17_42,flted_17_43> # ; # AsegNE<flted_17_43,flted_17_27> # ; [EMP] |- # AsegNE<flted_17_42,flted_17_41> # ; [EMP]
//                [EMP] |- [AsegNE<flted_17_42,flted_17_41>]
//                [EMP] |- [EMP]
//             # AsegNE<u0,flted_17_27> # ; [EMP] |- # Gap<_,u0,u0_49> # ; # AsegNE<u0_49,flted_17_43> # ; [AsegNE<flted_17_42,flted_17_41>]
//             # Gap<_,u0_49,u0> # ; # AsegNE<u0,flted_17_27> # ; [EMP] |- # AsegNE<u0_49,flted_17_43> # ; [AsegNE<flted_17_42,flted_17_41>]



// // 1
// // slar/SingleNFrame-3/s005.sli
// infer[@arr_en] exists ex2,ex4,ex5 : base::Elem<v2, 0, 0> * base::Elem<v0, 0, 0> * base::Elem<a1, 106, ex2> * base::Elem<a3, ex4, ex5> |- exists v3,v1,a3,a1,ex2,ex4,ex5 : base::Elem<a3, ex4, ex5> * base::Elem<a1, 106, ex2> * base::Elem<v1, 0, 0> * base::Elem<v3, 0, 0>.
// expect Valid.

// // 106
// // slar/SingleNFrame-3/s101.sli
// infer[@arr_en] base::AsegNE<v2, v2+1> * base::AsegNE<v0, v0+1> * base::Elem<a1, 100, ex2> * base::Elem<a3, ex4, ex5> * base::AsegNE<ex4, ex5+1> & v2=v3 & v0=v1 |- exists ex2,ex4 : base::Elem<a1, 100, ex2> * base::Elem<a3, ex4, ex5> * base::AsegNE<a1, ex5+1> * base::AsegNE<v1, v1+1> * base::AsegNE<v3, v3+1>.
// expect Fail.


// // 101
// // slar/SingleNFrame-3/s103.sli
// infer[@arr_en] exists ex7,ex9 : base::Elem<v2, 0, 0> * base::AsegNE<v0, v0+1> * base::AsegNE<u0, u0+2> * base::AsegNE<u1+1, u2+1> * base::AsegNE<u2+1, u3+1> & v0=v1 & u0+4<=u3 & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0 |- exists v3,ex7,ex9,w0,w1 : base::AsegNE<u1, u2+1> * base::Elem<w0, w1, ex7> * base::AsegNE<v1, v1+1> * base::Elem<v3, 0, 0> & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0.
// expect Fail.


// infer[@arr_en] exists ex16,ex17 : base::Elem<v1, 0, 0> * base::Elem<v0, 0, 0> * base::Elem<v0+1, 0, 0> & w=1 & z=40 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & ex17=0 & ex16=0 & ex7=0 |- exists ex16,ex17 : base::AsegNE<v0, v0+2> * base::Elem<v1, 0, 0> & w=1 & z=40 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & ex17=0 & ex16=0 & ex7=0.
// expect Valid.



// // 6
// // slar/Base/s002.sli
// infer[@arr_en] exists ex7,ex9 : base::Elem<a1, 100, 200> * base::Elem<a3, 0, 0> & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0 |- exists ex7,ex9 : base::Elem<a1, 100, 200> * base::Elem<a3, 0, 0> & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0.
// expect Valid.


// 116
// slar/Base/s100.sli
// infer[@arr_en] exists ex1: base::Elem<a1, ex1, ex2> * base::Elem<a3, ex4, ex5> * base::AsegNE<ex4, ex1+1> |- exists ex2,ex5,b : base::Elem<a1, ex1, ex2> * base::Elem<a3, ex4, ex5> * base::AsegNE<b, b+ex1-ex4+1>.
// expect Fail.


// Ex ex1,ex2,ex4,ex5. a1 -> (ex1, ex2) * a3 -> (ex4, ex5) * Array(ex4, ex1) |- Ex ex2,ex5,b. a1 -> (ex1, ex2) * a3 -> (ex4, ex5) * Array(b, b+ex1-ex4)

// // 115
// // slar/Base/s083.sli
// infer[@arr_en] base::Elem<v0, 0, 0> * base::Elem<v0+1, 0, 0> & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0 |- exists x1,x2 : base::AsegNE<v0, v0+2> & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0.
// expect Valid.


// infer[@arr_en] base::Elem<y, 0> * base::Elem<x+x1, x2> & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0
// |- exists y1,y2,y3,x1,x2,x3 : base::Elem<y+y2, y3> * base::Elem<x1+x2, x3> & y2!=0 & y=y1 & x=x1 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0.
// expect Fail.

// // 10
// // slar/Base/s078.sli
// infer[@arr_en] base::AsegNE<y, y+1> * base::AsegNE<x, x+1> & 3<tempx8 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0 |- base::AsegNE<w, tempx13+1> * base::AsegNE<tempx13, tempx15+1> & 3<tempx8 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0.
// expect Fail.

// infer[@arr_en] base::AsegNE<y, y+1> * base::AsegNE<x, x+1> & w=1 & z=40 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & ex17=0 & ex16=0 & ex7=0 |- exists ex16,ex17 : base::AsegNE<y, y+1> * base::AsegNE<x, x+1> & w=1 & z=40 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & ex17=0 & ex16=0 & ex7=0.
// expect Valid.

// infer[@arr_en] base::Elem<3+40, 20> * base::Elem<4+1, tempx17+1> * base::Elem<5, 0> & tempx8=20 & 3<tempx9 & tempx9=20 & 3<tempx10 & tempx10=20 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0 |- exists u : base::Elem<u+40, 20> * base::Elem<u+1+1, tempx17+1> & u=3 & tempx8=20 & 3<tempx9 & tempx9=20 & 3<tempx10 & tempx10=20 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0.
// expect Fail.


// infer[@arr_en] base::Elem<y, 0> *base::Elem<x+x1, x2> & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0
// |- exists y1,y2,y3,x1,x2,x3 : base::Elem<y1+y2, y3> * base::Elem<x1+x2, x3> & y2!=0 & y=y1 & x=x1 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0.
// expect Fail.


// Ex ex16,ex17. w = 1 & z = 40 & tempx8 = 20 & tempx9 = 20 & tempx10 = 20 & 3 < tempx11 & tempx11 = 20 & tempx12 = 20 & tempx13 = 20 & tempx14 = 20 & tempx15 = tempx17+1 & y =/ 0 & tempx17 = 1 & ex17 = 0 & ex16 = 0 & ex7 = 0 & Array(v0, v0+1) |- Ex ex16,ex17,u0,u1,w0,w1. w = 1 & z = 40 & tempx8 = 20 & tempx9 = 20 & tempx10 = 20 & 3 < tempx11 & tempx11 = 20 & tempx12 = 20 & tempx13 = 20 & tempx14 = 20 & tempx15 = tempx17+1 & y =/ 0 & tempx17 = 1 & ex17 = 0 & ex16 = 0 & ex7 = 0 & v0 -> (u0, w0) * v0+1 -> (u1, w1)

// infer[@arr_en] base::AsegNE<v0, v0+1> & 3<tempx9 & tempx9=20 & 3<tempx10 & tempx10=20 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0 & y=0 |- exists u0,u1,w0,w1 : base::Elem<v0+u0, u0> * base::Elem<v0+1+u1, u1> & 3<tempx9 & tempx9=20 & 3<tempx10 & tempx10=20 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0.
// expect Valid.
// infer[@arr_en] base::AsegNE<y, y> * base::AsegNE<x, x> & 3<tempx8 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0 |- base::AsegNE<w, tempx13> * base::AsegNE<tempx13, tempx15> & 3<tempx8 & tempx8=20 & tempx9=20 & tempx10=20 & 3<tempx11 & tempx11=20 & tempx12=20 & tempx13=20 & tempx14=20 & tempx15=tempx17+1 & y!=0 & tempx17=1 & w=0 & z=0 & ex7=0.
// expect Fail.

// infer[@arr_enfr]  base::AsegNE<0,10> & ptr= base + 3  |- exists p, v: base::Elem<p, v> & ptr = base + p.
// print residue.
// expect Valid.

// infer[@arr_en] base::Elem<a1+100, 100> * base::Elem<a3+ex4, ex4> |- (exists ex2,ex4,ex5 : base::Elem<a1+100, 100> * base::Elem<a3+ex4, ex4>).

// infer[@arr_en] base::Elem<a1+100, 100> * base::Elem<a3+0, 0> & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0 |- (exists ex7,ex9 : base::Elem<a1+100, 100> * base::Elem<a3+0, 0> & a2=ret & ret=a1 & ex9=0 & s=0 & a4=0 & ex7=0 & ex7=0).


// infer[@arr_en] base::Elem<v2, 0> * base::Elem<v0, 0> * base::Elem<a1+100, 100> * base::Elem<a3, 0> & a1+100<a3 & a3<v0 & v0<v2 |- base::Elem<a1+100, 100> * base::Elem<v2, 0> * base::Elem<a3, 0> * base::Elem<v0, 0>.

// infer[@arr_en] base::Elem<v0+0, 0> * base::Elem<a1+100, 100> * base::Elem<a3+ex4, ex4> |- (exists v1,ex2,ex4,ex5 : base::Elem<a1+100, 100> * base::Elem<a3+ex4, ex4> * base::Elem<v1+0, 0>).


// Exists [p_39,t_t0]: [ true, flted_15_28=p_39, flted_15_28+1=flted_15_27]/\Exists [v_40]: [ t_t0=flted_15_28+1]=>[ t_t1=v_40] @[EMP] * [EMP]
// Exists [p_39,t_t0]: [ true, flted_15_28=p_39, (flted_15_28+1)<flted_15_27]/\Exists [v_40]: [ t_t0=flted_15_28+1]=>[ t_t1=v_40] @[AsegNE<t_t0,flted_15_27>] * [EMP]
// Exists [p_39,t_t2]: [ true, flted_15_28<p_39, flted_15_27>p_39, p_39+1=flted_15_27]/\Exists [v_40]: [ t_t2=p_39+1]=>[ t_t3=v_40] @[AsegNE<flted_15_28,p_39>] * [EMP]
// Exists [p_39,t_t2]: [ true, flted_15_28<p_39, flted_15_27>p_39, (p_39+1)<flted_15_27]/\Exists [v_40]: [ t_t2=p_39+1]=>[ t_t3=v_40] @[AsegNE<flted_15_28,p_39>*AsegNE<t_t2,flted_15_27>] * [EMP]



// norm to pure
//   (exists(v_40:exists(t_t2:exists(p_39:
//                                       t_t3=v_40 & base=ptr-p_39 & 
//                                       flted_15_28<p_39 & flted_15_27>p_39 & 
//                                       (p_39+1)<flted_15_27))) |
				      
//   exists(v_40:exists(t_t2:exists(p_39:t_t3=v_40 & base=ptr-p_39 & 
//                                       flted_15_28<p_39 & flted_15_27>p_39 & 
//                                       p_39+1=flted_15_27))) |
				      
//   exists(v_40:exists(t_t0:exists(p_39:t_t1=v_40 & base=ptr-p_39 & 
//                                       flted_15_28=p_39 & 
//                                       (flted_15_28+1)<flted_15_27))) |
				      
//   exists(v_40:exists(t_t0:exists(p_39:t_t1=v_40 & base=ptr-p_39 & 
//                                       flted_15_28=p_39 & 
//                                       flted_15_28+1=flted_15_27))))

// infer[@arr_enfr] base::Elem<k,v> |- exists c: base::Elem<k,c>.
// print residue.
// expect Valid.


// infer[@arr_enfr]  base::Elem<a,b>  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// infer[@arr_enfr]  base::Elem<a,b> * base::Elem<c,d>  |- base::Elem<a,b>.
// print residue.
// expect Valid.


// infer[@arr_enfr] base::AsegNE<i_2029,m'> * base::AsegNE<i_94,i_2029>&
// i_2029<=tmpi' & tmpi'<m'  & i_94=i_2029-1 & m_95=m_2030 &
// i'=i_2029-1 & m=m_2030 & i=i_2029-1 & m'=m_2030 & 1<=i_2029 &
// i_2029<m_2030 & v_bool_37_1954'|- exists i_100, c: base::Elem<i_100,c> & 0<=tmpi' & i_100=tmpi'.
// print residue.
// expect Valid.


// infer[@arr_en]  base::Elem<a,b>  |- base::Elem<a,c>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::Elem<a,b>  |- base::Elem<c,b>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::Elem<a,b> * base::Elem<c,d>  |- base::Elem<a,b>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::Elem<a,b> * base::Elem<c,d>  |- base::Elem<a,b> * base::Elem<c,d>.
// print residue.
// expect Valid.


// infer[@arr_en]  base::AsegNE<a,b>  |- base::AsegNE<a,c>.
// print residue.
// expect Valid.

// infer[@arr_en]  base::AsegNE<a,b> * base::AsegNE<c,d>  |- base::AsegNE<c,d> * base::AsegNE<a,b>.
// print residue.
// expect Valid.

// infer[@arr_en]  base::Elem<a,b>  |- base::AsegNE<a,a+1>.
// print residue.
// expect Valid.


// infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,3>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c+2,10>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c+2,10>.
// print residue.
// expect Fail.



// // 2
// infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,2>.
// print residue.
// expect Valid.

// // 7
// infer[@arr_en]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
// print residue.
// expect Valid.

// infer[@arr_en]  base::AsegNE<a,b> * base::AsegNE<c,d>  |- base::AsegNE<c,d>.
// print residue.
// expect Fail.

/*
// 3
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,3>.
print residue.
expect Fail.


// 4
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<5,2>.
print residue.
expect Fail.


// 5
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<5,3>.
print residue.
expect Fail.


// 6
infer[@arr_en]  base::Elem<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 7
infer[@arr_en]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 8
infer[@arr_en]  base::AsegNE<1,2>  |- base::AsegNE<a,b>.
print residue.
expect Fail.

// 9
infer[@arr_en]  base::AsegNE<1,2>  |- base::AsegNE<1,b>.
print residue.
expect Fail.

// 10
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<1,b>.
print residue.
expect Fail.

// 11
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<a,b>.
print residue.
expect Fail.

// 12
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<a,2>.
print residue.
expect Fail.

// 13
infer[@arr_en]  base::AsegNE<a,2>  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 14
infer[@arr_en]  base::Aseg<a,2>  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 15
infer[@arr_en]  base::Aseg<a,b> & b=2  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 16
infer[@arr_en]  base::AsegNE<a,b> & b=2  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 17
infer[@arr_en]  base::Aseg<a,b>   |- base::Aseg<a,2>.
print residue.
expect Fail.

// 18
infer[@arr_en]  base::Aseg<a,b>   |- exists c: base::Aseg<a,2>.
print residue.
expect Fail.

// 19
infer[@arr_en]  base::AsegNE<a,b>   |- exists c: base::AsegNE<a,c>.
print residue.
expect Valid.

// 20
infer[@arr_en]  base::AsegNE<a,b>    |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Fail.

//   A |- B  --> F
// -------------------------------
// ex V. (A |- B) --> ex V. F



// 21
infer[@arr_en]  base::AsegNE<a,b> & a=1 & b=2  |- base::AsegNE<a,c>.
print residue.
expect Fail.

// 22
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=2  |- base::AsegNE<1,c>.
print residue.
expect Fail.

// 23
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<8,10>.
print residue.
expect Valid.

// 24
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<8,11>.
print residue.
expect Fail.

// 25
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<3,c> * base::AsegNE<8,11>.
print residue.
expect Fail.

// 26
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c,10>.
print residue.
expect Valid.

// 27
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c,11>.
print residue.
expect Fail.

// 28
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c+2,10>.
print residue.
expect Fail.

// 29
infer[@arr_en]  base::AsegNE<a,a+2>  |- exists u: base::Elem<a,u> * base::Elem<a+1,u>.
print residue.
expect Fail.

// 30
infer[@arr_en]  base::AsegNE<a,a+2>  |- exists u1,u2: base::Elem<a,u1> * base::Elem<a+1,u2>.
print residue.
expect Valid.

// Related to existential
// 31
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b>.
print residue.
expect Valid.

// 32
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b> & b>2.
print residue.
expect Fail.

// // 33
// infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b: base::Aseg<1,b> * base::Elem<3,y>.
// print residue.
// expect Fail.

// // 34
// infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b,y: base::Aseg<1,b> * base::Elem<3,y>.
// print residue.
// expect Valid.

// // 35
// infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b: base::Aseg<1,b> * base::Elem<c,x>.
// print residue.
// expect Fail.

// 36
infer[@arr_en]  base::AsegNE<a,a+2> |- exists u,c: base::Elem<a,u> * base::Elem<a+1,u>.
print residue.
expect Fail.

// 37
infer[@arr_en]  base::AsegNE<1,2> & a>3 |- exists c: base::AsegNE<1,c> & a=5.
print residue.
expect Fail.

// 38
// explicit variables to be fixed...
infer[@arr_en]  base::AsegNE<x,y> |- base::Aseg<x,y-1> * base::Elem<y-1,_>.
print residue.
expect Valid.

// // 39
// infer[@arr_en]  base::AsegNE<x,y> |- exists u: base::Aseg<x,y-1> * base::Elem<y-1,u>.
// print residue.
// expect Valid.

// // 40
// infer[@arr_en]  base::AsegNE<x,y> |- [a] base::AsegNE<x,a> * base::Aseg<a,y>.
// print residue.
// expect Valid.

// // 41
// infer[@arr_en]  base::AsegNE<x,y> |- [a] base::AsegNE<x,a> * base::AsegNE<a,y>.
// print residue.
// expect Fail.

// 42
infer[@arr_en] base::Elem<t114,t115>*base::AsegNE<t116,t117>*base::AsegNE<t118,t119>& t114=7 & t116=8 & t117=12 & t118=12 & t119=15 & t120=7 & t121=15 |- base::AsegNE<t120,t121>&true.
print residue.
expect Valid.

// 43
infer[@arr_en] base::Elem<a,t>*base::AsegNE<b,c> & a=7 & b=8 & c=12  |- base::AsegNE<a,c>.
print residue.
expect Valid.
*/
