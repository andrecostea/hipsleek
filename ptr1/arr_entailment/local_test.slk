// README:

//       Use @arr_ba for bi-abduction
//       Use @arr_en for classical entailment.

//       In classical entailment, by default, it will just return TRUE or FALSE.
//       To generate pre-condition instead of just TRUE or FALSE, run with "--arr-pre".
//       For example, ../../sleek ex1.slk --arr-pre
//       To print all the intermediate steps, run with --verbose-arr
      
pred_prim Aseg<start:int, end:int>.
pred_prim AsegNE<start:int, end:int>.
pred_prim Elem<start:int,value:int>.

// infer[@arr_enfr]  base::AsegNE<0,10> & ptr= base + 3  |- exists p, v: base::Elem<p, v> & ptr = base + p.
// print residue.
// expect Valid.

infer[@arr_en] base::Elem<v2, 0> * base::Elem<v0, 0> * base::Elem<a1+100, 100> * base::Elem<a3, 0> & a1+100<a3 & a3<v0 & v0<v2 |- base::Elem<a1+100, 100> * base::Elem<v2, 0> * base::Elem<a3, 0> * base::Elem<v0, 0>.

// Exists [p_39,t_t0]: [ true, flted_15_28=p_39, flted_15_28+1=flted_15_27]/\Exists [v_40]: [ t_t0=flted_15_28+1]=>[ t_t1=v_40] @[EMP] * [EMP]
// Exists [p_39,t_t0]: [ true, flted_15_28=p_39, (flted_15_28+1)<flted_15_27]/\Exists [v_40]: [ t_t0=flted_15_28+1]=>[ t_t1=v_40] @[AsegNE<t_t0,flted_15_27>] * [EMP]
// Exists [p_39,t_t2]: [ true, flted_15_28<p_39, flted_15_27>p_39, p_39+1=flted_15_27]/\Exists [v_40]: [ t_t2=p_39+1]=>[ t_t3=v_40] @[AsegNE<flted_15_28,p_39>] * [EMP]
// Exists [p_39,t_t2]: [ true, flted_15_28<p_39, flted_15_27>p_39, (p_39+1)<flted_15_27]/\Exists [v_40]: [ t_t2=p_39+1]=>[ t_t3=v_40] @[AsegNE<flted_15_28,p_39>*AsegNE<t_t2,flted_15_27>] * [EMP]



// norm to pure
//   (exists(v_40:exists(t_t2:exists(p_39:
//                                       t_t3=v_40 & base=ptr-p_39 & 
//                                       flted_15_28<p_39 & flted_15_27>p_39 & 
//                                       (p_39+1)<flted_15_27))) |
				      
//   exists(v_40:exists(t_t2:exists(p_39:t_t3=v_40 & base=ptr-p_39 & 
//                                       flted_15_28<p_39 & flted_15_27>p_39 & 
//                                       p_39+1=flted_15_27))) |
				      
//   exists(v_40:exists(t_t0:exists(p_39:t_t1=v_40 & base=ptr-p_39 & 
//                                       flted_15_28=p_39 & 
//                                       (flted_15_28+1)<flted_15_27))) |
				      
//   exists(v_40:exists(t_t0:exists(p_39:t_t1=v_40 & base=ptr-p_39 & 
//                                       flted_15_28=p_39 & 
//                                       flted_15_28+1=flted_15_27))))

// infer[@arr_enfr] base::Elem<k,v> |- exists c: base::Elem<k,c>.
// print residue.
// expect Valid.


// infer[@arr_enfr]  base::Elem<a,b>  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// infer[@arr_enfr]  base::Elem<a,b> * base::Elem<c,d>  |- base::Elem<a,b>.
// print residue.
// expect Valid.


// infer[@arr_enfr] base::AsegNE<i_2029,m'> * base::AsegNE<i_94,i_2029>&
// i_2029<=tmpi' & tmpi'<m'  & i_94=i_2029-1 & m_95=m_2030 &
// i'=i_2029-1 & m=m_2030 & i=i_2029-1 & m'=m_2030 & 1<=i_2029 &
// i_2029<m_2030 & v_bool_37_1954'|- exists i_100, c: base::Elem<i_100,c> & 0<=tmpi' & i_100=tmpi'.
// print residue.
// expect Valid.


// infer[@arr_en]  base::Elem<a,b>  |- base::Elem<a,c>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::Elem<a,b>  |- base::Elem<c,b>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::Elem<a,b> * base::Elem<c,d>  |- base::Elem<a,b>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::Elem<a,b> * base::Elem<c,d>  |- base::Elem<a,b> * base::Elem<c,d>.
// print residue.
// expect Valid.


// infer[@arr_en]  base::AsegNE<a,b>  |- base::AsegNE<a,c>.
// print residue.
// expect Valid.

// infer[@arr_en]  base::AsegNE<a,b> * base::AsegNE<c,d>  |- base::AsegNE<c,d> * base::AsegNE<a,b>.
// print residue.
// expect Valid.

// infer[@arr_en]  base::Elem<a,b>  |- base::AsegNE<a,a+1>.
// print residue.
// expect Valid.


// infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,3>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c+2,10>.
// print residue.
// expect Fail.

// infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c+2,10>.
// print residue.
// expect Fail.



// // 2
// infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,2>.
// print residue.
// expect Valid.

// // 7
// infer[@arr_en]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
// print residue.
// expect Valid.

// infer[@arr_en]  base::AsegNE<a,b> * base::AsegNE<c,d>  |- base::AsegNE<c,d>.
// print residue.
// expect Fail.

/*
// 3
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,3>.
print residue.
expect Fail.


// 4
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<5,2>.
print residue.
expect Fail.


// 5
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<5,3>.
print residue.
expect Fail.


// 6
infer[@arr_en]  base::Elem<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 7
infer[@arr_en]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 8
infer[@arr_en]  base::AsegNE<1,2>  |- base::AsegNE<a,b>.
print residue.
expect Fail.

// 9
infer[@arr_en]  base::AsegNE<1,2>  |- base::AsegNE<1,b>.
print residue.
expect Fail.

// 10
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<1,b>.
print residue.
expect Fail.

// 11
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<a,b>.
print residue.
expect Fail.

// 12
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<a,2>.
print residue.
expect Fail.

// 13
infer[@arr_en]  base::AsegNE<a,2>  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 14
infer[@arr_en]  base::Aseg<a,2>  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 15
infer[@arr_en]  base::Aseg<a,b> & b=2  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 16
infer[@arr_en]  base::AsegNE<a,b> & b=2  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 17
infer[@arr_en]  base::Aseg<a,b>   |- base::Aseg<a,2>.
print residue.
expect Fail.

// 18
infer[@arr_en]  base::Aseg<a,b>   |- exists c: base::Aseg<a,2>.
print residue.
expect Fail.

// 19
infer[@arr_en]  base::AsegNE<a,b>   |- exists c: base::AsegNE<a,c>.
print residue.
expect Valid.

// 20
infer[@arr_en]  base::AsegNE<a,b>    |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Fail.

//   A |- B  --> F
// -------------------------------
// ex V. (A |- B) --> ex V. F



// 21
infer[@arr_en]  base::AsegNE<a,b> & a=1 & b=2  |- base::AsegNE<a,c>.
print residue.
expect Fail.

// 22
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=2  |- base::AsegNE<1,c>.
print residue.
expect Fail.

// 23
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<8,10>.
print residue.
expect Valid.

// 24
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<8,11>.
print residue.
expect Fail.

// 25
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<3,c> * base::AsegNE<8,11>.
print residue.
expect Fail.

// 26
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c,10>.
print residue.
expect Valid.

// 27
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c,11>.
print residue.
expect Fail.

// 28
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c+2,10>.
print residue.
expect Fail.

// 29
infer[@arr_en]  base::AsegNE<a,a+2>  |- exists u: base::Elem<a,u> * base::Elem<a+1,u>.
print residue.
expect Fail.

// 30
infer[@arr_en]  base::AsegNE<a,a+2>  |- exists u1,u2: base::Elem<a,u1> * base::Elem<a+1,u2>.
print residue.
expect Valid.

// Related to existential
// 31
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b>.
print residue.
expect Valid.

// 32
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b> & b>2.
print residue.
expect Fail.

// // 33
// infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b: base::Aseg<1,b> * base::Elem<3,y>.
// print residue.
// expect Fail.

// // 34
// infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b,y: base::Aseg<1,b> * base::Elem<3,y>.
// print residue.
// expect Valid.

// // 35
// infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b: base::Aseg<1,b> * base::Elem<c,x>.
// print residue.
// expect Fail.

// 36
infer[@arr_en]  base::AsegNE<a,a+2> |- exists u,c: base::Elem<a,u> * base::Elem<a+1,u>.
print residue.
expect Fail.

// 37
infer[@arr_en]  base::AsegNE<1,2> & a>3 |- exists c: base::AsegNE<1,c> & a=5.
print residue.
expect Fail.

// 38
// explicit variables to be fixed...
infer[@arr_en]  base::AsegNE<x,y> |- base::Aseg<x,y-1> * base::Elem<y-1,_>.
print residue.
expect Valid.

// // 39
// infer[@arr_en]  base::AsegNE<x,y> |- exists u: base::Aseg<x,y-1> * base::Elem<y-1,u>.
// print residue.
// expect Valid.

// // 40
// infer[@arr_en]  base::AsegNE<x,y> |- [a] base::AsegNE<x,a> * base::Aseg<a,y>.
// print residue.
// expect Valid.

// // 41
// infer[@arr_en]  base::AsegNE<x,y> |- [a] base::AsegNE<x,a> * base::AsegNE<a,y>.
// print residue.
// expect Fail.

// 42
infer[@arr_en] base::Elem<t114,t115>*base::AsegNE<t116,t117>*base::AsegNE<t118,t119>& t114=7 & t116=8 & t117=12 & t118=12 & t119=15 & t120=7 & t121=15 |- base::AsegNE<t120,t121>&true.
print residue.
expect Valid.

// 43
infer[@arr_en] base::Elem<a,t>*base::AsegNE<b,c> & a=7 & b=8 & c=12  |- base::AsegNE<a,c>.
print residue.
expect Valid.
*/
