pred_prim Aseg<start:int, end:int>.
pred_prim AsegNE<start:int, end:int>.
pred_prim Elem<start:int,value:int>.

// 1
infer[@arr_ba]  base::AsegNE<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.


// 2
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<1,2>.
print residue.
expect Valid.


// 3
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<1,3>.
print residue.
expect Fail.


// 4
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<5,2>.
print residue.
expect Fail.


// 5
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<5,3>.
print residue.
expect Fail.


// 6
infer[@arr_ba]  base::Elem<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 7
infer[@arr_ba]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 8
infer[@arr_ba]  base::AsegNE<1,2>  |- base::AsegNE<a,b>.
print residue.
expect Fail.

// 9
infer[@arr_ba]  base::AsegNE<1,2>  |- base::AsegNE<1,b>.
print residue.
expect Fail.

// 10
infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<1,b>.
print residue.
expect Fail.

// 11
infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<a,b>.
print residue.
expect Fail.

// 12
infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<a,2>.
print residue.
expect Fail.

// 13
infer[@arr_ba]  base::AsegNE<a,2>  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 14
infer[@arr_ba]  base::Aseg<a,2>  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 15
infer[@arr_ba]  base::Aseg<a,b> & b=2  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 16
infer[@arr_ba]  base::AsegNE<a,b> & b=2  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 17
infer[@arr_ba]  base::Aseg<a,b>   |- base::Aseg<a,2>.
print residue.
expect Fail.

// 18
infer[@arr_ba]  base::Aseg<a,b>   |- exists c: base::Aseg<a,2>.
print residue.
expect Fail.

// 19
infer[@arr_ba]  base::AsegNE<a,b>   |- exists c: base::AsegNE<a,c>.
print residue.
expect Valid.

// 20
infer[@arr_ba]  base::AsegNE<a,b>    |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Fail.

//   A |- B  --> F
// -------------------------------
// ex V. (A |- B) --> ex V. F

