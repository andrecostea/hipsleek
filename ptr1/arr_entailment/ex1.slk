// README:

//       Use @arr_ba for bi-abduction
//       Use @arr_en for classical entailment.

//       In classical entailment, by default, it will just return TRUE or FALSE.
//       To generate pre-condition instead of just TRUE or FALSE, run with "--arr-pre".
//       For example, ../../sleek ex1.slk --arr-pre
//       To print all the intermediate steps, run with --verbose-arr
      
pred_prim Aseg<start:int, end:int>.
pred_prim AsegNE<start:int, end:int>.
pred_prim Elem<start:int,value:int>.


// 1
infer[@arr_en]  base::AsegNE<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 2
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,2>.
print residue.
expect Valid.


// 3
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<1,3>.
print residue.
expect Fail.


// 4
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<5,2>.
print residue.
expect Fail.


// 5
infer[@arr_en]  base::Elem<1,2>  |- base::Elem<5,3>.
print residue.
expect Fail.


// 6
infer[@arr_en]  base::Elem<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 7
infer[@arr_en]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 8
infer[@arr_en]  base::AsegNE<1,2>  |- base::AsegNE<a,b>.
print residue.
expect Fail.

// 9
infer[@arr_en]  base::AsegNE<1,2>  |- base::AsegNE<1,b>.
print residue.
expect Fail.

// 10
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<1,b>.
print residue.
expect Fail.

// 11
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<a,b>.
print residue.
expect Fail.

// 12
infer[@arr_en]  base::Aseg<1,2>  |- base::Aseg<a,2>.
print residue.
expect Fail.

// 13
infer[@arr_en]  base::AsegNE<a,2>  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 14
infer[@arr_en]  base::Aseg<a,2>  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 15
infer[@arr_en]  base::Aseg<a,b> & b=2  |- base::Aseg<a,2>.
print residue.
expect Valid.

// 16
infer[@arr_en]  base::AsegNE<a,b> & b=2  |- base::AsegNE<a,2>.
print residue.
expect Valid.

// 17
infer[@arr_en]  base::Aseg<a,b>   |- base::Aseg<a,2>.
print residue.
expect Fail.

// 18
infer[@arr_en]  base::Aseg<a,b>   |- exists c: base::Aseg<a,2>.
print residue.
expect Fail.

// 19
infer[@arr_en]  base::AsegNE<a,b>   |- exists c: base::AsegNE<a,c>.
print residue.
expect Valid.

// 20
infer[@arr_en]  base::AsegNE<a,b>    |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Fail.

//   A |- B  --> F
// -------------------------------
// ex V. (A |- B) --> ex V. F



// 21
infer[@arr_en]  base::AsegNE<a,b> & a=1 & b=2  |- base::AsegNE<a,c>.
print residue.
expect Fail.

// 22
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=2  |- base::AsegNE<1,c>.
print residue.
expect Fail.

// 23
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<8,10>.
print residue.
expect Valid.

// 24
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<8,11>.
print residue.
expect Fail.

// 25
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<3,c> * base::AsegNE<8,11>.
print residue.
expect Fail.

// 26
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c,10>.
print residue.
expect Valid.

// 27
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c,11>.
print residue.
expect Fail.

// 28
infer[@arr_en]  base::AsegNE<a,b> &  a=1 & b=10  |- exists c: base::AsegNE<1,c> * base::AsegNE<c+2,10>.
print residue.
expect Fail.

// 29
infer[@arr_en]  base::AsegNE<a,a+2>  |- exists u: base::Elem<a,u> * base::Elem<a+1,u>.
print residue.
expect Fail.

// 30
infer[@arr_en]  base::AsegNE<a,a+2>  |- exists u1,u2: base::Elem<a,u1> * base::Elem<a+1,u2>.
print residue.
expect Valid.

// Related to existential
// 31
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b>.
print residue.
expect Valid.

// 32
infer[@arr_en]  base::AsegNE<1,2> |- exists b: base::Aseg<1,b> & b>2.
print residue.
expect Fail.

// 33
infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b: base::Aseg<1,b> * base::Elem<3,y>.
print residue.
expect Fail.

// 34
infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b,y: base::Aseg<1,b> * base::Elem<3,y>.
print residue.
expect Valid.

// 35
infer[@arr_en]  base::AsegNE<1,2> * base::Elem<3,x> |- exists b: base::Aseg<1,b> * base::Elem<c,x>.
print residue.
expect Fail.

// 36
infer[@arr_en]  base::AsegNE<a,a+2> |- exists u,c: base::Elem<a,u> * base::Elem<a+1,u>.
print residue.
expect Fail.

// 37
infer[@arr_en]  base::AsegNE<1,2> & a>3 |- exists c: base::AsegNE<1,c> & a=5.
print residue.
expect Fail.

// 38
infer[@arr_en]  base::AsegNE<x,y> |- base::Aseg<x,y-1> * base::Elem<y-1,_>.
print residue.
expect Valid.

// 39
infer[@arr_en]  base::AsegNE<x,y> |- exists u: base::Aseg<x,y-1> * base::Elem<y-1,u>.
print residue.
expect Valid.

// 40
infer[@arr_en]  base::AsegNE<x,y> |- [a] base::AsegNE<x,a> * base::Aseg<a,y>.
print residue.
expect Valid.

// 41
infer[@arr_en]  base::AsegNE<x,y> |- [a] base::AsegNE<x,a> * base::AsegNE<a,y>.
print residue.
expect Fail.
