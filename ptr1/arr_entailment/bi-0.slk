pred_prim Aseg<start:int, end:int>.
pred_prim AsegNE<start:int, end:int>.
pred_prim Elem<start:int,value:int>.

// 1
infer[@arr_ba]  base::AsegNE<a,b> & a=1 & b=2 |- base::AsegNE<a,b>.
print residue.
expect Valid.



/*
// 2
infer[@arr_ba]  base::Elem<a,b> & a=1 & b=2  |- base::Elem<a,b>.
print residue.
expect Valid.

// 3
infer[@arr_ba]  base::Elem<a,b> & a=1 & b=2  |- Emp.
print residue.
expect Valid.

// 4
infer[@arr_ba]  a=1 & b=2  |- base::Elem<a,b>.
print residue.
expect Valid.

// 5
infer[@arr_ba]  base::Elem<c,d> & a=1 & b=2 & c=3 & d=4  |- base::Elem<a,b>.
print residue.
expect Valid.

// 6
infer[@arr_ba]  base::AsegNE<c,d> & c=3 & d=4  |- Emp.
print residue.
expect Valid.

// 7
infer[@arr_ba]   c=3 & d=4  |- base::AsegNE<c,d>.
print residue.
expect Valid.

// 8
infer[@arr_ba]   base::AsegNE<a,b> & a=1 & b=2 & c=3 & d=4  |- base::AsegNE<c,d>.
print residue.
expect Valid.

*/



// 9
infer[@arr_ba]  base::Elem<a,b>  |- base::Elem<c,d> .
print residue.
expect Valid.

/*
// 10
infer[@arr_ba]  base::Elem<a,b> & a>c |- base::Elem<c,b> & a=c.
print residue.
expect Valid.


// 11
infer[@arr_ba]   base::Aseg<a,b> & a=1 & b=2  |- base::Aseg<a,b>.
print residue.
expect Valid.



*/