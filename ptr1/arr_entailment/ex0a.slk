// README:

//       Use @arr_ba for bi-abduction
//       Use @arr_en for classical entailment.
// 	 Use @arr_enfr for entailment with frame inference

//       In classical entailment, by default, it will just return TRUE or FALSE.
//       To generate pre-condition instead of just TRUE or FALSE, run with "--arr-pre".
//       For example, ../../sleek ex1.slk --arr-pre
//       To print all the intermediate steps, run with --verbose-arr
      
pred_prim Aseg<start:int, end:int>.
pred_prim AsegNE<start:int, end:int>.
pred_prim Elem<start:int,value:int>.



//(1)
infer[@arr_en]  base::Elem<a,1>*base::Elem<a+1,2> |- exists b: base::Elem<b,2> * base::Elem<b+1,1>.
print residue.
expect Valid.

//(2) // incomplete
infer[@arr_en]  base::Elem<a,1>*base::Elem<a+1,2> |- exists b,c: base::Elem<b,2> * base::Elem<c,1>.
print residue.
expect Valid.
//  inferred pure: [false]


//(3)
infer[@arr_en]  base::Elem<a,1>*base::Elem<a+1,2> |- exists b: base::AsegNE<b,b+2>.
print residue.
expect Valid.

//(4)
infer[@arr_en]  base::Elem<a,1>*base::Elem<a+1,2> |- exists b: base::AsegNE<b,b+3>.
print residue.
expect Fail.

//(5)
infer[@arr_en]  base::Elem<a,1>*base::Elem<a+1,2> |- exists b,c: base::AsegNE<b,c>.
print residue.
expect Valid.

//(5)
infer[@arr_en]  base::Elem<a,1>*base::Elem<a+2,2> |- exists b,c: base::AsegNE<b,c>.
print residue.
expect Valid.


//(5)
infer[@arr_en]  base::AsegNE<a,a+5>*base::Elem<a+5,2> |- exists b,c: base::AsegNE<b,c>.
print residue.
expect Valid.

//(5)
infer[@arr_en]  base::AsegNE<a,a+4>*base::Elem<a+5,2> |- exists b,c: base::AsegNE<b,c>.
print residue.
expect Fail.


//(5)
infer[@arr_en]  base::AsegNE<a,a+6> |- base::AsegNE<a,a+5>*base::Elem<a+5,_>.
print residue.
expect Valid.


//(5)
infer[@arr_en]  base::AsegNE<a,a+6> |- base::AsegNE<a,a+5>*base::Elem<a+5,u> &u>8.
print residue.
expect Fail.


// // 1
// infer[@arr_ba]  base::AsegNE<a,b> & a=1 & b=2 |- base::AsegNE<a,b>.
// print residue.
// expect Valid.

// // 2
// infer[@arr_ba]  base::Elem<a,b> & a=1 & b=2  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// // 3
// infer[@arr_ba]  base::Elem<a,b> & a=1 & b=2  |- Emp.
// print residue.
// expect Valid.

// // 4
// infer[@arr_ba]  a=1 & b=2  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// // 5
// infer[@arr_ba]  base::Elem<c,d> & a=1 & b=2 & c=3 & d=4  |- base::Elem<a,b>.
// print residue.
// expect Valid.

// // 6
// infer[@arr_ba]  base::AsegNE<c,d> & c=3 & d=4  |- Emp.
// print residue.
// expect Valid.















/*
// 2
infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<1,2>.
print residue.
expect Valid.





// 3
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<1,3>.
print residue.
expect Fail.


// 4
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<5,2>.
print residue.
expect Fail.


// 5
infer[@arr_ba]  base::Elem<1,2>  |- base::Elem<5,3>.
print residue.
expect Fail.


// 6
infer[@arr_ba]  base::Elem<1,2>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 7
infer[@arr_ba]  base::Elem<1,2> * base::Elem<2,2>  |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 8
infer[@arr_ba]  base::AsegNE<1,2>  |- base::AsegNE<a,b>.
print residue.
expect Fail.



infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<1,b>.
print residue.
expect Fail.

infer[@arr_ba]  base::Aseg<1,2>  |- base::Aseg<a,2>.
print residue.
expect Fail.

infer[@arr_ba]  base::Aseg<a,2>  |- base::Aseg<a,2>.
print residue.
expect Valid.

infer[@arr_ba]  base::Aseg<a,b> & b=2  |- base::Aseg<a,2>.
print residue.
expect Valid.

infer[@arr_ba]  base::Aseg<a,b>   |- base::Aseg<a,2>.
print residue.
expect Fail.

infer[@arr_ba]  base::Aseg<a,b>   |- exists c: base::Aseg<a,2>.
print residue.
expect Fail.

infer[@arr_ba]  base::AsegNE<a,b>   |- exists c: base::AsegNE<a,c>.
print residue.
expect Valid.

//16
infer[@arr_ba]  base::AsegNE<a,b>    |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Fail.

//   A |- B  --> F
// -------------------------------
// ex V. (A |- B) --> ex V. F

//17
infer[@arr_ba]  base::AsegNE<a,b> & a+1<b |- exists c1,c2: base::AsegNE<a,c1> * base::AsegNE<c2,b>.
print residue.
expect Valid.

//18
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v: base::Elem<1,v>.
print residue.
expect Valid.

//19
infer[@arr_ba]  base::AsegNE<1,2>  |- base::Elem<1,v>.
print residue.
expect Fail.

//20
infer[@arr_ba]  base::Elem<1,v>  |- base::AsegNE<1,2>.
print residue.
expect Valid.

// 21
infer[@arr_ba]  base::Elem<1,v>  |- base::Elem<1,3>.
print residue.
expect Fail.

// 22
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v: base::Elem<1,v> & v>0.
print residue.
expect Fail.

// 23
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v: base::Elem<1,v> & v=v.
print residue.
expect Valid.

// 24
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v,x: base::Elem<x,v> & v=v.
print residue.
expect Valid.

// 25
infer[@arr_ba]  base::AsegNE<1,2>  |- exists v,x: base::Elem<x,v> & v=v & x>1.
print residue.
expect Fail.

// 26
infer[@arr_ba]  base::AsegNE<1,3>  |- exists v1,v2,x,y: base::Elem<x,v1> * base::Elem<y,v2> & x>1.
print residue.
expect Valid.

// 27
infer[@arr_ba]  base::AsegNE<1,3>  |- exists v1,v2,x,y: base::Elem<x,v1> * base::Elem<y,v2> & x>5.
print residue.
expect Fail.

// 28
infer[@arr_ba]  base::AsegNE<1,2>  |- base::Elem<1,v>.
print residue.
expect Fail.

// 29
infer[@arr_ba]  base::AsegNE<1,2> *  base::Elem<2,v> |- base::AsegNE<1,3>.
print residue.
expect Valid.

// 30
infer[@arr_ba]  base::AsegNE<1,2> *  base::Elem<2,v> |- exists a,b: base::AsegNE<a,a+2> .
print residue.
expect Valid.

*/ 




