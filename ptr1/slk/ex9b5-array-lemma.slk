data arrI {
  int val;
}.

pred arr_seg<i,n> == i=n & i>=0 & self!=null
  or x::arrI<_>*self::arr_seg<i+1,n> & x=self+i & i>=0
  inv n>=i & i>=0 & self!=null.

lemma_unsafe self::arr_seg<i,n> & i<m<=n 
     -> self::arr_seg<i,m>*self::arr_seg<m,n> .


// There is no Univ and it fails
checkentail xx::arr_seg<m,n> & i<m<=n & i<n |- xx::arr_seg<i+1,n>.
expect Fail.

checkentail xx::arr_seg<m,n> & i<m<=n & i<n & Univ(m) & i>=0 |- xx::arr_seg<i+1,n>.
expect Valid.

checkentail xx::arr_seg<m,n> & i<m<=n & i+1<n & Univ(m) & i>=0|- xx::arr_seg<i+1,n>.
expect Valid.

//(4)
checkentail xx::arr_seg<i,n> & i<n |- xx::arr_seg<i+1,n>.
expect Valid.

//(5)
checkentail xx::arr_seg<i,n> & i+1<n & i>=0 |- xx::arr_seg<i+1,n>.
expect Valid.

checkentail xx::arr_seg<i,n> & i<n |- xx::arr_seg<i+2,n>.
expect Fail.

//(7)
checkentail xx::arr_seg<i,n> & i+1<n |- xx::arr_seg<i+2,n>.
expect Valid.

checkentail xx::arr_seg<i,n> & i<n |- xx::arr_seg<i+3,n>.
expect Fail.

checkentail xx::arr_seg<i,m> * xx::arr_seg<m,n> & i+1<n & i<m<=n & Univ(m) |- xx::arr_seg<i+1,n>.
expect Fail.

//(10)
checkentail xx::arr_seg<i,m>*xx::arr_seg<m,n> & i<m<=n & i+1<n & Univ(m) & i>=0 |- xx::arr_seg<i+1,n>.
expect Valid.




