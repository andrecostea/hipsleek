data arrI {
  int val;
}.

pred arr_seg<i,n> == i=n & i>=0 & self!=null
  or x::arrI<_>*self::arr_seg<i+1,n> & x=self+i & i>=0
  inv n>=i & i>=0 & self!=null.

/*
lemma_unsafe self::arr_seg<i,n> & i<m<=n 
     -> self::arr_seg<i,m>*self::arr_seg<m,n> .
*/

//(10)
checkentail xx::arr_seg<i,mmm>*xx::arr_seg<mmm,n> & i<mmm<=n & i+1<n & Univ(mmm) & i>=0 |- xx::arr_seg<i+1,n>.
expect Valid.


/*
checkentail xx::arr_seg<i,m>*xx::arr_seg<m2,n> & i<m<=n & i+1<n & Univ(m) & i>=0 & m2=m & Univ(m2) |- xx::arr_seg<i+1,n>.
expect Valid.
*/

/* 
# ex9b5d.slk


How about hip? Is that being preserved too?

      (* preserving exists is important for ptr1/slk/ex9b5d.slk *)
      let sv_exists = CP.diff_svl svl2 svl in

checkentail xx::arr_seg<i,mmm>*xx::arr_seg<mmm,n> & i<mmm<=n & i+1<n & Univ(mmm) & i>=0 |- xx::arr_seg<i+1,n>.
expect Valid.

Preserved mmm_51 as existential:

meta_to_formula@1 EXIT: (exists mmm_51: xx::arr_seg<i,mmm>@M * xx::arr_seg<mmm_51,n>@M&
i<mmm & mmm<=n & (1+i)<n & Univ(mmm) & 0<=i & mmm_51=mmm&

*/