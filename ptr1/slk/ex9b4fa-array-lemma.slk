data arrI {
  int val;
}.

pred arr_seg<i,n> == i=n & i>=0 & self!=null
  or x::arrI<_>*self::arr_seg<i+1,n> & x=self+i & i>=0
  inv n>=i & i>=0 & self!=null.





// why i need to be typed?
checkentail  (i:int)+1<n & Univ(m) & m=i+3 & k=n & k>=0
    |- xx::arr_seg<k,n>.
print residue.
expect Fail.

//(3)
checkentail xx::arr_seg<i,m>*
  xx::arr_seg<m,n> & i<m<=n & i+1<n & Univ(m) 
    |- xx::arr_seg<i+3,n>.
print residue.
expect Fail.

checkentail //i<m<=n & i+1<n & 
    k>=0 & k=n & xx!=null
    |- xx::arr_seg<k,n>.
print residue.
expect Valid.

checkentail (i:int)+1<n & Univ(m) & m=i+3 & xx!=null & i>=0
    |- xx::arr_seg<i+3,n>.
print residue.
expect Fail.

checkentail (i:int)+1<n & Univ(m) & m=i+3 & xx!=null & i>=0 & i+3=n
    |- xx::arr_seg<i+3,n>.
print residue.
expect Valid.


/*
# ex9b4fa.slk

// why i need to be typed?
checkentail  (i:int)+1<n & Univ(m) & m=i+3 & k=n
    |- xx::arr_seg<k,n>.
print residue.
expect Fail.

checkentail xx::arr_seg<i,m>*
  xx::arr_seg<m,n> & i<m<=n & i+1<n & Univ(m)
    |- xx::arr_seg<i+3,n>.
print residue.
expect Fail.

# Why did base-case unfold lead to a univ instantiation?

# perhaps it isn't quite right to do univ inst for every implication
but to control where univ_inst is done at check_entail empty_rhs?


Entail 1: Valid. 
Residue:
 <1>xx::arr_seg<i,m>@M&n=i+3 & i<m & m<=n & (1+i)<n & Univ(m) & m_51=m & 
                       xx!=null & 0<=m_51 & m_51=n&{FLOW,(20,21)=__norm#E}[]
[[ SEARCH ==>  COND ==>  BaseCaseUnfold ==>  SEARCH ==>  COND ==>  BaseCaseFold]]


*/
