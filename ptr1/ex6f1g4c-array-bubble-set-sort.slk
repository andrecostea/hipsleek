data arrI {
  int val;
}.

pred arr_seg<i,n> == 
 case {
   i=n -> [] i=n & i>=0 ;
   i!=n -> []  x::arrI<v>*self::arr_seg<i+1,n> & x=self+i & i>=0 ;
 }  inv n>=i & i>=0.

/*
pred arr_sorted<i,n,S> == i=n & i>=0 & S={}
  or x::arrI<v>*self::arr_sorted<i+1,n,S2> & x=self+i & i>=0 & S=union({v},S2) & forall(a:a notin S2 | v<=a)
  inv n>=i & i>=0.
*/

/*
lemma_safe self::arr_seg<i,n,S> & i<=m & m<=n -> 
  self::arr_seg<i,m,S1>*self::arr_seg<m,n,S2> & S=union(S1,S2).
*/

lemma_unsafe self::arr_seg<i,n> <- 
  self::arr_seg<i,m>*self::arr_seg<m,n> & i<=m & m<=n.

//lemma_safe  self::arr_sorted<i,n,S> <- self::arr_seg<i,n,S> & (i>=n-1).

//lemma_safe self::arr_seg<i,n,S> <- self::arr_sorted<i,n,S>.

/*
checkentail_exact x::arr_seg<i,m>*x::arr_seg<m,n> & i<=m & m<=n
  |- x::arr_seg<i,n>.

checkentail_exact x::arr_seg<m,n> & i<=m & m<=n & i=m & i>=0
  |- x::arr_seg<i,n>.
print residue.
*/

/*
checkentail_exact x1::arrI<v>*x::arr_seg<i+1,m> *x::arr_seg<m,n> 
                     & i<=m & m<=n & x1=x+i & i>=0
  |- x::arr_seg<i,n>.
print residue.
*/

checkentail_exact //x1::arrI<v>*
     x::arr_seg<i+1,m> *x::arr_seg<m,n> 
                     & i<=m & m<=n & x1=x+i & i>=0 & i!=n
  |- //x2::arrI<_> * 
     x::arr_seg<i+1,n> & x2=x+1 .
print residue.

/*
# ex6f1g4c.slk

# inductive proof by hand failed..

# need to improve pairing and lemma trigger ..

!!! **context.ml#3671:compute_action (steps) :
 ### RHS Cand :[ x::arr_seg<flted_47_134,n_133>@M]
 ### action :
 COND =>[
  Prio:1
  SEARCH =>[
   Prio:1
   COND =>[
    Prio:1
    Match =>
      LHS: x::arr_seg<flted_45_95,m>@M
      RHS: x::arr_seg<flted_47_134,n_133>@M;
    Prio:3
    BaseCaseUnfold =>
      LHS: x::arr_seg<flted_45_95,m>@M
      RHS: x::arr_seg<flted_47_134,n_133>@M
    ];
    Prio:1
    (Lemma 0<== lem_12) =>
      LHS: x::arr_seg<flted_45_95,m>@M
      RHS: x::arr_seg<flted_47_134,n_133>@M
    ];
   Prio:1
   SEARCH =>[
    Prio:1
    COND =>[
     Prio:1
     Match =>
       LHS: x::arr_seg<m_96,n>@M
       RHS: x::arr_seg<flted_47_134,n_133>@M;
     Prio:3
     BaseCaseUnfold =>
       LHS: x::arr_seg<m_96,n>@M
       RHS: x::arr_seg<flted_47_134,n_133>@M
     ];
     Prio:1
     (Lemma 0<== lem_12) =>
       LHS: x::arr_seg<m_96,n>@M
       RHS: x::arr_seg<flted_47_134,n_133>@M
     ]
    ]


*/