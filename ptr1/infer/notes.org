* Question... How the relation U is built?
-- The xpure of the matched heap will be added later.
(==solver.ml#8083==)
heap_entail_empty_rhs_heap#1@35@34@33@32@31@30@29@28@27@26@25@24@23@22@21
heap_entail_empty_rhs_heap#1 inp1 :es:
  emp&m<n & U(i,j,m,n)&{FLOW,(20,21)=__norm#E}[]
 es_evars: [m_68; flted_18_69]
 es_gen_impl_vars(E): []
 es_heap: a::arr_seg<i,j>@M
 es_rhs_eqset: [i:m; i:m]
 es_subst (from,to): []:[]
 es_trace:  SEARCH ==>  COND ==>  Match(a,a)
 es_infer_vars_rel: [U]
heap_entail_empty_rhs_heap#1 inp2 :lhs-base-f: emp&m<n & U(i,j,m,n)&{FLOW,(20,21)=__norm#E}[]
heap_entail_empty_rhs_heap#1 inp3 :rhs-mix: j=1+m & i=m
heap_entail_empty_rhs_heap#1 inp4 :is_folding:false
heap_entail_empty_rhs_heap#1@35 EXIT: [ emp&U(i,j,m,n) & i<n & ((0-a)+1)<=i & 0<=i & m=i & j=i+1&
{FLOW,(20,21)=__norm#E}[]
  es_evars: [m_68; flted_18_69]
  es_gen_impl_vars(E): []
  es_infer_rel: [RELASS [U]: ( U(i,j,m,n)) -->  (j=i | (i<j & n<=m) | (j=i+1 & m=i));
                 RELASS [U]: ( U(i,j,m,n)) -->  (j!=i | m>=n | 0>i)]
  es_heap: a::arr_seg<i,j>@M
  es_rhs_eqset: [i:m; i:m]
  es_subst (from,to): []:[]
  es_trace:  SEARCH ==>  COND ==>  Match(a,a)
  es_infer_vars_rel: [U]
  es_infer_rel: [RELASS [U]: ( U(i,j,m,n)) -->  (j=i | (i<j & n<=m) | (j=i+1 & m=i));
                 RELASS [U]: ( U(i,j,m,n)) -->  (j!=i | m>=n | 0>i)]]


* simple1
  - program
  void simple1(int arr[],int m,int v){
    arr[m] = v;
    return;
  }
  - infer
    infer[U] arr::arr_seg<i,j> & U(i,j,m)|- arr::arr_seg<m,m+1>.
  - result
    i<=m && j>=m+1 && i<=j
* simple init
  - program
  void init(int arr[],int m,int n){
  // requires arr::arr_seg<i,j> & U(i,j,m,n)
     if(m<n){
       // arr::arr_seg<i,j> & U(i,j,m,n) & m>n |- arr::arr_seg<m,m+1>
       arr[m] = 5;
       // arr::arr_seg<i,j> & U(i,j,m,n) |- arr::arr_seg<i',j'> & U(i',j',m+1,n)
       init(arr,m+1,n);
     }
  }
  - infer
    U(i,j,m,n) & m<n  --> i<=m && j>=m+1 && i<=j
    U(i,j,m,n) & m<n  --> i<=i' && j>=j' && U(i',j',m+1,n)

    i=k1*m+k2*n+k3 && j=k4*m+k5*n+k6 & m<n --> i<=m && j>=m+1 && i<=j
    i=k1*m+k2*n+k3 && j=k4*m+k5*n+k6 & m<n --> ex i',j': i<=i' && j>=j'&& i'=k1*(m+1)+k2*n+k3 && j'=k4*(m+1)+k5*n+k6
