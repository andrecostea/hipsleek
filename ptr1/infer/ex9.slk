data arrI
{
 int value;
     }.

pred arr_seg<i,n> == i=n & i>=0
    or x::arrI<_>*self::arr_seg<i+1,n> & x=self+i & i>=0
inv n>=i & i>=0.


//lemma self::arr_seg<i,n> & i<=a & n>=b & a<=b -> self::arr_seg<a,b>.
lemma self::arr_seg<x,y> <- self::arr_seg<a,b>  & x>=a & y<=b & x<=y.

relation U(int u1,int u2, int u3, int u4).
relation U2(int u1,int u2).

infer[U] a::arr_seg<m,n> & U(m,n,i,j)|- a::arr_seg<i,j>. 
print residue.

infer[U] a::arr_seg<m,n> & U(m,n,i,j) & m<n|- a::arr_seg<i,j>. 
print residue.

infer[U] a::arr_seg<i,j> & U(m,n,i,j) & m<n |- a::arr_seg<i,j> & U(m+1,n,i,j). 
print residue.
