data arrI {
  int val;
}.

pred arr_bnd<i,n,m> == i=n & i>=0
  or x::arrI<v>*self::arr_bnd<i+1,n,m> & x=self+i & i>=0 & v<=m
  inv n>=i & i>=0.

pred arr_seg<i,n> == i=n & n>=0
  or x::arrI<v>*self::arr_seg<i+1,n> & x=self+i & i>=0
  inv n>=i & i >=0. 

pred arr_sorted<i,n,S> == i=n & i>=0 & S={}
  or x::arrI<v> * self::arr_sorted<i+1,n,S2> & x=self+i & i>=0 & S=union({v},S2)
     & forall(w:v notin S2 | v<=w)
     inv n>=i & i>=0.

lemma_unsafe self::arr_sorted<i,n,S1> & i<=m & m<=n
   <-> self::arr_sorted<i,m,S2>*self::arr_sorted<m,n,S3> & S1=union(S2,S3).

checkentail x::arr_sorted<i,n-1,S1> * n::arrI<v1> * f::arrI<p1> * k::arr<p2> & (p1 < v1 & x > 0 & p2 > v1 & j-k=1 & l+j+1 = i1 & i1::arrI<v> & m=i1+(n-1-k) & y::arr_seg<i,n,S2> & y=m) or ((m::arrI<p3>) & v > p3 & m = i+(n-1) & y::arr_seg<i,n,S3> & y=m)
or (n::arrI<p4> & n < p4 & n=i & y::arr_seg<i,n,S4> & y=i-1 & y::arrI<n>) |- y::arr_sorted<i,n,S3>. 

//No idea if this works. The idea is to inductively assume a sorted array from index i to n-1 and then create a new array such that it is sorted from i to n. There are three cases here, either the value of index n is between two elelements, smaller than every element or larger than every element.
