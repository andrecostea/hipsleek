/*
- if lim x(n)  -> +oo
	checkentail true |- (exists e: forall (x: (x > e) -> Terminate(x))))
	==
	checkentail true |- (exists e: forall (x: (x <= e) | Terminate(x)))))

- if lim x(n)  -> -oo
	checkentail true |- (exists e: forall (x: (x < e) -> Terminate(x))))
	==
	checkentail true |- (exists e: forall (x: (x >= e) | Terminate(x))))
*/


/*
EXAMPLE 1:
	x > 0;
	while (1/x > 0)
		x = x * 2;
		
analysis:
	x(n) > 0; lim x(n) -> +oo;
	
*/

// check LOOP; loop condition is (x > 0)
checkentail x > 0.0 |- 1/x > 0.0 . // if valid then LOOP				// expect: Valid

// check TERMINATION; termination condition is (x <= 0)
checkentail true |- (exists e: forall (x: (x <= e) | (1/x <= 0.0))).	// expect: Fail

/*
EXAMPLE 2:
	x > 0;
	while (1/x > 0.001)
		x = x * 2;
		
analysis:
	x(n) > 0; lim x(n) -> +oo;
	
*/

// check LOOP; loop condition is (x > 0.001)
checkentail x > 0.0 |- 1/x > 0.001. // if valid then LOOP				// expect: Fail

// check TERMINATION; termination condition is (x <= 0.001)
checkentail true |- (exists e: forall (x: (x <= e) | (1/x <= 0.001))).	// expect: Valid
