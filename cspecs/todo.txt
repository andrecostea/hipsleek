========================================================================
# ex5b-inf-err-with-loop.ss
*************************************
******pure relation assumption 1 *******
*************************************
[RELASS [P2]: ( P2(n) & n=0) -->  false,
RELASS [P2]: ( P2(n)) -->  n!=0,
RELASS [P2]: ( n!=0 & P2(n)) -->  true,
RELASS [P2]: ( n!=0 & P2(n)) -->  true,
RELASS [P2]: ( P2(n)) -->  n!=0]

Why are there duplicate relational assumptions?
Answer:
Fault: (==) cannot to be used to remove duplicate:
Solution: 
let infer_rel_eq (rel_cat1,lhs1,rhs1) (rel_cat2,lhs2,rhs2) = (rel_cat1 == rel_cat2) && (CP.equalFormula lhs1 lhs2) && (CP.equalFormula rhs1 rhs2)
===========================================================
RELASS [P2]: ( P2(n) & n=0) -->  false,
RELASS [P2]: ( P2(n)) -->  n!=0,
RELASS [P2]: ( P2(n)) -->  n!=0

RELASS [P2]: ( n!=0 & P2(n)) -->  true,
RELASS [P2]: ( n!=0 & P2(n)) -->  true,

Why are trivial relational assumptions collected?
RELASS [P2]: ( n!=0 & P2(n)) -->  true
========================================================================
# ex5-inf-err-with-loop.ss

Segmentation fault (core dumped)

!!! PROBLEM with fix-point calculation
ExceptionFailure("tl")Occurred!

========================================================================
# ex6-inf-err-with-loop.ss

!!! **pi.ml#894:>>REL POST :  true
!!! **pi.ml#895:>>POST:  true
!!! **pi.ml#896:>>REL PRE :  P2(n)
!!! **pi.ml#897:>>PRE :  0>=(1+n)
!!! proc_specs:
[ EInfer [P2]
   EBase 
     emp&P2(n) & MayLoop[]&{FLOW,(4,5)=__norm#E}[]
     EAssume 
       emp&0<=n&{FLOW,(6,10)=__Error#E}[]
       struct:EBase 
                emp&0<=n&{FLOW,(6,10)=__Error#E}[]]
Pre/Post Inference result:
foo$int
 EInfer [P2]
   EBase 
     emp&n!=0 & MayLoop[]&{FLOW,(4,5)=__norm#E}[]
         ^^^^ Why n!=0 is substituted in the result spec?
     EAssume 
       emp&{FLOW,(6,10)=__Error#E}[]
       ^^^ Why the given postcondition n>=0 disappears?
       struct:EBase 
                emp&{FLOW,(6,10)=__Error#E}[]
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
