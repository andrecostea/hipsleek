# ex1-get-tail.ss: FIXED

node tail_fn(node x)
  infer [P,Q]
  requires P(x) 
  ensures Q(x,res);
{ 
  return x.next;
}

What is flow(4,5) - norm?
Can we print the inferred pre/post spec?
Currently the int value is not preserved.
Is there a way to preserve it or do we need @L?

!!! shape inference for flow:(4,5)
*********************************************************
*******relational definition (flow= (4,5))********
*********************************************************
[ P(x_1364) ::=  x_1364::node<val_15_1365,DP_DP_HP_1361>,
 Q(x_1366,res_1367) ::=  x_1366::node<val_15_1368,res_1367>&res_1367=DP_DP_HP_1361]

# ex1-get-tail.ss: FIXED

Loc: Below is incorrect as there is an (exists val_14_1359: ..)
in the post. Hence, it is a diff var in the post. I think, currently
only DP_ vars will connect across pre/post.

[ P(x_1364) ::= x_1364::node<val_14_1359,DP_DP_HP_1361>(4,5),
 Q(x_1365,res_1366) ::= x_1365::node<val_14_1359,res_1366>&res_1366=DP_DP_HP_1361(4,5)]

!!! INFERRED SHAPE SPEC: EBase exists (Expl)[](Impl)[val_14_1359](ex)[]x::node<val_14_1359,DP_DP_HP_1361>&
       {FLOW,(1,28)=__flow#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   (exists val_14_1359: x::node<val_14_1359,res>&
                   res=DP_DP_HP_1361&{FLOW,(4,5)=__norm#E})[]
                   Stop Omega... 66 invocations 
0 false contexts at: ()


===================================================================
# ex2-set-tail.ss: DONE

void set_tail_fn(node x,node y)
  infer [P,Q]  requires P(x,y) ensures Q(x,y);
{ 
  x.next=y;
}

Can we print simplified pre/post spec?

!!! shape inference for flow:(4,5)
*********************************************************
*******relational definition (flow= (4,5))********
*********************************************************
[ P(x_1365,y_1366) ::=  x_1365::node<val_14_1367,DP_DP_HP_1362>&y_1366=DP_DP_HP_1363,
 Q(x_1368,y_1369) ::=  x_1368::node<val_14_1370,y_1369>&y_1369=DP_DP_HP_1363]
*************************************
===================================================================
# ex2a-set-tail.ss: FIXED

void set_tail_fn(node x,node y)
  infer [@shape]  requires true ensures true;
{ 
  x.next=y;
}

Why did inference failing? Should I be using emp/emp?

******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_12,GP_13]requires (htrue) * HP_12(x,y@NI)&
truerequires emp
 ensures (htrue) * GP_13(x,y)&true{,(4,5)=__norm#E};



Context of Verification Failure: 1 File "",Line:0,Col:0

Last Proving Location: 1 File "ex2a-set-tail.ss",Line:9,Col:2

ERROR: at _0:0_0:0
Message: Expect a node or a hrel

!!! WARNING logtime exception:0.000336
Procedure set_tail_fn$node~node FAIL.(2)

Exception Failure("Expect a node or a hrel") Occurred!

===================================================================
# ex2b-set-tail-emp.ss: FIXED

How do we trigger a re-verification?
--reverify ?

However, this triggered an exception!

ExceptionInvalid_argument("List.combine")Occurred!

Error1(s) detected at main 
Stop Omega... 66 invocations caught

Exception occurred: Invalid_argument("List.combine")
Error3(s) detected at main 

-------

void set_tail_fn(node x,node y)
  infer [@shape]  requires emp ensures emp;

Seems like emp/emp is better.

!!! shape inference for flow:(4,5)
*********************************************************
*******relational definition (flow= (4,5))********
*********************************************************
[ HP_12(x_1366,y_1367) ::=  x_1366::node<val_9_1368,DP_DP_HP_1364>,
 GP_13(x_1369,y_1370) ::=  x_1369::node<val_9_1371,y_1370>]

===================================================================
# ex1-get-tail.ss

--sa-en-pure-field

For pure field, can we do a similar conversion
as dangling ptr, so that we get something like:

[ P(x_1365) ::=  x_1365::node<DP_val_1361,DP_DP_HP_1362>
 Q(x_1367,res_1368) ::=  x_1367::node<DP_val_1361,res_1368>&res_1368=DP_DP_HP_1362]


!!! shape inference for flow:(4,5)
*********************************************************
*******relational definition (flow= (4,5))********
*********************************************************
[ P(x_1365) ::=  x_1365::node<val_14_1366,DP_DP_HP_1362> * HP_1361(val_14_1359),
 Q(x_1367,res_1368) ::=  HP_1361(val_14_1359) * x_1367::node<val_14_1369,res_1368>&
res_1368=DP_DP_HP_1362]
===================================================================
# sim1-pre.ss --esl (FIXED)

void posint(int n)
  requires n>0  ensures true;

void foo(int n)
  infer [P]
  requires P(n)  ensures true;
{
  posint(n); // assert n>0 assume n>0;
}

GOT:
  
!!! proc_specs:[ EInfer [P]
   EBase emp&P(n)&{FLOW,(4,5)=__norm#E}[]
           EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                   EAssume 
                     htrue&{FLOW,(4,5)=__norm#E}[]
                     ]Stop Omega... 71 invocations 

(i) Can we print relational assumption
     P(n) --> n>=1
(ii) Why did we not replace P(n) = n>=1


id: 0; caller: []; line: 13; classic: false; kind: PRE; hec_num: 1; evars: []; infer_vars: [ P]; c_heap: emp
 checkentail emp&P(n) & n'=n&{FLOW,(4,5)=__norm#E}[]
 |-  emp&0<n'&{FLOW,(4,5)=__norm#E}[]. 
pure rel_ass: [RELASS [P]: ( P(n)) -->  1<=n]
res:  1[
   emp&P(n) & n'=n & 1<=n&{FLOW,(4,5)=__norm#E}[]
   es_infer_vars/rel/templ: [P]
   es_infer_rel: [RELASS [P]: ( P(n)) -->  1<=n]
   ]
===================================================================
# sim2-post.ss  (OK)

Correct result, but we can remove some unnecessary printing

>>>>>>>>>>>>>> NOT NEEDED
!!! proc_specs:[ EInfer [Q]
   EBase htrue&{FLOW,(4,5)=__norm#E}[]
           EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                   EAssume 
                     emp&Q(n,res)&{FLOW,(4,5)=__norm#E}[]
                     ]
<<<<<<<<<<<<<<<<<<<<<<<<<

*************************************
******pure relation assumption*******
*************************************
[RELDEFN Q: ( n+1=res) -->  Q(n,res)]
*************************************

>>>>>>>>>>>>>> NOT NEEDED
!!! constraints:[( n+1=res, Q(n,res))]
!!! bottom_up_fp:[( Q(n,res), n=res-1)]
!!! fixpoint:[( Q(n,res), n=res-1, true, true)]
*************************************
*******fixcalc of pure relation *******
*************************************
[( Q(n,res), n=res-1, true, true)]
*************************************
<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>> KEEP BELOW (what is fixpoint?)
!!! bottom_up_fp:[( Q(n,res), n=res-1)]
!!! fixpoint:[( Q(n,res), n=res-1, true, true)]
<<<<<<<<<<<<<<<<<<<<<<<<<

!!! REL POST :  Q(n,res)
!!! POST:  n=res-1
!!! REL PRE :  true
!!! PRE :  true
Post Inference result:
foo$int
 EBase htrue&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
         EAssume 
           emp&n=res-1&{FLOW,(4,5)=__norm#E}[]
===================================================================
# sim3-id.ss (FIXED)

For below:

!!! constraints:[( Q(v_int_11_1349,v_int_11_1352) & (v_int_11_1349+1)!=0 & v_int_11_1352+
1=res & n=1+v_int_11_1349, Q(n,res)),( n=0 & res=0, Q(n,res))]

Maybe better to print:
  Q(n,res) = base \/ rec_case

!!! bottom up
!!! fixcalc file name: fixcalc1.inf
!!! bottom_up_fp:[( Q(n,res), n=res & 0<=res)]
!!! fixpoint:[( Q(n,res), n=res & 0<=res, P(n), 0<=n)]

How did we get:
  P(n) = n>=0
===================================================================
# bugs-sim5-zip.ss 

Why did we have a problem with fixcalc?
It is not-recursive and should thus be trivial.
Check fixcalc first?

> It seems no fixcalc.inp file created..

!!!  Q(n,m,res) = ( res=1 & n!=0) \/ ( n=0 & res=0)
!!! bottom_up_fp:[( Q(n,m,res), ((n!=0 & res=1) | (n=0 & res=0)))]
!!! PROBLEM with fix-point calculation
ExceptionEnd_of_fileOccurred!


int zip(int n,int m)
  infer [P,Q]
  requires P(n,m) ensures Q(n,m,res);
{
  if (n==0) {
      is_zero(m);
      return 0;
  }
  else {
       is_pos(m);
       return 1;
  }
}

*************************************
******pure relation assumption*******
*************************************
[RELASS [P]: ( P(n,m)) -->  ((n!=0 & m!=0) | m=0),
RELASS [P]: ( P(n,m)) -->  ((1<=m & n!=0) | n=0),
RELDEFN Q: ( n=0 & res=0 & P(n,m)) -->  Q(n,m,res),
RELDEFN Q: ( res=1 & n!=0 & P(n,m)) -->  Q(n,m,res)]
*************************************

!!!  Q(n,m,res) = ( res=1 & n!=0) \/ ( n=0 & res=0)
!!! bottom_up_fp:[( Q(n,m,res), ((n!=0 & res=1) | (n=0 & res=0)))]
!!! PROBLEM with fix-point calculation
ExceptionEnd_of_fileOccurred!

Error1(s) detected at main 
Stop Omega... 137 invocations caught

===================================================================
# bus-sim5b.slk -debug infer.log (part FIXED)

infer [n,m] n=0 |-  m=0.
print residue.

GOT:

Residue:
 <1>emp&n=0 & ((m=0 | n!=0))&{FLOW,(4,5)=__norm#E}[]
 inferred pure: [(m=0 | n!=0)]

Pre is OK, but maybe we can simplify the residue to n=0 & m=0?


===================================================================
# sim5-zip.ss

We get pre-condition:
 EBase emp&0<=n & (((1<=m & n!=0) | n=0)) & (((n!=0 & m!=0) | m=0)) & n=m 

If we send it to Omega.simplifier (e.g. PairWiseCheck), we will get:
n=m & m>=0.

   { [n,n]: 0 <= n}

Please send this to Omega. simplifier

===================================================================
# ex21-11-zip.ss

Need to simplify pure part of pre/post..
Expect:

  {[n,m]: n <= m}

Post Inference result:
zip$node~node
 EBase exists (Expl)[](Impl)[n; m](ex)[]x::ll{}<n> * y::ll{}<m>&((m!=0 | 
       1>n)) & n<=m & MayLoop[]&{FLOW,(4,5)=__norm#E}[]
         EAssume 
           (exists r_1397: res::ll{}<r_1397>&0<=n & 0<=m & n=r_1397 & 
           r_1397<=m&{FLOW,(4,5)=__norm#E})[]
===================================================================
# bugs-ex21-ll-zip.ss

Why type error for Q relation not detected.
Should result in a failure/exception.

relation P(int n).
relation Q(int n, int m).

node zip(node x, node y)
  infer [P,Q]
  requires x::ll<n> * y::ll<m> & P(n,m)
  ensures res::ll<n> & Q(n,m,res);

===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================

