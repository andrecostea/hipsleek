data node {
  int val;
  node next;
}.

pred ll<n> == emp & self=null & n=0
  or (exists v,q: self::node<v,q>*q::ll<n-1>)
  inv n>=0.

//(1)
infer[n] x::ll<n> |- x=null.
print residue.

infer[n] x::ll<n> |- x::node<_,q>.
print residue.

infer[n] x::ll<n> |- x::node<_,q>*q::node<_,r>.
print residue.

infer[x] x::ll<n> |- x=null.
print residue.

infer[x] x::ll<n> |- x::node<_,q>.
print residue.

infer[x] x::ll<n> |- x::node<_,q>*q::node<_,r>.
print residue.

infer[x] x::ll<n> |- x!=null.
print residue.

infer[n] x::ll<n> |- x!=null.
print residue.
