Starting Omega... 
Generated SMT input :
(set-logic AUFNIA)
(declare-fun divides (Int Int) Bool)
(assert (forall (x Int) (z Int) (= (divides x z) (exists (?y Int) (product x ?y z)))))
(assert true)
(assert (not (divides 3 144)))
(check-sat)
==> SMT output : (error "ERROR: line 3 column 74: could not find overload for 'product' Argument: #2 has type Int.
Fail.
Generated SMT input :
(set-logic AUFNIA)
(declare-fun isComposite (Int) Bool)
(assert (forall (x Int) (= (isComposite x) (exists (?y Int) (and (and (< 1 ?y) (< ?y x)) (divides ?y x))))))
(assert true)
(assert (not (isComposite 10)))
(check-sat)
==> SMT output : (error "ERROR: line 3 column 97: could not find overload for 'divides' Argument: #0 has type Int.
Fail.
Generated SMT input :
(set-logic AUFNIA)
(declare-fun isComposite (Int) Bool)
(assert (forall (x Int) (= (isComposite x) (exists (?y Int) (and (and (< 1 ?y) (< ?y x)) (divides ?y x))))))
(assert true)
(assert (not (isComposite 5)))
(check-sat)
==> SMT output : (error "ERROR: line 3 column 97: could not find overload for 'divides' Argument: #0 has type Int.
Fail.
Stop Omega... 0 invocations 