Starting Omega...oc
Translating global variables to procedure parameters...

case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](true ; (true ; ((self::node<a@M, q@v1>@M[1]) * (q::ll2<n-1, v1>@M[1]))))*(true)( FLOW __flow) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](EX flted_21_38 . (true ; (true ; ((self::node<a@M, q@v1>@M[1]) * (q::ll2<flted_21_38, v1>@M[1]))))*(flted_21_38 = n-1)( FLOW __flow)) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](true ; (true ; ((self::node<a@v1, q>@M[1]) * (q::ll1<n-1, v1>@M[1]))))*(true)( FLOW __flow) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](EX flted_17_41 . (true ; (true ; ((self::node<a@v1, q>@M[1]) * (q::ll1<flted_17_41, v1>@M[1]))))*(flted_17_41 = n-1)( FLOW __flow)) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](true ; (true ; ((self::node<a@v1, q@v2>@M[1]) * (q::ll<n-1, v1, v2>@M[1]))))*(true)( FLOW __flow) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](EX flted_13_44 . (true ; (true ; ((self::node<a@v1, q@v2>@M[1]) * (q::ll<flted_13_44, v1, v2>@M[1]))))*(flted_13_44 = n-1)( FLOW __flow)) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](true ; (true ; ((self::node<v1, q>@M[1]) * (q::ll0<n-1, v1>@M[1]))))*(true)( FLOW __flow) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][](self = null) & (n = 0) FLOW __flow 
EOrEBase: [][](EX flted_9_48 . (true ; (true ; ((self::node<v1, q>@M[1]) * (q::ll0<flted_9_48, v1>@M[1]))))*(flted_9_48 = n-1)( FLOW __flow)) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 277,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 276,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 277,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 276,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 275,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 274,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 275,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 274,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 273,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 272,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 273,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 272,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 271,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 270,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 271,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 270,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 269,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 268,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 269,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 268,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 267,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 266,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 267,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 266,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 265,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 264,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 265,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 264,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 263,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 262,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 263,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 262,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 261,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 260,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 261,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 260,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 259,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 258,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 259,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 258,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 257,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 256,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 257,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 256,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 255,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 254,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 255,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 254,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 253,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 252,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 253,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 252,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 251,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 250,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 251,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 250,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 249,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 248,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 249,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 248,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 247,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 246,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 247,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 246,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 245,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 244,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 245,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 244,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 243,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 242,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 243,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 242,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 241,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 240,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 241,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 240,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 239,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 238,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 239,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 238,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 237,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 236,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 237,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 236,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 235,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 234,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 235,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 234,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 233,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 232,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 233,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 232,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 231,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 230,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 231,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 230,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 229,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 228,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 229,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 228,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 227,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 226,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 227,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 226,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 225,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 224,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 225,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 224,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 223,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 222,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 223,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 222,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 221,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 220,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 221,:res FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 220,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 219,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 218,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 219,:!(res) FLOW __norm}

	 a = null->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 218,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 217,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 216,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 217,:res FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 216,:!(res) FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 215,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 214,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 215,:!(res) FLOW __norm}

	 a = b->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 214,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 107,:dom(res,0,dim-1) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 107,:dom(res,0,dim-1) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 106,:update_array_2d(a,res,v,i,j) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 106,:update_array_2d(a,res,v,i,j) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](domb(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 105,:(domb(res,ahalb,ahaub)) & (update_array_1d_b(a,res,v,i)) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](domb(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 105,:(domb(res,ahalb,ahaub)) & (update_array_1d_b(a,res,v,i)) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](dom(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 104,:(dom(res,ahalb,ahaub)) & (update_array_1d(a,res,v,i)) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](dom(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 104,:(dom(res,ahalb,ahaub)) & (update_array_1d(a,res,v,i)) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 103,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 103,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 102,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 102,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 101,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 101,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 100,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 100,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 99,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 99,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 98,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 98,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 97,:res = a[i, j] FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 97,:res = a[i, j] FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](domb(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 96,:res = a[i] FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](domb(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 96,:res = a[i] FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](dom(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 95,:res = a[i] FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][ ahalb ahaub](dom(a,ahalb,ahaub)) & ((ahalb <= i) & (i <= ahaub)) FLOW __norm {EAssume: 95,:res = a[i] FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 94,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 94,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 !(a)->

(None,[]): EAssume: 93,:res FLOW __norm

	 a->

(None,[]): EAssume: 92,:!(res) FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 !(a)->

(None,[]): EAssume: 93,:res FLOW __norm

	 a->

(None,[]): EAssume: 92,:!(res) FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 !(a)->

(None,[]): case{ECase:

	 !(b)->

(None,[]): EAssume: 91,:!(res) FLOW __norm

	 b->

(None,[]): EAssume: 90,:res FLOW __norm
}

	 a->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 89,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 !(a)->

(None,[]): case{ECase:

	 !(b)->

(None,[]): EAssume: 91,:!(res) FLOW __norm

	 b->

(None,[]): EAssume: 90,:res FLOW __norm
}

	 a->

(None,[]): EBase: [][]true FLOW __norm {EAssume: 89,:res FLOW __norm}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 !(a)->

(None,[]): EAssume: 88,:!(res) FLOW __norm

	 a->

(None,[]): case{ECase:

	 !(b)->

(None,[]): EAssume: 87,:!(res) FLOW __norm

	 b->

(None,[]): EAssume: 86,:res FLOW __norm
}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 !(a)->

(None,[]): EAssume: 88,:!(res) FLOW __norm

	 a->

(None,[]): case{ECase:

	 !(b)->

(None,[]): EAssume: 87,:!(res) FLOW __norm

	 b->

(None,[]): EAssume: 86,:res FLOW __norm
}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a < b->

(None,[]): EAssume: 85,:!(res) FLOW __norm

	 a >= b->

(None,[]): EAssume: 84,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a < b->

(None,[]): EAssume: 85,:!(res) FLOW __norm

	 a >= b->

(None,[]): EAssume: 84,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a <= b->

(None,[]): EAssume: 83,:!(res) FLOW __norm

	 a > b->

(None,[]): EAssume: 82,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a <= b->

(None,[]): EAssume: 83,:!(res) FLOW __norm

	 a > b->

(None,[]): EAssume: 82,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a > b->

(None,[]): EAssume: 81,:!(res) FLOW __norm

	 a <= b->

(None,[]): EAssume: 80,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a > b->

(None,[]): EAssume: 81,:!(res) FLOW __norm

	 a <= b->

(None,[]): EAssume: 80,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a >= b->

(None,[]): EAssume: 79,:!(res) FLOW __norm

	 a < b->

(None,[]): EAssume: 78,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a >= b->

(None,[]): EAssume: 79,:!(res) FLOW __norm

	 a < b->

(None,[]): EAssume: 78,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 77,:res FLOW __norm

	 a = b->

(None,[]): EAssume: 76,:!(res) FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 77,:res FLOW __norm

	 a = b->

(None,[]): EAssume: 76,:!(res) FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 75,:res FLOW __norm

	 a = b->

(None,[]): EAssume: 74,:!(res) FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 75,:res FLOW __norm

	 a = b->

(None,[]): EAssume: 74,:!(res) FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 73,:!(res) FLOW __norm

	 a = b->

(None,[]): EAssume: 72,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 73,:!(res) FLOW __norm

	 a = b->

(None,[]): EAssume: 72,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 71,:!(res) FLOW __norm

	 a = b->

(None,[]): EAssume: 70,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a != b->

(None,[]): EAssume: 71,:!(res) FLOW __norm

	 a = b->

(None,[]): EAssume: 70,:res FLOW __norm
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a < 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 69,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 68,:(EX q . true & (a = ((b) * (q))+res) & ((q >= 1) & ((0 <= res) & (res <= (0-b)-1))))

	 b >= 1->

(None,[]): EAssume: 67,:(EX q . true & (a = ((b) * (q))+res) & ((q <= 0-1) & ((0 <= res) & (res <= b-1))))
}

	 a >= 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 66,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 65,:(EX q . true & (a = ((b) * (q))+res) & ((q <= 0) & ((0 <= res) & (res <= (0-b)-1))))

	 b >= 1->

(None,[]): case{ECase:

	 a >= b->

(None,[]): case{ECase:

	 a >= (2) * (b)->

(None,[]): EAssume: 64,:(EX q . true & (a = ((b) * (q))+res) & ((q >= 0) & ((0 <= res) & (res <= b-1))))

	 a < (2) * (b)->

(None,[]): EAssume: 63,:res = a-b FLOW __norm
}

	 a < b->

(None,[]): EAssume: 62,:res = a FLOW __norm
}
}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a < 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 69,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 68,:(EX q . true & (a = ((b) * (q))+res) & ((q >= 1) & ((0 <= res) & (res <= (0-b)-1))))

	 b >= 1->

(None,[]): EAssume: 67,:(EX q . true & (a = ((b) * (q))+res) & ((q <= 0-1) & ((0 <= res) & (res <= b-1))))
}

	 a >= 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 66,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 65,:(EX q . true & (a = ((b) * (q))+res) & ((q <= 0) & ((0 <= res) & (res <= (0-b)-1))))

	 b >= 1->

(None,[]): case{ECase:

	 a >= b->

(None,[]): case{ECase:

	 a >= (2) * (b)->

(None,[]): EAssume: 64,:(EX q . true & (a = ((b) * (q))+res) & ((q >= 0) & ((0 <= res) & (res <= b-1))))

	 a < (2) * (b)->

(None,[]): EAssume: 63,:res = a-b FLOW __norm
}

	 a < b->

(None,[]): EAssume: 62,:res = a FLOW __norm
}
}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]b != 0 FLOW __norm {EAssume: 61,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]b != 0 FLOW __norm {EAssume: 61,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 b != 0->

(None,[]): EAssume: 60,:true FLOW __norm

	 b = 0->

(None,[]): EBase: [][]false*(false)( FLOW __norm) {EAssume: 59,:false*(false)( FLOW __norm)}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 b != 0->

(None,[]): EAssume: 60,:true FLOW __norm

	 b = 0->

(None,[]): EBase: [][]false*(false)( FLOW __norm) {EAssume: 59,:false*(false)( FLOW __norm)}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {case{ECase:

	 b = 0->

(None,[]): EAssume: 58,:true FLOW __DivByZeroErr

	 b != 0->

(None,[]): EAssume: 57,:true FLOW __norm
}}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {case{ECase:

	 b = 0->

(None,[]): EAssume: 58,:true FLOW __DivByZeroErr

	 b != 0->

(None,[]): EAssume: 57,:true FLOW __norm
}}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): case{ECase:

	 a < 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 56,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 55,:(EX r . true & (a = ((b) * (res))+r) & ((res >= 1) & ((0 <= r) & (r <= (0-b)-1))))

	 b >= 1->

(None,[]): EAssume: 54,:(EX r . true & (a = ((b) * (res))+r) & ((res <= 0-1) & ((0 <= r) & (r <= b-1))))
}

	 a >= 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 53,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 52,:(EX r . true & (a = ((b) * (res))+r) & ((res <= 0) & ((0 <= r) & (r <= (0-b)-1))))

	 b >= 1->

(None,[]): EAssume: 51,:(EX r . true & (a = ((b) * (res))+r) & ((res >= 0) & ((0 <= r) & (r <= b-1))))
}
}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): case{ECase:

	 a < 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 56,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 55,:(EX r . true & (a = ((b) * (res))+r) & ((res >= 1) & ((0 <= r) & (r <= (0-b)-1))))

	 b >= 1->

(None,[]): EAssume: 54,:(EX r . true & (a = ((b) * (res))+r) & ((res <= 0-1) & ((0 <= r) & (r <= b-1))))
}

	 a >= 0->

(None,[]): case{ECase:

	 ((0-1) < b) & (b < 1)->

(None,[]): EAssume: 53,:true FLOW __DivByZeroErr

	 b <= 0-1->

(None,[]): EAssume: 52,:(EX r . true & (a = ((b) * (res))+r) & ((res <= 0) & ((0 <= r) & (r <= (0-b)-1))))

	 b >= 1->

(None,[]): EAssume: 51,:(EX r . true & (a = ((b) * (res))+r) & ((res >= 0) & ((0 <= r) & (r <= b-1))))
}
}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 50,:res = (a) * (b) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 50,:res = (a) * (b) FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 49,:res = a-b FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 49,:res = a-b FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 48,:res = a+b FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][]true FLOW __norm {EAssume: 48,:res = a+b FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll<a, @L, @L>@M[1])))*(true)( FLOW __norm) {EAssume: 44,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_216_61 flted_216_60 . (true ; (true ; (x::ll<a, flted_216_60, flted_216_61>@M[1])))*((flted_216_60 = @L) & (flted_216_61 = @L))( FLOW __norm)) {EAssume: 44,:true FLOW __norm}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll0<n, 5>@M[1])))*(true)( FLOW __norm) {EAssume: 40,:(true ; (true ; (x::ll0<n, 8>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_204_65 . (true ; (true ; (x::ll0<n, flted_204_65>@M[1])))*(flted_204_65 = 5)( FLOW __norm)) {EAssume: 40,:(EX flted_205_64 . (true ; (true ; (x::ll0<n, flted_205_64>@M[1])))*(flted_205_64 <= 8)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll2<n, @M>@M[1])))*(true)( FLOW __norm) {EAssume: 36,:(true ; (true ; (x::ll2<n, @I>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_191_70 . (true ; (true ; (x::ll2<n, flted_191_70>@M[1])))*(flted_191_70 = @M)( FLOW __norm)) {EAssume: 36,:(EX flted_192_69 . (true ; (true ; (x::ll2<n, flted_192_69>@M[1])))*(flted_192_69<:@I)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll2<n, @I>@M[1])))*(true)( FLOW __norm) {EAssume: 32,:(true ; (true ; (x::ll2<n, @M>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_177_76 . (true ; (true ; (x::ll2<n, flted_177_76>@M[1])))*(flted_177_76 = @I)( FLOW __norm)) {EAssume: 32,:(EX flted_178_75 . (true ; (true ; (x::ll2<n, flted_178_75>@M[1])))*(flted_178_75<:@M)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll2<n, @M>@M[1])))*(true)( FLOW __norm) {EAssume: 28,:(true ; (true ; (x::ll2<n, @M>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_162_82 . (true ; (true ; (x::ll2<n, flted_162_82>@M[1])))*(flted_162_82 = @M)( FLOW __norm)) {EAssume: 28,:(EX flted_163_81 . (true ; (true ; (x::ll2<n, flted_163_81>@M[1])))*(flted_163_81<:@M)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll2<n, @M>@M[1])))*(true)( FLOW __norm) {EAssume: 24,:(true ; (true ; (x::ll2<n, @A>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_147_88 . (true ; (true ; (x::ll2<n, flted_147_88>@M[1])))*(flted_147_88 = @M)( FLOW __norm)) {EAssume: 24,:(EX flted_148_87 . (true ; (true ; (x::ll2<n, flted_148_87>@M[1])))*(flted_148_87<:@A)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll1<n, @M>@M[1])))*(true)( FLOW __norm) {EAssume: 20,:(true ; (true ; (x::ll1<n, @I>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_132_94 . (true ; (true ; (x::ll1<n, flted_132_94>@M[1])))*(flted_132_94 = @M)( FLOW __norm)) {EAssume: 20,:(EX flted_133_93 . (true ; (true ; (x::ll1<n, flted_133_93>@M[1])))*(flted_133_93<:@I)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll1<n, @I>@M[1])))*(true)( FLOW __norm) {EAssume: 16,:(true ; (true ; (x::ll1<n, @M>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_118_100 . (true ; (true ; (x::ll1<n, flted_118_100>@M[1])))*(flted_118_100 = @I)( FLOW __norm)) {EAssume: 16,:(EX flted_119_99 . (true ; (true ; (x::ll1<n, flted_119_99>@M[1])))*(flted_119_99<:@M)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll1<n, @M>@M[1])))*(true)( FLOW __norm) {EAssume: 12,:(true ; (true ; (x::ll1<n, @M>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_104_106 . (true ; (true ; (x::ll1<n, flted_104_106>@M[1])))*(flted_104_106 = @M)( FLOW __norm)) {EAssume: 12,:(EX flted_105_105 . (true ; (true ; (x::ll1<n, flted_105_105>@M[1])))*(flted_105_105<:@M)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll1<n, @I>@M[1])))*(true)( FLOW __norm) {EAssume: 8,:(true ; (true ; (x::ll1<n, @I>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_90_112 . (true ; (true ; (x::ll1<n, flted_90_112>@M[1])))*(flted_90_112 = @I)( FLOW __norm)) {EAssume: 8,:(EX flted_91_111 . (true ; (true ; (x::ll1<n, flted_91_111>@M[1])))*(flted_91_111<:@I)( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll<n, @M, @I>@M[1])))*(true)( FLOW __norm) {EAssume: 4,:(true ; (true ; (x::ll<n, @M, @M>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_76_120 flted_76_119 . (true ; (true ; (x::ll<n, flted_76_119, flted_76_120>@M[1])))*((flted_76_119 = @M) & (flted_76_120 = @I))( FLOW __norm)) {EAssume: 4,:(EX flted_77_118 flted_77_117 . (true ; (true ; (x::ll<n, flted_77_117, flted_77_118>@M[1])))*((flted_77_117<:@M) & (flted_77_118<:@M))( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll<n, @M, @I>@M[1])))*(true)( FLOW __norm) {EAssume: 2,:(true ; (true ; (x::ll<n, @M, @M>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_65_130 flted_65_129 . (true ; (true ; (x::ll<n, flted_65_129, flted_65_130>@M[1])))*((flted_65_129 = @M) & (flted_65_130 = @I))( FLOW __norm)) {EAssume: 2,:(EX flted_66_128 flted_66_127 . (true ; (true ; (x::ll<n, flted_66_127, flted_66_128>@M[1])))*((flted_66_127<:@M) & (flted_66_128<:@M))( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = 

(None,[]): EBase: [][](true ; (true ; (x::ll<n, @M, @I>@M[1])))*(true)( FLOW __norm) {EAssume: 1,:(true ; (true ; (x::ll<n, @M, @M>@M[1])))*(true)( FLOW __norm)}
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = 

(None,[]): EBase: [][](EX flted_58_139 flted_58_138 . (true ; (true ; (x::ll<n, flted_58_138, flted_58_139>@M[1])))*((flted_58_138 = @M) & (flted_58_139 = @I))( FLOW __norm)) {EAssume: 1,:(EX flted_59_137 flted_59_136 . (true ; (true ; (x::ll<n, flted_59_136, flted_59_137>@M[1])))*((flted_59_136<:@M) & (flted_59_137<:@M))( FLOW __norm))}
case_normalize_struc_formula :: CHECK POINT 1 ==> nf = EBase: [][]false*(false)( FLOW __false) 
case_normalize_struc_formula :: CHECK POINT 2 ==> nf = EBase: [][]false*(false)( FLOW __false) 
flatten_to_bind @2@1
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @2 EXIT out :(x,node)

compute_ann_list@3@1
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@3 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_222_701 next_222_702
   annf: @L@A
flatten_to_bind @1
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @1 EXIT out :(116::bind x to (val_222_701,next_222_702)[read] in 
{val_222_701
},int)

flatten_to_bind @5@4
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @5 EXIT out :(x,node)

compute_ann_list@6@4
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@6 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_223_705 next_223_706
   annf: @A@L
flatten_to_bind @4
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @4 EXIT out :(113::bind x to (val_223_705,next_223_706)[read] in 
{next_223_706
},node)

flatten_to_bind @8@7
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @8 EXIT out :(x,node)

compute_ann_list@9@7
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@9 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_226_707 next_226_708
   annf: @A@L
flatten_to_bind @7
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @7 EXIT out :(111::bind x to (val_226_707,next_226_708)[read] in 
{next_226_708
},node)

flatten_to_bind @11@10
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @11 EXIT out :(x,node)

compute_ann_list@12@10
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@12 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_210_722 next_210_723
   annf: @L@A
flatten_to_bind @10
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @10 EXIT out :(122::bind x to (val_210_722,next_210_723)[read] in 
{val_210_722
},int)

flatten_to_bind @14@13
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @14 EXIT out :(x,node)

compute_ann_list@15@13
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@15 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_210_727 next_210_728
   annf: @M@A
flatten_to_bind @13
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_210_726
flatten_to_bind  inp3 :@M
flatten_to_bind @13 EXIT out :(123::bind x to (val_210_727,next_210_728)[write] in 
{val_210_727 = v_int_210_726
},void)

flatten_to_bind @17@16
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @17 EXIT out :(x,node)

compute_ann_list@18@16
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@18 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_211_729 next_211_730
   annf: @A@L
flatten_to_bind @16
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @16 EXIT out :(125::bind x to (val_211_729,next_211_730)[read] in 
{next_211_730
},node)

flatten_to_bind @20@19
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @20 EXIT out :(x,node)

compute_ann_list@21@19
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@21 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_197_742 next_197_743
   annf: @L@A
flatten_to_bind @19
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @19 EXIT out :(131::bind x to (val_197_742,next_197_743)[read] in 
{val_197_742
},int)

flatten_to_bind @23@22
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @23 EXIT out :(x,node)

compute_ann_list@24@22
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@24 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_197_747 next_197_748
   annf: @M@A
flatten_to_bind @22
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_197_746
flatten_to_bind  inp3 :@M
flatten_to_bind @22 EXIT out :(132::bind x to (val_197_747,next_197_748)[write] in 
{val_197_747 = v_int_197_746
},void)

flatten_to_bind @26@25
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @26 EXIT out :(x,node)

compute_ann_list@27@25
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@27 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_198_749 next_198_750
   annf: @A@L
flatten_to_bind @25
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @25 EXIT out :(133::bind x to (val_198_749,next_198_750)[read] in 
{next_198_750
},node)

flatten_to_bind @29@28
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @29 EXIT out :(x,node)

compute_ann_list@30@28
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@30 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_183_761 next_183_762
   annf: @L@A
flatten_to_bind @28
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @28 EXIT out :(140::bind x to (val_183_761,next_183_762)[read] in 
{val_183_761
},int)

flatten_to_bind @32@31
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @32 EXIT out :(x,node)

compute_ann_list@33@31
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@33 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_183_766 next_183_767
   annf: @M@A
flatten_to_bind @31
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_183_765
flatten_to_bind  inp3 :@M
flatten_to_bind @31 EXIT out :(141::bind x to (val_183_766,next_183_767)[write] in 
{val_183_766 = v_int_183_765
},void)

flatten_to_bind @35@34
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @35 EXIT out :(x,node)

compute_ann_list@36@34
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@36 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_184_768 next_184_769
   annf: @A@L
flatten_to_bind @34
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @34 EXIT out :(142::bind x to (val_184_768,next_184_769)[read] in 
{next_184_769
},node)

flatten_to_bind @38@37
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @38 EXIT out :(x,node)

compute_ann_list@39@37
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@39 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_167_780 next_167_781
   annf: @L@A
flatten_to_bind @37
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @37 EXIT out :(149::bind x to (val_167_780,next_167_781)[read] in 
{val_167_780
},int)

flatten_to_bind @41@40
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @41 EXIT out :(x,node)

compute_ann_list@42@40
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@42 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_167_785 next_167_786
   annf: @M@A
flatten_to_bind @40
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_167_784
flatten_to_bind  inp3 :@M
flatten_to_bind @40 EXIT out :(150::bind x to (val_167_785,next_167_786)[write] in 
{val_167_785 = v_int_167_784
},void)

flatten_to_bind @44@43
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @44 EXIT out :(x,node)

compute_ann_list@45@43
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@45 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_169_787 next_169_788
   annf: @A@L
flatten_to_bind @43
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @43 EXIT out :(151::bind x to (val_169_787,next_169_788)[read] in 
{next_169_788
},node)

flatten_to_bind @47@46
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @47 EXIT out :(x,node)

compute_ann_list@48@46
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@48 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_153_799 next_153_800
   annf: @L@A
flatten_to_bind @46
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @46 EXIT out :(158::bind x to (val_153_799,next_153_800)[read] in 
{val_153_799
},int)

flatten_to_bind @50@49
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @50 EXIT out :(x,node)

compute_ann_list@51@49
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@51 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_153_804 next_153_805
   annf: @M@A
flatten_to_bind @49
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_153_803
flatten_to_bind  inp3 :@M
flatten_to_bind @49 EXIT out :(159::bind x to (val_153_804,next_153_805)[write] in 
{val_153_804 = v_int_153_803
},void)

flatten_to_bind @53@52
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @53 EXIT out :(x,node)

compute_ann_list@54@52
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@54 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_154_806 next_154_807
   annf: @A@L
flatten_to_bind @52
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @52 EXIT out :(160::bind x to (val_154_806,next_154_807)[read] in 
{next_154_807
},node)

flatten_to_bind @56@55
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @56 EXIT out :(x,node)

compute_ann_list@57@55
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@57 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_138_818 next_138_819
   annf: @L@A
flatten_to_bind @55
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @55 EXIT out :(167::bind x to (val_138_818,next_138_819)[read] in 
{val_138_818
},int)

flatten_to_bind @59@58
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @59 EXIT out :(x,node)

compute_ann_list@60@58
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@60 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_138_823 next_138_824
   annf: @M@A
flatten_to_bind @58
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_138_822
flatten_to_bind  inp3 :@M
flatten_to_bind @58 EXIT out :(168::bind x to (val_138_823,next_138_824)[write] in 
{val_138_823 = v_int_138_822
},void)

flatten_to_bind @62@61
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @62 EXIT out :(x,node)

compute_ann_list@63@61
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@63 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_139_825 next_139_826
   annf: @A@L
flatten_to_bind @61
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @61 EXIT out :(169::bind x to (val_139_825,next_139_826)[read] in 
{next_139_826
},node)

flatten_to_bind @65@64
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @65 EXIT out :(x,node)

compute_ann_list@66@64
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@66 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_124_837 next_124_838
   annf: @L@A
flatten_to_bind @64
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @64 EXIT out :(176::bind x to (val_124_837,next_124_838)[read] in 
{val_124_837
},int)

flatten_to_bind @68@67
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @68 EXIT out :(x,node)

compute_ann_list@69@67
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@69 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_124_842 next_124_843
   annf: @M@A
flatten_to_bind @67
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_124_841
flatten_to_bind  inp3 :@M
flatten_to_bind @67 EXIT out :(177::bind x to (val_124_842,next_124_843)[write] in 
{val_124_842 = v_int_124_841
},void)

flatten_to_bind @71@70
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @71 EXIT out :(x,node)

compute_ann_list@72@70
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@72 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_125_844 next_125_845
   annf: @A@L
flatten_to_bind @70
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @70 EXIT out :(178::bind x to (val_125_844,next_125_845)[read] in 
{next_125_845
},node)

flatten_to_bind @74@73
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @74 EXIT out :(x,node)

compute_ann_list@75@73
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@75 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_110_856 next_110_857
   annf: @L@A
flatten_to_bind @73
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @73 EXIT out :(185::bind x to (val_110_856,next_110_857)[read] in 
{val_110_856
},int)

flatten_to_bind @77@76
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @77 EXIT out :(x,node)

compute_ann_list@78@76
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@78 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_110_861 next_110_862
   annf: @M@A
flatten_to_bind @76
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_110_860
flatten_to_bind  inp3 :@M
flatten_to_bind @76 EXIT out :(186::bind x to (val_110_861,next_110_862)[write] in 
{val_110_861 = v_int_110_860
},void)

flatten_to_bind @80@79
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @80 EXIT out :(x,node)

compute_ann_list@81@79
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@81 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_111_863 next_111_864
   annf: @A@L
flatten_to_bind @79
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @79 EXIT out :(187::bind x to (val_111_863,next_111_864)[read] in 
{next_111_864
},node)

flatten_to_bind @83@82
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @83 EXIT out :(x,node)

compute_ann_list@84@82
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@84 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_96_875 next_96_876
   annf: @L@A
flatten_to_bind @82
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @82 EXIT out :(194::bind x to (val_96_875,next_96_876)[read] in 
{val_96_875
},int)

flatten_to_bind @86@85
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @86 EXIT out :(x,node)

compute_ann_list@87@85
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@87 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_96_880 next_96_881
   annf: @M@A
flatten_to_bind @85
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_96_879
flatten_to_bind  inp3 :@M
flatten_to_bind @85 EXIT out :(195::bind x to (val_96_880,next_96_881)[write] in 
{val_96_880 = v_int_96_879
},void)

flatten_to_bind @89@88
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @89 EXIT out :(x,node)

compute_ann_list@90@88
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@90 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_97_882 next_97_883
   annf: @A@L
flatten_to_bind @88
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @88 EXIT out :(196::bind x to (val_97_882,next_97_883)[read] in 
{next_97_883
},node)

flatten_to_bind @92@91
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @92 EXIT out :(x,node)

compute_ann_list@93@91
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@L
compute_ann_list@93 EXIT out :, @L, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_82_897 next_82_898
   annf: @L@A
flatten_to_bind @91
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @91 EXIT out :(203::bind x to (val_82_897,next_82_898)[read] in 
{val_82_897
},int)

flatten_to_bind @95@94
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@M
flatten_to_bind @95 EXIT out :(x,node)

compute_ann_list@96@94
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, val
compute_ann_list inp3 :@M
compute_ann_list@96 EXIT out :, @M, @A

(andreeac) rev_fs: ,val
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_82_902 next_82_903
   annf: @M@A
flatten_to_bind @94
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :v_int_82_901
flatten_to_bind  inp3 :@M
flatten_to_bind @94 EXIT out :(204::bind x to (val_82_902,next_82_903)[write] in 
{val_82_902 = v_int_82_901
},void)

flatten_to_bind @98@97
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @98 EXIT out :(x,node)

compute_ann_list@99@97
compute_ann_list inp1 :, val, next
compute_ann_list inp2 :, next
compute_ann_list inp3 :@L
compute_ann_list@99 EXIT out :, @A, @L

(andreeac) rev_fs: ,next
(andreeac) all_fields: ,val,next
(andreeac)astsimp.ml flatten_to_bind_x, vs to become lent ann:  val_83_904 next_83_905
   annf: @A@L
flatten_to_bind @97
flatten_to_bind  inp1 :x
flatten_to_bind  inp2 :
flatten_to_bind  inp3 :@L
flatten_to_bind @97 EXIT out :(205::bind x to (val_83_904,next_83_905)[read] in 
{next_83_905
},node)

Checking procedure update21$node... 
(andreeac)Specs :
 ((None,[]),EBase exists (Expl)(Impl)[n](ex)EXISTS(flted_147_90: x::ll2<n,flted_147_90>@M[Orig][LHSCase]&
                  flted_147_90=@M&{FLOW,(20,21)=__norm})[]
                    EBase true&MayLoop&{FLOW,(1,23)=__flow}[]
                            EAssume 24::
                              EXISTS(n_91,
                              flted_148_89: x::ll2<n_91,flted_148_89>@M[Orig][LHSCase]&
                              flted_148_89<:@A & n_91=n&
                              {FLOW,(20,21)=__norm})[])
(andreeac) ctx: es_formula: 
  EXISTS(flted_147_90: x::ll2<n,flted_147_90>@M[Orig][LHSCase]&x'=x & 
  flted_147_90=@M & MayLoop&{FLOW,(20,21)=__norm})[]
 es_pure: true
 es_orig_ante: None
 es_heap: true
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: None
 es_term_err: None
 es_var_zero_perm: 
(andreeac) bind 15 to deleteWN1 ctx:  List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x::ll2<n,flted_147_972>@M[Orig][LHSCase]&x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]
WN1 tmp_ctx:  List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x::ll2<n,flted_147_972>@M[Orig][LHSCase]&x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]

(andreeac)bind: unfolded context:
 List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:EXISTS(v1_983,flted_21_984,a_985,q_986: x'::node<a_985@M,q_986@flted_147_972>@M[Orig] * q_986::ll2<flted_21_984,v1_983>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_984+1=n & v1_983=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm})[]
       es_var_measures: MayLoop

 ]

(andreeac)bind args: [val_153_799'@L, next_153_800'@A, ]

(andreeac)bind imm: @L
(andreea)struc_vheap:  EBase x'::node<val_153_799'@L,next_153_800'@A>@L[Orig]&true&
       {FLOW,(1,23)=__flow}[]
(andreeac) spatial_ctx_extarct helper initial f:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) spatial_ctx_extarct helper new f:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]
(andreeac) lhs_rest spatial_ctx_extract  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) f0:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) lhs_rest:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) initial estate  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop
(andreeac) new estate  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop

(andreeac)[do_match] input LHS =  es_formula: 
  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
  q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & 
  flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
  x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&
  {FLOW,(20,21)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: true
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: Some(MayLoop)
 es_term_err: None
 es_var_zero_perm: 
[do_match] RHS =  true&true&{FLOW,(1,23)=__flow}[]
[do_match] matching  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] |-  x'::node<val_153_799'@L,next_153_800'@A>@L[Orig]

(andreeac) solver.ml r_h:  true
(andreeac) solver.ml l_h: x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]cris: to_rhs =  flted_147_972<:@A

cris: new_consumed =  true
cris: new_ante =  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & 
flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
val_153_799'=a_994 & next_153_800'=q_995&{FLOW,(20,21)=__norm}[]
(andreeac) bind 15 to deleteWN1 ctx:  List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & v_int_153_803'=1+a_994&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]
WN1 tmp_ctx:  List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & v_int_153_803'=1+a_994&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]

(andreeac)bind: unfolded context:
 List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & v_int_153_803'=1+a_994&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]

(andreeac)bind args: [val_153_804'@M, next_153_805'@A, ]

(andreeac)bind imm: @M
(andreea)struc_vheap:  EBase x'::node<val_153_804'@M,next_153_805'@A>@M[Orig]&true&
       {FLOW,(1,23)=__flow}[]
(andreeac) spatial_ctx_extarct helper initial f:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) spatial_ctx_extarct helper new f:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]
(andreeac) lhs_rest spatial_ctx_extract  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) f0:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) lhs_rest:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) initial estate  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & v_int_153_803'=1+a_994&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop
(andreeac) new estate  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & v_int_153_803'=1+a_994&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop

(andreeac)[do_match] input LHS =  es_formula: 
  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
  q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & 
  flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
  x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
  v_int_153_803'=1+a_994&{FLOW,(20,21)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: true
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: Some(MayLoop)
 es_term_err: None
 es_var_zero_perm: 
[do_match] RHS =  true&true&{FLOW,(1,23)=__flow}[]
[do_match] matching  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] |-  x'::node<val_153_804'@M,next_153_805'@A>@M[Orig]

(andreeac) solver.ml r_h:  true
(andreeac) solver.ml l_h: x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]cris: to_rhs =  flted_147_972<:@A

cris: new_consumed =  true
cris: new_ante =  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & 
flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
v_int_153_803'=1+a_994 & val_153_804'=a_994 & next_153_805'=q_995&
{FLOW,(20,21)=__norm}[]
(andreeac) bind 15 to deleteWN1 ctx:  List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]
WN1 tmp_ctx:  List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]

(andreeac)bind: unfolded context:
 List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]

(andreeac)bind args: [val_154_806'@A, next_154_807'@L, ]

(andreeac)bind imm: @L
(andreea)struc_vheap:  EBase x'::node<val_154_806'@A,next_154_807'@L>@L[Orig]&true&
       {FLOW,(1,23)=__flow}[]
(andreeac) spatial_ctx_extarct helper initial f:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) spatial_ctx_extarct helper new f:  x'::node<a_994@M,q_995@[@flted_147_972]>@M[Orig]
(andreeac) lhs_rest spatial_ctx_extract  x'::node<a_994@M,q_995@[@flted_147_972]>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) f0:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) lhs_rest:  x'::node<a_994@M,q_995@[@flted_147_972]>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) initial estate  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop
(andreeac) new estate  x'::node<a_994@M,q_995@[@flted_147_972]>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop

(andreeac)[do_match] input LHS =  es_formula: 
  x'::node<a_994@M,q_995@[@flted_147_972]>@M[Orig] * 
  q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & 
  flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
  x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808')&
  {FLOW,(20,21)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: true
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: Some(MayLoop)
 es_term_err: None
 es_var_zero_perm: 
[do_match] RHS =  true&true&{FLOW,(1,23)=__flow}[]
[do_match] matching  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] |-  x'::node<val_154_806'@A,next_154_807'@L>@L[Orig]

(andreeac) solver.ml r_h:  true
(andreeac) solver.ml l_h: x'::node<a_994@M,q_995@[@flted_147_972]>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]cris: to_rhs =  flted_147_972<:@L

cris: new_consumed =  true
cris: new_ante =  x'::node<a_994@M,q_995@[@flted_147_972]>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & 
flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
val_154_806'=a_994 & next_154_807'=q_995&{FLOW,(20,21)=__norm}[]
dprint: ll-ann-param-no-infer.ss:155: ctx:  List of Failesc Context: [FEC(0, 0, 1  [(155::,1 ); (155::,1 )])]

Successful States:
[
 Label: [(155::,1 ); (155::,1 )]
 State:x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & y_92'=q_995&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]

(andreeac) lhs_rest spatial_ctx_extract  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) f0:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
q_995::ll2<flted_21_993,v1_992>@M[Orig]
(andreeac) lhs_rest:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) initial estate  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * q_995::ll2<flted_21_993,v1_992>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & y_92'=q_995&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop
(andreeac) new estate  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & y_92'=q_995&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop

(andreeac)[do_match] input LHS =  es_formula: 
  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]&0<=0 & 0<=flted_147_972 & 
  flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
  x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
  y_92'=q_995&{FLOW,(20,21)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: true
 es_evars: [flted_147_1012]
 es_gen_impl_vars: [n_1009]
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: Some(MayLoop)
 es_term_err: None
 es_var_zero_perm: 
[do_match] RHS =  true&true&{FLOW,(20,21)=__norm}[]
[do_match] matching  q_995::ll2<flted_21_993,v1_992>@M[Orig] |-  y_92'::ll2<n_1009,flted_147_1012>@M[Orig][LHSCase]

(andreeac) solver.ml r_h:  true
(andreeac) solver.ml l_h: x'::node<a_994@M,q_995@flted_147_972>@M[Orig]cris: to_rhs =  true

cris: new_consumed =  true
cris: new_ante =  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]&0<=0 & 0<=flted_147_972 & 
flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
y_92'=q_995 & n_1009=flted_21_993&{FLOW,(20,21)=__norm}[]
 WN 1 : List of Partial Context: [PC(0, 2)]
Failed States:

Successful States:
[
 Label: [(155::,0 ); (155::,0 )]
 State:es_formula: 
        x::ll2<n,flted_147_970>@M[Orig][LHSCase]&x'=x & flted_147_970=@M & 
        x'=null & v_bool_151_808' & x'=null & v_bool_151_808'&
        {FLOW,(14,15)=__Ret}[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_aux_conseq: true
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: ;
 Label: [(155::,1 ); (155::,1 )]
 State:es_formula: 
        EXISTS(flted_148_1017: x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
        y_92'::ll2<n_1009,flted_148_1017>@M[Orig][LHSCase]&0<=0 & 
        0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & 
        flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & 
        !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & 
        flted_148_1017<:@A & 0<=n_1009&{FLOW,(20,21)=__norm})[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_aux_conseq: true
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: 
 ]
 WN 2 :  List of Partial Context: [PC(0, 2)]
Failed States:

Successful States:
[
 Label: [(155::,0 ); (155::,0 )]
 State:es_formula: 
        x::ll2<n,flted_147_970>@M[Orig][LHSCase]&x'=x & flted_147_970=@M & 
        x'=null & v_bool_151_808' & x'=null & v_bool_151_808'&
        {FLOW,(20,21)=__norm}[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_aux_conseq: true
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: ;
 Label: [(155::,1 ); (155::,1 )]
 State:es_formula: 
        EXISTS(flted_148_1017: x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
        y_92'::ll2<n_1009,flted_148_1017>@M[Orig][LHSCase]&0<=0 & 
        0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & 
        flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & 
        !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & 
        flted_148_1017<:@A & 0<=n_1009&{FLOW,(20,21)=__norm})[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_aux_conseq: true
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: 
 ]got into check_post on the succCtx branch

(andreeac)context before post:  List of Partial Context: [PC(0, 2)]
Failed States:

Successful States:
[
 Label: [(155::,0 ); (155::,0 )]
 State:es_formula: 
        x::ll2<n,flted_147_970>@M[Orig][LHSCase]&x'=x & flted_147_970=@M & 
        x'=null & v_bool_151_808' & x'=null & v_bool_151_808'&
        {FLOW,(20,21)=__norm}[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_aux_conseq: true
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: ;
 Label: [(155::,1 ); (155::,1 )]
 State:es_formula: 
        EXISTS(flted_148_1017: x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
        y_92'::ll2<n_1009,flted_148_1017>@M[Orig][LHSCase]&0<=0 & 
        0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & 
        flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & 
        !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & 
        flted_148_1017<:@A & 0<=n_1009&{FLOW,(20,21)=__norm})[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_aux_conseq: true
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: 
 ]
(andreeac) lhs_rest spatial_ctx_extract  true
(andreeac) f0:  x::ll2<n,flted_147_970>@M[Orig][LHSCase]
(andreeac) spatial_ctx_extarct helper initial f:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) spatial_ctx_extarct helper new f:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) lhs_rest spatial_ctx_extract  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]
(andreeac) f0:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]
(andreeac) spatial_ctx_extarct helper initial f:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig]
(andreeac) spatial_ctx_extarct helper new f:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]
(andreeac) lhs_rest spatial_ctx_extract  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]
(andreeac) f0:  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]
(andreeac) lhs_rest:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]
(andreeac) initial estate  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] * y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & flted_148_1024<:@A & 0<=n_1009&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop
(andreeac) new estate  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & flted_148_1024<:@A & 0<=n_1009&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop

(andreeac)[do_match] input LHS =  es_formula: 
  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
  y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]&0<=0 & 
  0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & 
  flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & 
  !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & 
  flted_148_1024<:@A & 0<=n_1009&{FLOW,(20,21)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: true
 es_evars: [v1_1034; flted_21_1035; n_1025; flted_148_1026]
 es_gen_impl_vars: [a_1027; q_1028]
 es_rhs_eqset: [(n_1025,n); (v1_1034,flted_148_1026)]
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: Some(MayLoop)
 es_term_err: None
 es_var_zero_perm: 
[do_match] RHS =  q_1028::ll2<flted_21_1035,v1_1034>@M[Orig]&true&{FLOW,(1,23)=__flow}[]
[do_match] matching  x'::node<a_994@M,q_995@flted_147_972>@M[Orig] |-  x::node<a_1027@M,q_1028@flted_148_1026>@M[Orig]

(andreeac) solver.ml r_h:  q_1028::ll2<flted_21_1035,v1_1034>@M[Orig]
(andreeac) solver.ml l_h: x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]cris: to_rhs =  flted_147_972<:flted_148_1026

cris: new_consumed =  true
cris: new_ante =  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]&0<=0 & 0<=flted_147_972 & 
flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
y_92'=q_995 & n_1009=flted_21_993 & flted_148_1024<:@A & 0<=n_1009 & 
a_1027=a_994 & q_1028=q_995&{FLOW,(20,21)=__norm}[]
(andreeac) lhs_rest spatial_ctx_extract  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]
(andreeac) f0:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * 
y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]
(andreeac) lhs_rest:  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]
(andreeac) initial estate  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig] * y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & flted_148_1024<:@A & 0<=n_1009 & a_1027=a_994 & q_1028=q_995&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop
(andreeac) new estate  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]&0<=0 & 0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & flted_148_1024<:@A & 0<=n_1009 & a_1027=a_994 & q_1028=q_995&{FLOW,(20,21)=__norm}[]
  es_var_measures: MayLoop

(andreeac)[do_match] input LHS =  es_formula: 
  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]&0<=0 & 0<=flted_147_972 & 
  flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
  x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
  y_92'=q_995 & n_1009=flted_21_993 & flted_148_1024<:@A & 0<=n_1009 & 
  a_1027=a_994 & q_1028=q_995&{FLOW,(20,21)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: true
 es_evars: [v1_1034; flted_21_1035; n_1025; flted_148_1026]
 es_rhs_eqset: [(n_1025,n); (v1_1034,flted_148_1026)]
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: Some(MayLoop)
 es_term_err: None
 es_var_zero_perm: 
[do_match] RHS =  true&flted_147_972<:flted_148_1026&{FLOW,(1,23)=__flow}[]
[do_match] matching  y_92'::ll2<n_1009,flted_148_1024>@M[Orig][LHSCase] |-  q_1028::ll2<flted_21_1035,v1_1034>@M[Orig]

(andreeac) solver.ml r_h:  true
(andreeac) solver.ml l_h: x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]cris: to_rhs =  true

cris: new_consumed =  true
cris: new_ante =  x'::node<a_994@[@M],q_995@flted_147_972>@M[Orig]&0<=0 & 0<=flted_147_972 & 
flted_21_993+1=n & v1_992=flted_147_972 & x'=x & flted_147_972=@M & 
x'!=null & !(v_bool_151_808') & x'!=null & !(v_bool_151_808') & 
y_92'=q_995 & n_1009=flted_21_993 & flted_148_1024<:@A & 0<=n_1009 & 
a_1027=a_994 & q_1028=q_995&{FLOW,(20,21)=__norm}[]
(andreeac)TMP CTX:  List of Partial Context: [PC(0, 2)]
Failed States:

Successful States:
[
 Label: [(155::,0 ); (155::,0 )]
 State:es_formula: 
        true&x=null & n=0 & x'=x & flted_147_970=@M & x'=null & 
        v_bool_151_808' & x'=null & v_bool_151_808' & (n=0 | x=null)&
        {FLOW,(20,21)=__norm}[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_evars: [n_1018; flted_148_1019]
       es_aux_conseq: n_1018=0
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: ;
 Label: [(155::,1 ); (155::,1 )]
 State:es_formula: 
        x'::node<a_994@M,q_995@flted_147_972>@M[Orig]&0<=0 & 
        0<=flted_147_972 & flted_21_993+1=n & v1_992=flted_147_972 & x'=x & 
        flted_147_972=@M & x'!=null & !(v_bool_151_808') & x'!=null & 
        !(v_bool_151_808') & y_92'=q_995 & n_1009=flted_21_993 & 
        flted_148_1024<:@A & 0<=n_1009 & a_1027=a_994 & q_1028=q_995 & 
        0<=flted_148_1024 & flted_147_972<:flted_148_1024&
        {FLOW,(20,21)=__norm}[]
       es_pure: true
       es_orig_ante: None
       es_heap: true
       es_evars: [n_1025; flted_148_1026]
       es_rhs_eqset: [(n_1025,n); (flted_148_1024,flted_148_1026)]
       es_aux_conseq: 
        0<=flted_148_1026 & n_1009+1=n_1025 & 
        flted_148_1024=flted_148_1026 & flted_147_972<:flted_148_1026
       es_must_error: None
       es_var_measures: Some(MayLoop)
       es_term_err: None
       es_var_zero_perm: 
 ]

(andreeac)New Base true&MayLoop&{FLOW,(1,23)=__flow}[]
(andreeac)New Base EXISTS(flted_147_90: x::ll2<n,flted_147_90>@M[Orig][LHSCase]&
flted_147_90=@M&{FLOW,(20,21)=__norm})[]
(andreeac)!!!! SPECS (after specs_infer) 0  ((None,[]),EBase exists (Expl)(Impl)[n](ex)EXISTS(flted_147_90: x::ll2<n,flted_147_90>@M[Orig][LHSCase]&
                  flted_147_90=@M&{FLOW,(20,21)=__norm})[]
                    EBase true&MayLoop&{FLOW,(1,23)=__flow}[]
                            EAssume 24::
                              EXISTS(n_91,
                              flted_148_89: x::ll2<n_91,flted_148_89>@M[Orig][LHSCase]&
                              flted_148_89<:@A & n_91=n&
                              {FLOW,(20,21)=__norm})[])

Procedure update21$node SUCCESS

Termination checking result:

Stop Omega... 88 invocations 
0 false contexts at: ()

Total verification time: 0.36 second(s)
	Time spent in main process: 0.33 second(s)
	Time spent in child processes: 0.03 second(s)
