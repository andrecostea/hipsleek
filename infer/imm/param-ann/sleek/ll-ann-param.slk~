/*
@M - mutable   (0)
@I - immutable (1)
@L - lending   (2)
@A - no access (3)
*/

data cell {int val;}.

data node {
	cell val; 
	node next;	
}.


pred ll<n, v1, v2> == self = null & n = 0 
	or self::node<a, q>@I * 
    a::cell<_>@v2 * 
    q::ll<n-1, v1, v2>@v1
  inv n >= 0.

//lemma "tst1" self::ll<n,v1,v2> -> self::node<a,b>.

/*
pred ls<s,n, v1, v2> == self = null & n = 0 & s=0
	or self::node<a, q>@v1 * a::cell<v>@v2 * q::ls<s-v,n-1, v1, v2>@v1 
  inv n >= 0.*/

data node2 {
	int val; 
	node next;	
}.
/*
pred ll2<n> == self = null & n = 0 
	or self::node2<next = q@A>@I * q::ll2<n-1>
  inv n >= 0.
*/

// (1)
checkentail x::node<p@I,q@I>@M |- x::node<a@I,b@M>@M.
print residue.

// (2)
checkentail x::node<p@I,q@M>@M |- x::node<a@I,b@M>@I.
print residue.

// (2)
//infer [v] x::node<p@I,q@v>@M |- x::node<a@I,b@M>@M.
//print residue.

// (3) expect n>0 & v<:@M
//infer [n,v, v1, v2, v3] x::ll<n, v1, v2>@v |- x::node<a,b@v3>@M.
//print residue.

  /*
// (2) expect v<:@M
infer [v] x::node<p,q>@v |- x::node<a,b>.
print residue.

// (3) expect x!=null & v<:@M
infer [x,v] x::ll<n>@v |- x::node<a,b>.
print residue.

// (4) expect x!=null & v<:@I
infer [x,v] x::ll<n>@v |- x::node<a,b>@I.
print residue.

// (5) expect n>0 & v<:@I
infer [n,v] x::ll<n>@v |- x::node<a,b>@I.
print residue.
*/

/*
// (7) expect n>0 & v<:@M
infer [n, v] x::ll2<n>@v & @A<:@I |- x::node2<a,b>.
print residue.
 */
