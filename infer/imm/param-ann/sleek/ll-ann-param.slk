/*
@M - mutable   (0)
@I - immutable (1)
@L - lending   (2)
@A - no access (3)
*/

data cell {int val;}.

data node {
	cell val; 
	node next;	
}.


pred ll<n, v1, v2> == self = null & n = 0 
	or self::node<a, q> * 
    a::cell<_>@v2 * 
    q::ll<n-1, v1, v2>@v1
  inv n >= 0.

// (1)
checkentail x::node<p@I,q@I> * y::node<c,d> |- x::node<a@I,b@I>@I.
print residue.

// (2)
checkentail x::node<p@I,q@L>@M |- x::node<a@I,b@L>@M.
print residue.

// (3)
checkentail x::node<p@L,q@L>@M |- x::node<a@L,b@L>@M *  x::node<a@L,b@L>@M.
print residue.

// (4)
checkentail x::node<p@L,q@L>@M |- (x::node<a@L,b@L>@L & x::node<a@L,b@L>@L).
print residue.

// (5)
checkentail x::node<p@L,q@L>@M * y::node<a1@I,b1@I>@M |-  x::node<a@L,b@L>@M * y::node<a2@I,b2@I>@I.
print residue.
