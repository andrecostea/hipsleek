# infer/ex6.slk  --smtinp: FIXED

Why is this z3 problem still there?

(declare-fun Q (Int Int) Bool)
(declare-fun Q (Int Int) Bool)

WARNING: _0:0_0:0:Z3 error message: (error "line 83 column 29: invalid declaration, function 'Q' (whith the given signature) already declared")
WARNING: _0:0_0:0:Z3 error message: (error "line 100 column 29: invalid declaration, function 'Q' (whith the given signature) already declared")

=========================================================================
# ex5.slk: FIXED

test

!Why relAssume do't work? Is it because it
is not being pushed into stack?

relation Q(int a, int b).
relAssume
  n=0 & m=0 -->  Q(m,n).
relAssume
  m1=m-1 & r=r1+2 & Q(m1,r1) -->  Q(m,r).
relation_infer [][Q].

# RelAssume seems to be part of shape inference.
  Can we convert them to pure form too and add to infer_rel_stk?

let process_rel_assume cond_path (ilhs : meta_formula) (igurad_opt : meta_formula option) (irhs: meta_formula)=

!!! **sleekengine.ml#1257: emp&nnnn=0 & m=0 --> emp&Q(m,nnnn)
!!! **sleekengine.ml#1257: emp&m1+1=m & r=2+r1 & Q(m1,r1) --> emp&Q(m,r)
!!! fixpoint2:[]
=========================================================================
# ex1a.slk --esl

infer [aaa,aaa'] true |- aaa=aaa'.
print residue.

(==infer.ml#1570==)
infer_pure_m_1@4@3@2
infer_pure_m_1 inp1 :estate :( pr_entail_state_shorthtrue&{FLOW,(4,5)=__norm#E}[]
  es_heap:emp
  es_infer_vars: [aaa; aaa'],[aaa,aaa'])
infer_pure_m_1 inp2 :lhs xpure : true
infer_pure_m_1 inp3 :lhs xpure0 : true
infer_pure_m_1 inp4 :rhs xpure : aaa=aaa'
infer_pure_m_1 inp5 :inf vars :[aaa,aaa']
infer_pure_m_1@4 EXIT:(new es,inf pure,rel_ass) :(None,None,[])


# above is wrong; the correct answer can be seen
in ex1b.slk

infer [bbb,bbbp] true |- bbb=bbbp.
print residue.

(==infer.ml#1570==)
infer_pure_m_1@4@3@2
infer_pure_m_1 inp1 :estate :( pr_entail_state_shorthtrue&{FLOW,(4,5)=__norm#E}[]
  es_heap:emp
  es_infer_vars: [bbb; bbbp],[bbb,bbbp])
infer_pure_m_1 inp2 :lhs xpure : true
infer_pure_m_1 inp3 :lhs xpure0 : true
infer_pure_m_1 inp4 :rhs xpure : bbb=bbbp
infer_pure_m_1 inp5 :inf vars :[bbb,bbbp]
infer_pure_m_1@4 EXIT:(new es,inf pure,rel_ass) :(None,Some( bbbp=bbb),[])

=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
