data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

infer [y] true |- y::node<a,b>.
print residue.

infer [y] true |- y::node<a,null>.
print residue.

infer [y] true |- y::ll<n>.
print residue.

infer [y] true |- y::node<a,b> * b::node<c,d>.
print residue.

infer [y] true |- y::node<a,b> * y::ll<m>.
print residue.

infer [y] true |- y::node<a,b> * b::ll<m>.
print residue.

infer [x] x=y  |- y::ll<n>.
print residue.

infer [x] n=0 & x=y  |- y::ll<n>.
print residue.

infer [x] true & x=y |- x::ll<n> .
print residue.

infer [x] true & x=y |- y::ll<n> .
print residue.

infer [ia,ib] y::node<ia,ib> |- y::node<a,b>.
print residue.

infer [y] true |- (exists a: y::node<a,null> & a>0).
print residue.

infer [aa]  y::node<aa,null> |- (exists a: y::node<a,null> & a>0).
print residue.

infer [aa]  y::node<aa,null> |- y::node<a,null> & a>0.
print residue.

infer [m] y::ll<m> |- y::ll<n>.
print residue.

infer [x] x=null |- x::node<_,null> .
print residue.

infer [y] y=null |- y::node<a,b>.
print residue.


