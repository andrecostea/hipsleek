data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.


infer[x] true |- x::ll<n> * y::node<a,b>  .
print residue.

infer [x] true   |- x::node<a,b>*y::ll<n>.
print residue.

infer [x] x=null & n=0 |- x::node<a,b>.
print residue.

infer [n] x=null & n=0 |- x::node<_,_>.
print residue.

infer [y] true   |- x::node<a,b>.
print residue.

infer [x] n<0   |- x::ll<n>.
print residue.

infer [x,y] b::node<1,y>   |- x::node<_,b>*b::node<_,y>*y::node<_,null>.
print residue.
