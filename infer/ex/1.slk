data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

//checkentail true |- x::ll<n>.

//infer[x] x=null |- x::ll<n>  .
// OK

//infer[x] true |- x::ll<n> * y::node<a,b>  .
//infer[x] true |- x::ll<n>.
/*
WHY is es_infer_heap empty?

               es_infer_label:  true & true & {FLOW,(1,20)=__flow}
               es_infer_invs:  ]

WHY isn't below added to infer_heap?
PRECOND:  x::ll<n>[Orig][LHSCase] & true & {FLOW,(1,20)=__flow}
*/

infer [x] x=null & n=0 |- x::node<_,_>.
/*
Result below is UNSOUND:

PRECOND:  x::node<Anon_29,Anon_30>[Orig] & true & {FLOW,(1,20)=__flow}
Infer  (1): Valid.
               es_infer_label:  true & true & {FLOW,(17,18)=__norm}]

*/

//infer [n] x=null & n=0 |- x::node<_,_>.
/*
Got below but expecting n!=0..

Infer  (1): Fail. (must) cause:15.1 x=null |-  x!=null (must-bug).
*/


//infer [n] x::ll<n> |- x::node<_,p> .
//infer [n] x::ll<n> |- x::node<_,null>.
//infer [p] x::node<1,p> |- x::ll<n> .
print residue.
