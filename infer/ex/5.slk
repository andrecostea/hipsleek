data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

// TODO is it useful to infer n!=0 ?
//infer [n] n=0 |- y::ll<n>.
//print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n!=0]
<1>false & false &
{FLOW,(17,18)=__norm}
*/


// (17) fail
// TODO : is the disj necessary?
//infer [y,n] y::ll<n> |- y::node<_,null>.
//print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n=1, y!=null & 1<=n | n<=(0 - 1) & y!=null]
<1>EXISTS(q_56,flted_7_55: q_56::ll<flted_7_55>[Orig] & flted_7_55+1=n & 
n=1 &
*/


// (14)
// seems OK
//infer [n] y::ll<n> |- y::node<_,b>.
//print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n!=0]
<1>EXISTS(flted_7_75: b::ll<flted_7_75>[Orig] & flted_7_75+1=n &
{FLOW,(17,18)=__norm})
*/

// (7) Valid & inferred n=0
infer [n] y=null |- y::ll<n>.  
print residue.
