data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

// ok
infer [y] true |- y::node<a,b> * b::node<c,d>.
print residue.
infer [y] true |- y::node<a,b>.
print residue.
infer [y] true |- y::ll<n>.
print residue.
infer [n] true |- y::ll<n>.
/*
Fail. (may) cause:(failure_code=15.3)  true |-  y!=null;  n=0 | n=n_48 & 1<=n_48 |-  n_48=n (may-bug).
*/
infer [n] n=0 |- y::ll<n>.

// OK
infer [n] n=0 & y=null |- y::ll<n>.

// OK
infer [n] n=1 & y=null |- y::ll<n>.

print residue.


infer [y] true |- y::ll<n> & n=0.
print residue.

// WN : inferred pre make ante false
// not sure if this is good idea in principle..
// Raise failure context instead
infer [x] x=null |- x::node<_,null>.
print residue.
/*
Infer  (1): Fail. (may) cause: Inferred heap made contradiction
*/

infer [n] y::ll<n> |- y=null.
print residue.

infer [n] y::ll<n> |- y::node<_,null>.
print residue.

infer [n] y::ll<n> |- y::node<_,b>.
print residue.

infer [y] y::ll<n> |- y=null.
print residue.

infer [y] y::ll<n> |- y::node<_,null>.
print residue.


// expecting x!=null 
// & flow should be just __norm
infer [x] x=null |- x::node<_,b>.
print residue.
/* got below:
Infer  (15): Valid.
Inferred Heap:[]
Inferred Pure:[ x!=null]
<1>false & false &
{FLOW,(1,20)=__flow}
*/


// expecting x!=null to be inferred
infer [x] x::ll<n> |- x::node<_,b>.
print residue.
/*
Infer  (16): Valid.
<1>true & Anon_172=inf_Anon_173 & b=inf_174 &
{FLOW,(17,18)=__norm}
*/

infer [n] y::ll<n> |- y::node<_,null>.
print residue.
//Inferred Pure:[ n=1, 1<=n | n<=(0 - 1)]
// WN : need better control over Omega.simplify


infer [n] y::ll<n> |- y=null.
print residue.
// Inferred Pure:[ n=0]

infer [n] y::ll<n> |- y::node<a,b>.
print residue.
//Inferred Pure:[ 1<=n | n<=(0 - 1)]
// WN : should be better to use n!=0

infer [y] true |- y::node<a,b> * y::node<_,_>.
print residue.
//Infer  (20): Valid.
//Inferred Heap:[ y::node<inf_269,inf_270>[Orig], y::node<inf_Anon_271,inf_Anon_272>[Orig]]
// WN : if inferred pre is FALSE, better to denote scenario as an error?

infer [y] true |- y::node<a,b> * y::ll<m>.
print residue.


infer [y] true |- y::node<a,b> * b::ll<m>.
print residue.


infer [y] m=-1 |- y::node<a,b> * b::ll<m>.
print residue.
//Inferred Heap:[ y::node<inf_310,inf_311>[Orig], b::ll<inf_m_315>[Orig][LHSCase]]
//Inferred Pure:[ b=inf_311, a=inf_310 & b=inf_311 & inf_m_315=0 - 1]
// inferred pre is false

infer [y,m] m=-1 |- y::node<a,b> * b::ll<m>.
print residue.

infer [y,b] true |- y::node<a,b> * b::ll<m>.
print residue.

infer [y,b] b!=null |- y::node<a,b> * b::ll<m>.
print residue.
