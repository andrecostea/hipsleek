data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

infer [y] b!=null |- y::node<a,b> * b::ll<m>.
print residue.
/*
TODO : should not infer a!=inf_78
Infer  (3): Valid. 
Inferred Heap:[ y::node<inf_78,inf_b_79>@M[Orig]]
Inferred Pure:[ a!=inf_78]
*/

// (11) lhs & rhs -> false but no n
// TODO Loc : should not be a must failure 
infer [n] true  |- n=1 & n=2.
print residue.
/*
Infer  (10): Fail. (must) cause:(failure_code=213)  true |-  n=2 & n=1 (RHS: contradiction).
<1>true & true &
{FLOW,(1,2)=__Error}

*/
