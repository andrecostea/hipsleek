data node {
	int val; 
	node next; 
}.


relation R(int a).

pred llSP<n,R1:relation(int)> == self=null & n=0
  or self::node<v,p> * p::llSP<n-1,R1> & R1(v)
//inv self=null & n=0 | self!=null & n>0.
inv n>=0.

/*
pred ll<n> == self=null & n=0
  or self::node<v,p> * p::ll<n-1> 
inv n>=0.

//OK
infer [R] x::node<a,null> & R(a) |- x::node<v1,null> & v1>=0 .
print residue.


//OK
infer [n] x::ll<n> |- x=null.
print residue.

infer [n] x::llSP<n,R> |- x=null .
print residue.

infer [n,R] x::llSP<n,R> |- x::node<v1,null> .
print residue.

infer [n,R] x::node<a,q>*q::llSP<n,R> & R(a) |- x::node<v1,null> .
print residue.


infer [n,R] x::llSP<n,R> |- x::node<v1,null> .
print residue.

infer [n,R] x::node<a,q>*q::llSP<n,R> & R(a) |- x::node<v1,null> & v1>=0 .
print residue.
*/
infer [n,R] x::llSP<n,R> & R(v1) |- x=null & v1>=0 .
print residue.



