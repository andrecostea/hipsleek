# der-1a.slk  # DONE

// PROBLEM : should allow type annotation
pred_extn pos_sum[R,V:int]<s> ==
      s=0 // base case
   or R::pos_sum<s2> & s=V+s2 & V>=0 
   inv s>=0.

## der-5.slk

WHY --pcp shows data nodes printed twice?

data node {
  int val@VAL
  node next@REC
}
data node2 {
  int val@VAL
  node2 prev@REC
  node2 next@REC
}

data node2 {
  int val@VAL
  node2 prev@REC
  node2 next@REC
}

## err-1-der-5.slk

Fatal error: exception Not_found

## der-2.slk

pred llNNSum<n,s> == extends llNN<> with pos_sum[VAL,REC]<s> .
// need sanity check that n does not exist in RHS

## err-2-der-2.slk

Fatal error: exception Invalid_argument("List.combine")

pred llNNSum2<s> == extends llNN2<> with pos_sum[VAL,REC]<s> .

## der-6.slk
pred_extn hed[V]<n> ==
          n=V
   //inv self!=null // does not entail implied formula
   .

## der-6.slk

pred llhead<n> == extends llNN<> with hed[VAL]<n> .

WHY isn't N=Anon_11 captured in base and recursive cases?

view llhead[]<n:TVar[51]>= 
  
   EBase {2}->EXISTS(flted_13_18,
         Anon_11: self::node<Anon_11,flted_13_18>@M[Orig]&flted_13_18=null&
         {FLOW,(1,22)=__flow})[]
  eor 
   EBase {1}->EXISTS(Anon_12,p: self::node<Anon_12,p>@M[Orig] * 
         p::llhead<n_52>@M[0][Orig][LHSCase]&true&{FLOW,(1,22)=__flow})[]
 
