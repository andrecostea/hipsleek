data node {
	int f1;
	int f2;
	int f3;
	node f4;
	node f5;	
}.

data node2 {
	int f1;
}.

checkentail x.f1::<1> * x.node.f5::<a> * x.f4::<b> |- x::node<r,#,#,u,v>.
print residue.
/*
 checking:  EXISTS(flted_13_30: x::node<flted_13_30,-,-,b,->@M & flted_13_30=1 &
{FLOW,(27,27)=__norm}) |-  EBase exists (E)[](I)[r; #; #; u; v](ex)[]x::node<r,-,-,u,v>@M & true &
       {FLOW,(27,27)=__norm}
Entail(1)=Valid.
 true & r=1 & u=b & v=# & {FLOW,(27,27)=__norm}
// What happend to x.f4::<b> ?

*/

checkentail x.f1::<1> * x.f5::<a> * x.node.f4::<b> |- x::node<r,#,#,u,v>.
print residue.

/*
 checking:  EXISTS(flted_17_41: x::node<flted_17_41,-,-,b,->@M & flted_17_41=1 &
{FLOW,(27,27)=__norm}) |-  EBase exists (E)[](I)[r; #; #; u; v](ex)[]x::node<r,-,-,u,v>@M & true &
       {FLOW,(27,27)=__norm}
Entail(2)=Valid.
 true & r=1 & u=b & v=# & {FLOW,(27,27)=__norm}

// What happend to x.f4::<b> ?
*/


checkentail  x::node<m,n,#,#,#> * x::node<#,#,a,b,c> |- x::node<m,n,a,b,c>.
print residue.

checkentail  x::node<m,n,#,#,#> * x::node<#,#,a,b,c> |- false.
// BUG : should fail
// need normalization so that LHS is not false


checkentail  x::node<m,n,#,#,#> |- x::node<m,n,a,b,c>.
// BUG : should fail
// need to check that LHS is bigger than RHS
print residue.
/*
 checking:  x::node<m,n,-,-,->@M & true & {FLOW,(27,27)=__norm} |-  EBase exists (E)[](I)[a; b; c](ex)[]EXISTS(m_109,
       n_110: x::node<m_109,n_110,a,b,c>@M & m_109=m & n_110=n &
       {FLOW,(27,27)=__norm})
Entail(5)=Valid.
 true & a=# & b=# & c=# & {FLOW,(27,27)=__norm}
// SHOULD FAIL as RHS has more memory
*/

//checkentail x.f5::<a> * x.f4::<b> |- x::node<#,#,#,u,v>.
//checkentail x.node.f5::<a> * x.node.f4::<b> |- x::node<#,#,#,u,v>.
// should translate to below:
//checkentail  x::node<#,#,#,#,a> * x::node<#,#,#,b,#> |- x::node<#,#,#,u,v>.


//checkentail x.f1::<5> * x.f2::<4> * x.f5::<_> |- x::node<5,4,#,#,a>.
// should translate to below:
//checkentail  x::node<5,#,#,#,#> * x::node<#,4,#,#,#> 
//  * x::node<#,#,#,#,_>  |- x::node<5,4,#,#,a>.
