data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or (exists r2: self::node<next = r2> * r2::lseg<n - 1, p>)
         inv n >= 0.

pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
	inv self!=null & tx!=null & n>=1.

lemma self::lseg<n,p> <-> self::lseg<n1,q> * q::lseg<n2,p> & n=n1+n2.
lemma self::ll_tail<t, n> <-> self::lseg<n-1,t> * t::node<_, null>.


//lemma self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::lseg<n, p> <-> (exists a,b: self::lseg<a, r> * r::lseg<b, p> & n=a+b).

//checkentail x::ll_tail<tx,n> |- x::node<v,q>.

//checkentail x::ll_tail<tx,n> & n=1 |- x::node<v,q>.

checkentail x::ll_tail<tx,n> & n=1 |- tx::node<v,q>.
/*
 apply_left_coercion@3 EXIT ExceptionFailure("get_view_original: not a view")Occurred!
 exception in entail check
*/

checkentail x::ll_tail<tx,n> |- tx::node<v,q>.

print residue.
