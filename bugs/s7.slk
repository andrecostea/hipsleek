data node { int val ; node next }.


/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg<b, p> & b=n-1 ; 
     }
     inv n >= 0.

lemma self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

checkentail self::lseg<n,p>& n=2 |- (exists r: self::node<_,r> * r::node<_,q>).

print residue.

checkentail self::lseg<n,p>& n=2 |- self::node<_,r> * r::node<_,q>.

print residue.

checkentail self::lseg<n,p>& n=6 |- self::lseg<a,r> * r::lseg<b,p> & a=3 & b=4.

checkentail self::lseg<n,p>& n=6 |- (exists r: self::lseg<a,r> * r::lseg<b,p> & a=3 & b=4).

print residue.

