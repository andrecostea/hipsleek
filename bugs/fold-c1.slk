data node { int val ; node next }.

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg2<n, p> == 
   case { n=0 -> [] self = p & n = 0 ;
          n!=0 -> [] (exists r2:self::node<next = r2> * r2::lseg2<n - 1, p>) ;
          }
         inv n >= 0.

//lemma self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.


//checkentail x::node<_,q>*q::node<_,nil> |- x::lseg<a,p>.

//checkentail x::node<_,q>*q::node<_,nil> & a>0 |- x::lseg<a,p>.


checkentail x::node<_,q>*q::node<_,nil> & a>0 |- x::lseg2<a,p>.

