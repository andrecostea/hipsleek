data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.


lemma self::lseg<n, p> <- self::lseg<a, r> * r::lseg<b, p> & n=a+b.

/*

lemma self::lseg<n, p> -> (exists a,b: self::lseg<a, r> * r::lseg<b, p> & n=a+b).

lemma self::lseg<n, p> -> self::lseg<a, r> * r::lseg<b, p> & n=a+b.

lemma self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

*/

// checkentail x::lseg<n, p> * p::lseg<n2,q> & n = 2 & n2=5 |- x::lseg<n1, r>.
// valid

// checkentail x::lseg<n, p> & n>5 |- x::lseg<n1, q> & n1 = 4.
//print residue.
//valid but not provable yet

//checkentail x::lseg<n, p> * p::lseg<n2,q> & n=2 & n2=5 |- x::lseg<n1, q> & n1 > 3.

// checkentail x::lseg<n, p> * p::lseg<n2,q> & n=2 & n2=5 |- x::lseg<n1, q>.

//checkentail x::lseg<n, p> & n=5 |- x::lseg<n1, q> & n1=3.

checkentail x::lseg<n, p> & n=5 |- x::lseg<n1, q> * q::lseg<n2,p>.

print residue.




