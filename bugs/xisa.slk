data node {
	int val; 
	node prev;	
	node next;	
}.

pred dll1<> == self::dll_r1<null>
  inv true.

pred dll_r1<p> == self=null
  or self::node<_,p,r> * r::dll_r1<self>   
  inv true.

/*
Example below cannot be captured since there
isn't a way to split the fields in our system.

pred dll2<> == self=null
  or self.prev::null * self::dll_r2<>
  inv true.
pred dll_r2<> == self.next::n *
  (n=null or n.prev::self * n::dll_r2<>)
  inv true.


pred dll2<> == self=null
  or self::node<_,null,p> * p::dll_r2<self>
  inv true.
pred dll_r2<p> == self=null
  or self::node<_,p,n> * n::dll_r2<self>
  inv true.
*/

pred dll3<t> == self=null & t=null
  or self::dll_r3<null,t,null>
  inv true.

pred dll_r3<p,t,a> == 
  self::node<_,p,a> & self=t
  or self::node<_,p,n> * n::dll_r3<self,t,a> & self!=t
  inv true.


//lemma "ht2tail" self::ll_ht<n, h, t> <-> self::ll_tail<n+1,t>.

checkentail x::node<_,null,null> |- x::dll1<> .

checkentail x::node<_,null,null> |- x::dll3<r> .
print residue.


