data node { int val ; node next }.


pred lseg<n, p> == 
   case { n=0 -> [] self = p & n = 0 ;
          n!=0 -> [] self::node<next = r2> * r2::lseg<n - 1, p> ;
          }
         inv n >= 0.

//lemma self::lseg<n,p> <- self::lseg<n1,q> * q::lseg<n2,p> & n=n1+n2.

/*
pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
	inv self!=null & tx!=null & n>=1.

lemma self::lseg<n,p> <-> self::lseg<n1,q> * q::lseg<n2,p> & n=n1+n2.

lemma self::ll_tail<t, n> <-> self::lseg<n-1,t> * t::node<_, null>.
*/

//lemma self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::lseg<n, p> <-> (exists a,b: self::lseg<a, r> * r::lseg<b, p> & n=a+b).

//checkentail x::lseg<n,t> & n=0 |- x::lseg<m,s>.

//checkentail x::lseg<n,t> * t::node<_,null> & n=0 |- x::lseg<m,null>.



//checkentail x::node<_,null> |- x::lseg<m,null>.

//checkentail x::lseg<n,t> * t::node<_,null> & n=0 |- x::node<_,null>.

checkentail x::lseg<n,t> * t::node<_,null> & n=0 |- x::lseg<m,null>.
print residue.
