//Valid.Fail.Fail
data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

//checkentail x::node<1,y> * y::node<1,z> * z::node<2,null> |- x::lseg<3,null> .

//checkentail (exists a,b,r: x::lseg<a, r> * r::lseg<b, p> & n=a+b) |- x::lseg<n, p>.

//lemma "V1" self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma "V2" self::lseg<a, r> * r::lseg<b, p> <- self::lseg<n, p> & n = a + b & a,b >=0.
// Valid

lemma "V1_r1" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

lemma "V1_r2" self::lseg<n, p>  <- self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0.

lemma "V1_r3" self::lseg<n, p>  <- (exists a,b: self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0).

/*

checkentail  (exists r_97,a_98,b_99: r_97::lseg<b_99,p> &
 self_V1=r_97 & a_98=0 & n=b_99+a_98 & 0<=a_98 & 0<=b_99 )
 |- (exists p_95,n: self_V1::lseg<n,p_95> & n=b+a & 0<=a & 0<=b & p_95=p). 

checkentail (exists p_111,flted_6_113,r_114,r_97,a_98,
    b_99: self_V1::node<_,r_114> * r_114::lseg<flted_6_113,p_111> *
    r_97::lseg<b_99,p> & flted_6_113+1=a_98 &
    p_111=r_97 & n=b_99+a_98 & 0<=a_98 & 0<=b_99 ) |- (exists p_95,n: self_V1::lseg<n,p_95> & n=b+a & 0<=a & 0<=b & p_95=p).


*/



