//Valid.Fail.Fail
data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

//checkentail x::node<1,y> * y::node<1,z> * z::node<2,null> |- x::lseg<3,null> .

//checkentail (exists a,b,r: x::lseg<a, r> * r::lseg<b, p> & n=a+b) |- x::lseg<n, p>.

 lemma "V1" self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.
// Valid

/*
run_entail_check:
 NN self::lseg<n,p>@M[Orig][LHSCase] & n=a+b & 0<=a & 0<=b &
{FLOW,(27,27)=__norm} |-  EBase EXISTS(a_1201,b_1202,p_1203,
       r_1200: NN self::lseg<a_1201,r_1200>@M[Orig][LHSCase] * 
       NN r_1200::lseg<b_1202,p_1203>@M[Orig][LHSCase] & a_1201=a & 
       b_1202=b & p_1203=p & {FLOW,(27,27)=__norm})
*/

//lemma "F2" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.
// Fail?


//lemma "F2a" self::lseg<n, p>  <- self::lseg<a, r> * r::lseg<b, p> & n=a+b & a>=0 & b>=0.
// Valid


/*
checkentail
  self::lseg<n,p> & n=b+a & 0<=a & 0<=b 
  |- (exists r: self::lseg<a,r> * r::lseg<b,p>) .
*/
