data node{
	int val;
	node next;
}.


HeapPred P1(node a).
HeapPred P2(node a).
HeapPred P3(node a, node b).

//0
infer [P1] 
   x=null
|- P1(x).
print residue.

infer [P3]
   x::node<_,_>
|- P3(x,y) & x!= null.
print residue.

infer [P3]
   y::node<_,_>
|- P3(x,y) & y!= null.
print residue.

infer [P3]
   y::node<_,_>
|- P3(x,y) & y!= null.
print residue.

//1
infer [P1] 
   self::node<_,p> & p=self
|- P1(p) & p!=null.
print residue.


// expecting it to succeed
/*
//2
infer [P1] 
   self::node<_,p> & p=self
|- P1(p).
print residue.
// expecting it to succeed
*/
/*
//3
infer [P1] 
   self::node<_,p> & p=self
|- P1(self) & self!=null.
print residue.
// expecting it to succeed
*/
//# sp-5c.slk
/*
//4
infer [P1] 
   self::node<_,_> 
|- P1(self) & self!=null.
print residue.
// expecting it to succeed
// self::nde<_,_> --> P1(self)
*/