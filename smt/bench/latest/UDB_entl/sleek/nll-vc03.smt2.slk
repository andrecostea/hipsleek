
data NLL_lvl1_t {
  NLL_lvl1_t next1;
}.

data NLL_lvl2_t {
  NLL_lvl2_t next2;
  NLL_lvl1_t down;
}.

pred lso<out:NLL_lvl1_t> ==
 self = out
or (exists u: self::NLL_lvl1_t<next1 = u> * u::lso<out> & self != out).

pred nll<out:NLL_lvl2_t,boundary:NLL_lvl1_t> ==
 self = out
or (exists u,Z1: self::NLL_lvl2_t<next2 = u,down = Z1> * Z1::lso<boundary> * u::nll<out,boundary> & self != out).

lemma_unsafe "llem_lso" self::lso<out> -> 
 (exists u_19: self::lso<u_19> * u_19::lso<out>).

/*
===========
LEFT LEMMAS
===========
lemma_unsafe "llem_lso" self::lso<out> -> 
 (exists u_19: self::lso<u_19> * u_19::lso<out>.

Lemma "llem_nll":  self::nll<out,boundary>&{FLOW,(1,24)=__flow}[]==> (exists boundary_107,u_14: self::nll<u_14,boundary> * 
u_14::nll<out,boundary_107>&boundary_107=boundary&{FLOW,(1,24)=__flow})[],
Lemma "rev_80":  self::lso<out>&self!=out&{FLOW,(1,24)=__flow}[]==> (exists u_19: u_19::NLL_lvl1_t<out> * self::lso<u_19>&self!=out&
{FLOW,(1,24)=__flow})[]]

============
RIGHT LEMMAS
============
[Lemma "rlem_lso":  self::lso<out>&{FLOW,(1,24)=__flow}[]<== (exists u_104,f_r_105: self::lso<u_104> * u_104::lso<out> * 
out::NLL_lvl1_t<f_r_105>@L&{FLOW,(1,24)=__flow})[],
Lemma "rlem_nll":  self::nll<out,boundary>&{FLOW,(1,24)=__flow}[]<== (exists boundary_165,u_166,f_r_167,f_r_168: self::nll<u_166,boundary> * 
u_166::nll<out,boundary_165> * out::NLL_lvl2_t<f_r_167,f_r_168>@L&
boundary_165=boundary&{FLOW,(1,24)=__flow})[]]
*/

checkentail_exact x1::NLL_lvl2_t<next2 = x2,down = x1_1> * x1_1::NLL_lvl1_t<next1 = x1_2> * x1_2::lso<x1_3> * x1_3::NLL_lvl1_t<next1 = null> * x2::NLL_lvl2_t<next2 = null,down = x2_1> * x2_1::NLL_lvl1_t<next1 = x2_2> * x2_2::NLL_lvl1_t<next1 = null>
         |- x1::nll<null,null>.

expect Valid.

