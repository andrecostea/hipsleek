# lseg_nt0.slk

lemma_safe self::lseg<p> & self!=p 
        -> (exists u: self::lseg<u>*u::node<p>).
// cannot be proven?

lemma_safe self::lseg<p> 
        <- (exists u: self::lseg<u>*u::node<p> & self!=p).
// cannot be proven?
===========================================================
pred dllseg<p,pr,last> == self=p & pr=last
  or (exists a: self::node<pr,a> * a::dllseg<p,self,last>)
 inv true.

# dllseg.slk

Why isn't lem-gen-unsafe working here?

!!! Updated lemma store with unsafe repo::[]
===========================================================
# dllseg0e1.slk

lemma_safe self::dllseg<p,pr,last> & self!=p 
        -> (exists u,l2: self::dllseg<last,pr,l2>*last::node<l2,p>).

Entailing lemma lem_14: Fail. (must) cause: base case unfold failed

Failed to prove lem_14:==> in current context.
Removing invalid lemma ---> lemma store restored.

Why is lemma not provable?
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
