data node {
   node prev;
   node nxt;
}.

pred dllseg<p,pr,last> == self=p & pr=last
  or (exists a: self::node<pr,a> * a::dllseg<p,self,last>)
 inv true.


lemma_safe self::dllseg<p,pr,last> <- 
    (exists u,l2: self::dllseg<u,pr,l2>*u::dllseg<p,l2,last>).

lemma_safe self::dllseg<p,pr,last> 
  -> (exists u,l2: self::dllseg<u,pr,l2>*u::dllseg<p,l2,last>).


lemma_safe self::dllseg<p,pr,last> & self!=p 
        -> (exists u,l2: self::dllseg<last,pr,l2>*last::node<l2,p>).
// why lemma cannot be proven?

/*
dllseg0e1.slk

Why is lemma not provable?

*/