data node {
   node nxt;
}.

pred olseg<p> == self::node<p>
  or (exists a,b: self::node<a> * a::node<b> * b::olseg<p>)
 inv self!=null.

lemma_safe self::olseg<p> <- 
     (exists u,w: self::olseg<u>*u::node<w>*w::node<p>).

lemma_unsafe self::olseg<p> <- 
    (exists u,uu: self::node<uu>*uu::olseg<u>*u::node<p>).

lemma_unsafe self::olseg<p> *p::node<z> <-> 
    (exists uu: self::node<uu>*uu::olseg<z>).

/* 
   add message to say unsafe lemmas added
   complex lemma appln not working ..
*/

checkentail_exact x::node<a>*a::node<p> |- x::olseg<p>.
expect Fail.

checkentail_exact x::node<p> |- x::olseg<p>.
expect Valid.

checkentail_exact x::node<a>*a::node<b> * b::olseg<p> |- x::olseg<p>.
expect Valid.

checkentail_exact x::node<b>*b::olseg<p> |- x::olseg<p>.
expect Fail.


checkentail_exact  b::olseg<p> * p::node<a> * a::node<b> |- b::olseg<b>.
expect Valid.


checkentail_exact  k::node<b> * b::olseg<p> * p::node<a> * a::node<b> |- k::olseg<b>.
expect Fail.

checkentail_exact  k::node<b> * b::olseg<p> * p::node<a> * a::node<b> * b::node<g>|- k::olseg<g>.
expect Valid.


checkentail_exact  b::olseg<p> * p::node<a> |- 
    (exists c: b::node<c> * c::olseg<b>).
expect Valid.
