data node {
  node parent;
  node left;
  node right;
  node next;
}.
 pred tree<> == 
  (exists p_35,D1_36,r_37,n_38: self::node<p_35,D1_36,r_37,n_38>&r_37=null)
   or
(exists p_39,l_40,r_41,D2_42: self::node<p_39,l_40,r_41,D2_42> * 
  l_40::tree<> * r_41::tree<>&r_41!=null)
  inv self!=null.
 pred tll<p:node,ll:node,lr:node> == 
  (exists lr_28,p_21,D1_22,l_23: self::node<p_21,D1_22,l_23,lr_28>&
  l_23=null & self=ll & lr_28=lr) or
(exists p_29,self_30,ll_31,self_32,z_33,
  lr_34,l_24,r_25,D2_26,z_27: self::node<p_29,l_24,r_25,D2_26> * 
  l_24::tll<self_30,ll_31,z_27> * r_25::tll<self_32,z_33,lr_34>&r_25!=null & 
  p_29=p & self_30=self & ll_31=ll & self_32=self & z_33=z_27 & lr_34=lr)
  inv self!=null.
 
// id: 2; line: 25; kind: BIND
 checkentail_exact (exists p1,D,r,n: x'::node<p1,D,r,n>&p'=p & x'=x & t'=t & r=null)
 |-  (exists p2,D1,r1,n1: x'::node<parent',left',right',next'>&next'=n1 & 
right'=r1 & left'=D1 & parent'=p2 & p'=p & x'=x & t'=t & r1=null).
expect Valid.
 
// id: 4; line: 25; kind: BIND
 checkentail_exact (exists p1,l,r,D: x'::node<p1,l,r,D> * l::tree<> * r::tree<>&p'=p & x'=x & 
t'=t & r!=null)
 |-  (exists p2,l1,r1,D1: x'::node<parent',left',right',next'> * l1::tree<> * 
r1::tree<>&next'=D1 & right'=r1 & left'=l1 & parent'=p2 & p'=p & x'=x & 
t'=t & r1!=null).
expect Valid.
 
// id: 6; line: 26; kind: BIND
 checkentail_exact x'::node<p',D,r,n>&parent=p & p'=p1 & x'=x & t'=t & r=null
 |-  x'::node<parent',left',right',next'>&next'=n & right'=r & left'=D & 
parent'=p' & parent=p & p'=p1 & x'=x & t'=t & r=null.
expect Valid.
 
// id: 8; line: 26; kind: BIND
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&parent=p & p'=p1 & x'=x & t'=t & 
r!=null
 |-  x'::node<parent',left',right',next'> * l::tree<> * r::tree<>&next'=D & 
right'=r & left'=l & parent'=p' & parent=p & p'=p1 & x'=x & t'=t & r!=null.
expect Valid.
 
// id: 10; line: 26; kind: PRE
 checkentail_exact x'::node<p',D,r,n>&v'=null & v'=r & parent=p & p'=p1 & x'=x & t'=t & r=null
 |-  x'::node<p',D,r,n>&v'=null & v'=r & parent=p & p'=p1 & x'=x & t'=t & r=null.
expect Valid.
 
// id: 12; line: 26; kind: PRE
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&v'!=null & v'=r & parent=p & 
p'=p1 & x'=x & t'=t & r!=null
 |-  l::tree<> * r::tree<> * x'::node<p',l,r,D>&v'!=null & v'=r & parent=p & 
p'=p1 & x'=x & t'=t & r!=null.
expect Valid.
 
// id: 14; line: 28; kind: BIND
 checkentail_exact x'::node<p',D,r,n>&v' & r=null & parent=p & p'=p1 & x'=x & t'=t
 |-  x'::node<parent',left',right',next'>&next'=n & right'=r & left'=D & 
parent'=p' & v' & r=null & parent=p & p'=p1 & x'=x & t'=t.
expect Valid.
 
// id: 16; line: 33; kind: BIND
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&!(v') & r!=null & parent=p & 
p'=p1 & x'=x & t'=t
 |-  x'::node<parent',left',right',next'> * l::tree<> * r::tree<>&next'=D & 
right'=r & left'=l & parent'=p' & !(v') & r!=null & parent=p & p'=p1 & 
x'=x & t'=t.
expect Valid.
 
// id: 18; line: 33; kind: PRE_REC
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&v'=r & !(v1') & r!=null & 
parent=p & p'=p1 & x'=x & t'=t
 |-  l::tree<> * v'::tree<> * x'::node<p',l,r,D>&v'=r & !(v1') & r!=null & 
parent=p & p'=p1 & x'=x & t'=t.
expect Valid.
 
// id: 21; line: 34; kind: BIND
 checkentail_exact l::tree<> * x'::node<p',l,r,D> * r::tll<x',l',t'>&r!=null & !(v') & 
parent=p & p'=p1 & x'=x & t'=t
 |-  x'::node<parent',left',right',next'> * l::tree<> * r::tll<x',l',t'>&
next'=D & right'=r & left'=l & parent'=p' & r!=null & !(v') & parent=p & 
p'=p1 & x'=x & t'=t.
expect Valid.
 
// id: 23; line: 34; kind: PRE_REC
 checkentail_exact l::tree<> * r::tll<x',l',t'> * x'::node<p',l,r,D>&v'=l & r!=null & !(v1') & 
parent=p & p'=p1 & x'=x & t'=t
 |-  v'::tree<> * r::tll<x',l',t'> * x'::node<p',l,r,D>&v'=l & r!=null & 
!(v1') & parent=p & p'=p1 & x'=x & t'=t.
expect Valid.
 
// id: 26; line: 23; kind: POST
 checkentail_exact x'::node<p',D,r,t'>&res=x' & next=n & v' & r=null & parent=p & p'=p1 & 
x'=x & t'=t
 |-  (exists p2,t1: x::tll<p2,res,t1> & x=res & 
res=x' & next=n & v' & r=null & parent=p & p'=p1 & x'=x & t'=t & t1=t & 
p2=p1).
expect Valid.
 
// id: 32; line: 23; kind: POST
 checkentail_exact (exists l': r::tll<x',l',t'> * x'::node<p',l,r,D> * l::tll<x',v',l'>&
res=v' & l!=null & r!=null & !(v1') & parent=p & p'=p1 & x'=x & t'=t)
 |-  (exists p2,t1: x::tll<p2,res,t1> & v'=res & l!=null & r!=null & !(v1') & parent=p & 
p'=p1 & x'=x & t'=t & t1=t & p2=p1).
expect Valid.