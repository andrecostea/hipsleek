// nlseg3a.slk --imm
// folding with @L node needs to be fixed.

data node {
   node nxt;
}.

pred nlseg<q> == self=q
 or  (exists a: self::node<a> * a::nlseg<q> & self!=q)
 inv true.

lemma_unsafe self::nlseg<p> -> (exists u :self::nlseg<u> * u::nlseg<p>).

lemma_unsafe self::nlseg<p> <- 
      (exists u :self::nlseg<u> * u::nlseg<p> * p::node<_>@L).


checkentail_exact
    (exists u :self::nlseg<u> * u::nlseg<p> * p::node<_>@L)
       |- (exists uu :self::nlseg<uu> * uu::nlseg<p> * p::node<_>@L).
print residue.

checkentail_exact
    (exists u :self::nlseg<u> * u::nlseg<p> * p::node<_>@L)
       |- self::nlseg<uu>.
print residue.


checkentail_exact
    x::node<q>*q::node<r>*r::node<null>
       |- x::node<uu>.
print residue.
