data node {
    int val;
    node next
}.

//== touching linked list segment 
pred lseg<p> == self = p
    or self::node<v,r> * r::lseg<p>.

HeapPred UU(node a,  node c, node d).

pred ls_ho<p> == self = p
    or self::node<v,r> * UU(self,r,p) * r::ls_ho<p> .

/*
infer[H} self::lseg<p> |- self::ls_ho<p>.
print residue.
*/

/*
Maybe we need to use syntax of form:

pred ls_ho[UU]<p> == self = p
    or self::node<v,r> * UU(self,r,p) * r::ls_ho<p> .

*/