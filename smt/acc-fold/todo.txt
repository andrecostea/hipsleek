# elseg.slk

Below seems to have triggered folding and unfolding loop?

pred elseg<p> == self=p
  or (exists a,b: self::node<a> * a::node<b> * b::elseg<p>)
 inv true.

// lemma_safe self::elseg<p> <-> (exists u: self::elseg<u> * u::elseg<p>).

checkentail_exact x::node<a>*a::elseg<p> |- x::elseg<p>.
====================================================================
# smt/acc-fold/nlseg.slk

// below should succeed @L should not be considered
   a residue for --classic reasoning
 <1>p::node<_>@L&p!=x&{FLOW,(21,22)=__norm}[]

checkentail_exact x::node<a>*a::nlseg<p> *  p::node<_>@L
                |- x::nlseg<p>.
print residue.
====================================================================
# nlseg3.slk

 folding with -L not working properly..


pred nlseg<p> == 
  (exists a: self::node<a> * a::node<p>@L)
 inv true.

checkentail x::node<y>*y::node<p> |- x::nlseg<p>.
print residue.

/*
 <1>emp&{FLOW,(21,22)=__norm}[]
[[ SEARCH ==>  Fold ==>  Match ==>  Match ==> ]]
 why @L eaten node up?
*/
====================================================================
# nlseg3d.slk not working for @A

checkentail x::node<_>@A * x::node<_>@A   |-  false.
print residue.
// fail but should have aucceeede..

====================================================================
# nlseg3c.slk not working for @A

not working for unfolding..
====================================================================
# inv1.slk --inv

Can we print name of predicate tgt
with the inferred invariant?

!!! new inv: : n>=0

!!! new inv: : n>=1 & self!=null

!!! new inv: : n>=0
====================================================================
# inv3.slk

pred ll<n> == self = null & n=0
    or self::node2<_,r> * r::ll<n-1>
 inv true.

pred ll3<n> == self::node2<_,null> & n=1
    or self::node2<_,r> * r::ll<n-1>
 inv true.

aux recursive but detected as bad mutual recursion??

!!! new inv: : n>=0
fixcalc: bad mutual recursion detected :"ll"
Fatal error: exception Loc.Exc_located(_, _)


// Seems there is no bottom-up processing of predicates
// where aux predicates are processed before parent predicaets

ll3:={[self,n] -> [] -> []:  exists (NODflted_11_18,NODAnon_13: self>0 && (NODflted_11_18<=0 && n=1)) ||  exists (flted_12_19,NODAnon_14,NODr: (self>0 && ll(NODr,flted_12_19)) && flted_12_19+1=n)
};
bottomupgen([ll3], [1], SimHeur);
====================================================================
inv2.slk --inv mutual recursion?

pred ll2<n> == self = null & n=0
    or self::node2<_,r> * r::ll3<n-1>
 inv true.

pred ll3<n> == self::node2<_,null> & n=1
    or self::node2<_,r> * r::ll2<n-1>
 inv true.

Why fixcalc think this is a bad mutual recursion?

WARNING: _0:0_0:0:View definitions [[ll3,ll]] are mutually recursive
fixcalc: bad mutual recursion detected :"ll"
Fatal error: exception Loc.Exc_located(_, _)


// seems there is no identification of mutual-recursive predicates

ll3:={[self,n] -> [] -> []:  exists (NODflted_11_18,NODAnon_13: self>0 && (NODflted_11_18<=0 && n=1)) ||  exists (flted_12_19,NODAnon_14,NODr: (self>0 && ll(NODr,flted_12_19)) && flted_12_19+1=n)
};
bottomupgen([ll3], [1], SimHeur);
====================================================================
# nlseg4.slk

lemma_safe self::nlseg<p> <- 
      (exists u :self::nlseg<u> * u::nlseg<p> * p::node<_>@L).

 rev lemma cannot be proven yet!

====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
