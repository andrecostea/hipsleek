/*data sec {
  int t;
}.

pred sec1<t> == self::sec<0>
             or self::sec<1>.

lemma_unsafe self::sec1<0> -> self::sec1<1>.

checkentail x::sec1<0> * y::sec1<0> |- y::sec1<0>.
print residue.
*/

pred_prim L<>.
pred_prim H<>.

lemma_unsafe self::L<> -> self::H<>.

checkentail x::L<> * x::L<> |- x::H<> * x::L<>.
print residue.

// L=0 & H=1
checkentail x<=0 |- x<=1.

pred_prim security<h:int>. 

checkentail res::security<r> & r<=0 |- r<=1.

checkentail res::security<r> & r<=0 |- r<=0.

//5
checkentail res::security<r> & r<=0 & r<=1 |- r<=0.

checkentail res::security<r> & r<=0 & r<=1 |- r<=1.

checkentail res::security<r> & (r<=0 | r<=1) |- r<=0.

checkentail x::security<r> & x=y |- (x::security<_>@L & y::security<_>@L).
print residue.
// above requires sleek --imm


data cell {
 int x;
}.

checkentail x::security<r> & x=y |- (x::security<_>@L * y::security<_>@L).
print residue.
expect Fail.
// this should fail but succeeded with --imm

checkentail x::security<r> & x=y |- (x::security<_> * y::security<_>).
print residue.
expect Fail.
// OK

checkentail x::cell<r> & x=y |- (x::cell<_>@L * y::cell<_>@L).
print residue.
expect Fail.
// this should fail but succeeded with --imm
