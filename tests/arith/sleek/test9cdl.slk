data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

//pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
//	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
//	inv n>=1.
	 
lemma self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::ll_tail<t, n> <-> self::lseg<n-1, t> * t::node<_, null>.

//lemma self::lseg<n, p> -> self::lseg<a, r> * r::lseg<b, p> & n = a + b.
	

// checkentail x::ll_tail<p, n> & n = 11 |- x::lseg<3, r1> * r1::lseg<4, r2> * r2::lseg<3, r3>.

checkentail x::lseg<n, p> & n = 5 |- x::lseg<2, y> * y::lseg<3, p>.
