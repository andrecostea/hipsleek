!!! init_tp by default: 
!!! Using z3
!!! init_tp by user: 
!!! Using oc
!!!-dre .*simplify
Starting Omega...oc

(==cpure.ml#6295==)
b_form_simplify @2@1
b_form_simplify  inp1 : true
b_form_simplify @2 EXIT: true

(==astsimp.ml#7708==)
arith_simplify LHS@1
arith_simplify LHS inp1 : true
arith_simplify LHS@1 EXIT: true

(==cpure.ml#6295==)
b_form_simplify @4@3
b_form_simplify  inp1 : (a[5])>0
b_form_simplify @4 EXIT: 0<(a[5])

(==astsimp.ml#7708==)
arith_simplify LHS@3
arith_simplify LHS inp1 : (a[5])>0
arith_simplify LHS@3 EXIT: 0<(a[5])

(==solver.ml#2849==)
simplify_pure_f_old@5
simplify_pure_f_old inp1 : htrue&{FLOW,(4,5)=__norm#E}[]
simplify_pure_f_old@5 EXIT: htrue&{FLOW,(4,5)=__norm#E}[]

(==tpdispatcher.ml#1544==)
simplify-syn@6
simplify-syn inp1 : 0<(a[5])
simplify-syn@6 EXIT: 0<(a[5])

(==trans_arr.ml#2059==)
can_be_simplify@7
can_be_simplify inp1 : true
can_be_simplify@7 EXIT:true

(==trans_arr.ml#2060==)
can_be_simplify@8
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@8 EXIT:true

(==trans_arr.ml#1631==)
can_be_simplify@9
can_be_simplify inp1 : true
can_be_simplify@9 EXIT:true

(==trans_arr.ml#1631==)
can_be_simplify@10
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@10 EXIT:true

(==trans_arr.ml#2133==)
can_be_simplify@11
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@11 EXIT:true

(==tpdispatcher.ml#1544==)
simplify-syn@12
simplify-syn inp1 : 0<a___5___
simplify-syn@12 EXIT: 0<v0

(==solver.ml#7305==)
simplify_htrue@13
simplify_htrue inp1 : htrue
simplify_htrue@13 EXIT: htrue

(==cpure.ml#6295==)
b_form_simplify @16@15@14
b_form_simplify  inp1 : 0<(a[5])
b_form_simplify @16 EXIT: 0<(a[5])

(==mcpure.ml#2345==)
arith_simplify LHS@15@14
arith_simplify LHS inp1 : 0<(a[5])
arith_simplify LHS@15 EXIT: 0<(a[5])

(==solver.ml#8099==)
memo_arith_simplify@14
memo_arith_simplify inp1 : 0<(a[5])
memo_arith_simplify@14 EXIT: 0<(a[5])

(==tpdispatcher.ml#1544==)
simplify-syn@17
simplify-syn inp1 : 0<(a[5])
simplify-syn@17 EXIT: 0<(a[5])

(==trans_arr.ml#2133==)
can_be_simplify@18
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@18 EXIT:true

(==tpdispatcher.ml#1544==)
simplify-syn@19
simplify-syn inp1 : 0<a___5___
simplify-syn@19 EXIT: 0<v0

(==tpdispatcher.ml#1544==)
simplify-syn@20
simplify-syn inp1 : 0<(a[5])
simplify-syn@20 EXIT: 0<(a[5])

(==trans_arr.ml#2133==)
can_be_simplify@21
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@21 EXIT:true

(==tpdispatcher.ml#1544==)
simplify-syn@22
simplify-syn inp1 : 0<a___5___
simplify-syn@22 EXIT: 0<v0

(==trans_arr.ml#2133==)
can_be_simplify@25@24@23
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@25 EXIT:true

(==tpdispatcher.ml#1921==)
can_be_simplify@27@26@24@23
can_be_simplify inp1 : 0<a___5___
can_be_simplify@27 EXIT:true

(==omega.ml#937==)
Omega.simplify_ops@29@28@26@24@23
Omega.simplify_ops inp1 : 0<a___5___
Omega.simplify_ops@29 EXIT: 1<=a___5___

(==tpdispatcher.ml#1914==)
Omega.simplify@28@26@24@23
Omega.simplify inp1 : 0<a___5___
Omega.simplify@28 EXIT: 1<=a___5___

(==tpdispatcher.ml#1961==)
simplify_omega@26@24@23
simplify_omega inp1 : 0<a___5___
simplify_omega@26 EXIT: 1<=a___5___

(==omega.ml#1091==)
can_be_simplify@30@24@23
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@30 EXIT:true

(====)
TP.simplify@24@23
TP.simplify inp1 : 0<(a[5])
TP.simplify@24 EXIT: 1<=(a[5])

(==infer.ml#1068==)
simplify_raw@23
simplify_raw inp1 : 0<(a[5])
simplify_raw@23 EXIT: 1<=(a[5])

(==trans_arr.ml#2133==)
can_be_simplify@33@32@31
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@33 EXIT:true

(==tpdispatcher.ml#1921==)
can_be_simplify@35@34@32@31
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@35 EXIT:true

(==omega.ml#937==)
Omega.simplify_ops@37@36@34@32@31
Omega.simplify_ops inp1 : 1<=a___5___
Omega.simplify_ops@37 EXIT: 1<=a___5___

(==tpdispatcher.ml#1914==)
Omega.simplify@36@34@32@31
Omega.simplify inp1 : 1<=a___5___
Omega.simplify@36 EXIT: 1<=a___5___

(==tpdispatcher.ml#1961==)
simplify_omega@34@32@31
simplify_omega inp1 : 1<=a___5___
simplify_omega@34 EXIT: 1<=a___5___

(==omega.ml#1091==)
can_be_simplify@38@32@31
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@38 EXIT:true

(====)
TP.simplify@32@31
TP.simplify inp1 : 1<=(a[5])
TP.simplify@32 EXIT: 1<=(a[5])

(==infer.ml#1069==)
simplify_raw@31
simplify_raw inp1 : 1<=(a[5])
simplify_raw@31 EXIT: 1<=(a[5])

(==trans_arr.ml#2133==)
can_be_simplify@41@40@39
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@41 EXIT:true

(==tpdispatcher.ml#1921==)
can_be_simplify@43@42@40@39
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@43 EXIT:true

(==omega.ml#937==)
Omega.simplify_ops@45@44@42@40@39
Omega.simplify_ops inp1 : 1<=a___5___
Omega.simplify_ops@45 EXIT: 1<=a___5___

(==tpdispatcher.ml#1914==)
Omega.simplify@44@42@40@39
Omega.simplify inp1 : 1<=a___5___
Omega.simplify@44 EXIT: 1<=a___5___

(==tpdispatcher.ml#1961==)
simplify_omega@42@40@39
simplify_omega inp1 : 1<=a___5___
simplify_omega@42 EXIT: 1<=a___5___

(==omega.ml#1091==)
can_be_simplify@46@40@39
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@46 EXIT:true

(====)
TP.simplify@40@39
TP.simplify inp1 : 1<=(a[5])
TP.simplify@40 EXIT: 1<=(a[5])

(==infer.ml#1083==)
simplify_raw@39
simplify_raw inp1 : 1<=(a[5])
simplify_raw@39 EXIT: 1<=(a[5])

(==trans_arr.ml#2133==)
can_be_simplify@49@48@47
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@49 EXIT:true

(==tpdispatcher.ml#1921==)
can_be_simplify@51@50@48@47
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@51 EXIT:true

(==omega.ml#937==)
Omega.simplify_ops@53@52@50@48@47
Omega.simplify_ops inp1 : 1<=a___5___
Omega.simplify_ops@53 EXIT: 1<=a___5___

(==tpdispatcher.ml#1914==)
Omega.simplify@52@50@48@47
Omega.simplify inp1 : 1<=a___5___
Omega.simplify@52 EXIT: 1<=a___5___

(==tpdispatcher.ml#1961==)
simplify_omega@50@48@47
simplify_omega inp1 : 1<=a___5___
simplify_omega@50 EXIT: 1<=a___5___

(==omega.ml#1091==)
can_be_simplify@54@48@47
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@54 EXIT:true

(====)
TP.simplify@48@47
TP.simplify inp1 : 1<=(a[5])
TP.simplify@48 EXIT: 1<=(a[5])

(==infer.ml#1099==)
simplify_raw@47
simplify_raw inp1 : 1<=(a[5])
simplify_raw@47 EXIT: 1<=(a[5])

(==omega.ml#1091==)
can_be_simplify@55
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@55 EXIT:true
Omega Error Exp:Globals.Illegal_Prover_Format("Omega.omega_of_exp: array, bag or list constraint  a[5]")
 Formula: 1<=(a[5])

(==trans_arr.ml#2133==)
can_be_simplify@59@58@57@56
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@59 EXIT:true

(==tpdispatcher.ml#1921==)
can_be_simplify@61@60@58@57@56
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@61 EXIT:true

(==omega.ml#937==)
Omega.simplify_ops@63@62@60@58@57@56
Omega.simplify_ops inp1 : 1<=a___5___
Omega.simplify_ops@63 EXIT: 1<=a___5___

(==tpdispatcher.ml#1914==)
Omega.simplify@62@60@58@57@56
Omega.simplify inp1 : 1<=a___5___
Omega.simplify@62 EXIT: 1<=a___5___

(==tpdispatcher.ml#1961==)
simplify_omega@60@58@57@56
simplify_omega inp1 : 1<=a___5___
simplify_omega@60 EXIT: 1<=a___5___

(==omega.ml#1091==)
can_be_simplify@64@58@57@56
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@64 EXIT:true

(====)
TP.simplify@58@57@56
TP.simplify inp1 : 1<=(a[5])
TP.simplify@58 EXIT: 1<=(a[5])

(==infer.ml#590==)
simplify_raw@57@56
simplify_raw inp1 : 1<=(a[5])
simplify_raw@57 EXIT: 1<=(a[5])

(==trans_arr.ml#2133==)
can_be_simplify@65@56
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@65 EXIT:true

(==tpdispatcher.ml#1544==)
simplify-syn@66@56
simplify-syn inp1 : 1<=a___5___
simplify-syn@66 EXIT: 1<=v0

(==trans_arr.ml#2133==)
can_be_simplify@69@68@67@56
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@69 EXIT:true

(==tpdispatcher.ml#1921==)
can_be_simplify@71@70@68@67@56
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@71 EXIT:true

(==omega.ml#937==)
Omega.simplify_ops@73@72@70@68@67@56
Omega.simplify_ops inp1 : 1<=a___5___
Omega.simplify_ops@73 EXIT: 1<=a___5___

(==tpdispatcher.ml#1914==)
Omega.simplify@72@70@68@67@56
Omega.simplify inp1 : 1<=a___5___
Omega.simplify@72 EXIT: 1<=a___5___

(==tpdispatcher.ml#1961==)
simplify_omega@70@68@67@56
simplify_omega inp1 : 1<=a___5___
simplify_omega@70 EXIT: 1<=a___5___

(==omega.ml#1091==)
can_be_simplify@74@68@67@56
can_be_simplify inp1 : 1<=a___5___
can_be_simplify@74 EXIT:true

(====)
TP.simplify@68@67@56
TP.simplify inp1 : 1<=(a[5])
TP.simplify@68 EXIT: 1<=(a[5])

(==infer.ml#590==)
simplify_raw@67@56
simplify_raw inp1 : 1<=(a[5])
simplify_raw@67 EXIT: 1<=(a[5])

(====)
i.simplify@56
i.simplify inp1 : 1<=(a[5])
i.simplify inp2 :[a]
i.simplify@56 EXIT: 1<=(a[5])

(====)
simplify_disj_new@75
simplify_disj_new inp1 : 1<=(a[5])
simplify_disj_new@75 EXIT: 1<=(a[5])

(==tpdispatcher.ml#1544==)
simplify-syn@76
simplify-syn inp1 : 1<=(a[5])
simplify-syn@76 EXIT: 1<=(a[5])

(==trans_arr.ml#2059==)
can_be_simplify@77
can_be_simplify inp1 : true
can_be_simplify@77 EXIT:true

(==trans_arr.ml#2060==)
can_be_simplify@78
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@78 EXIT:true

(==trans_arr.ml#1631==)
can_be_simplify@79
can_be_simplify inp1 : true
can_be_simplify@79 EXIT:true

(==trans_arr.ml#1631==)
can_be_simplify@80
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@80 EXIT:true

(==tpdispatcher.ml#1544==)
simplify-syn@81
simplify-syn inp1 : (0<(a[5]) | 1>(a[5]))
simplify-syn@81 EXIT: (0<(a[5]) | 1>(a[5]))

(==trans_arr.ml#2059==)
can_be_simplify@82
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@82 EXIT:true

(==trans_arr.ml#2060==)
can_be_simplify@83
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@83 EXIT:true

(==trans_arr.ml#1631==)
can_be_simplify@84
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@84 EXIT:true

(==trans_arr.ml#1631==)
can_be_simplify@85
can_be_simplify inp1 : 0<(a[5])
can_be_simplify@85 EXIT:true

(==solver.ml#8380==)
simplify_pure_f_old@86
simplify_pure_f_old inp1 : htrue&1<=(a[5])&{FLOW,(4,5)=__norm#E}[]
simplify_pure_f_old@86 EXIT: htrue&1<=(a[5])&{FLOW,(4,5)=__norm#E}[]

(==trans_arr.ml#2133==)
can_be_simplify@87
can_be_simplify inp1 : 1<=(a[5])
can_be_simplify@87 EXIT:true

(==tpdispatcher.ml#1544==)
simplify-syn@88
simplify-syn inp1 : 1<=a___5___
simplify-syn@88 EXIT: 1<=v0

(==solver.ml#2849==)
simplify_pure_f_old@89
simplify_pure_f_old inp1 : htrue&1<=(a[5])&{FLOW,(4,5)=__norm#E}[]
simplify_pure_f_old@89 EXIT: htrue&1<=(a[5])&{FLOW,(4,5)=__norm#E}[]

Entail (1) : Valid. 

Residue:
 <1>htrue&1<=(a[5])&{FLOW,(4,5)=__norm#E}[]
 inferred pure: [1<=(a[5])]

Stop Omega... 17 invocations 
SAT Count   : 5
SAT % Hit   : 60.%
IMPLY Count : 5
IMPLY % Hit : 40.%
Time(cache overhead) : 0.001294 (seconds)

!!! log(small):(0.058069,24)
Total verification time: 0.094398 second(s)
	Time spent in main process: 0.07478 second(s)
	Time spent in child processes: 0.019618 second(s)

