!!!-dre compute_def

!!!Full processing file "ex23-array-recursive.ss"
Parsing file "ex23-array-recursive.ss" by default parser...


!!! processing primitives "["prelude_aux.ss"]

Starting Omega.../usr/local/bin/oc

Checking procedure foo2$int[]... rel_rhs  P2(a[5],a'[5],res)
inf_rel_ls  ( res=v_int_18_1178' & a_1252[5]=(a[5])+1 & (a[5])<=4 & P2(a_1252[5],a'[5],v_int_18_1178') & forall(i:(!(i!=5) | a_1252[i]=a[i]))  P2(a[5],a'[5],res))
rel_rhs  P2(a[5],a'[5],res)
inf_rel_ls  ( v_int_21_1184'=res & a'=a & a'[5]=res-6 & a[5]=res-6 & 11<=res  P2(a[5],a'[5],res))

!!! The above parts are almost the same, except for the 'forall'

Procedure foo2$int[] SUCCESS.


*************************************
******pure relation assumption*******
*************************************
[RELDEFN P2: ( a_1252[5]=(a[5])+1 & (a[5])<=4 & true & P2(a_1252[5],a'[5],res)) -->  P2(a[5],a'[5],res),
RELDEFN P2: ( a'=a & res=(a[5])+6 & a'[5]=a[5] & 5<=(a[5])) -->  P2(a[5],a'[5],res)]
*************************************

!!!  P2(a[5],a'[5],res) = ( a'=a & res=(a[5])+6 & a'[5]=a[5] & 5<=(a[5])) \/ ( a_1252[5]=(a[5])+1 & (a[5])<=4 & true & P2(a_1252[5],a'[5],res))Pi.infer_pure

!!! The above parts are the same.

!!! n_base:2
(==cvutil.ml#972==)
compute_def@1
compute_def inp1 :rel_fml:  P2(a[5],a'[5],res)
pf:  ((a'=a & res=(a[5])+6 & a'[5]=a[5] & 5<=(a[5])) |

(exists(fc_1255:
        exists(a_1252:
                exists(fc_a_1254:P2(fc_a_1254,fc_1255,res) & fc_a_1254=a_1252[5]) & a_1252[5]=(a[5])+1) & fc_1255=a'[5]) & (a[5])<=4))

compute_def inp2 :[a]
compute_def@1 EXIT:P2:={[a___5___] -> [PRIa___5___,res] -> []: PRIa___5___=a___5___ && PRIa___5___=a___5___ && (PRIa=a && res=a___5___+6 && PRIa___5___=a___5___ && 5<=a___5___ ||  (exists (fc_1255: (exists (a_1252: (exists (fc_a_1254:P2(fc_a_1254,fc_1255,res) && fc_a_1254=a_1252___5___))  && a_1252___5___=a___5___+1))  && fc_1255=PRIa___5___))  && a___5___<=4)
};

!!! bottom up
!!! bottom_up_fp:[( P2(a[5],a'[5],res), (a'[5])>=5 & a'[5]=a[5] & a=a' & (a'[5])+6=res)]
!!! fixpoint:[( P2(a[5],a'[5],res), (a'[5])>=5 & a'[5]=a[5] & a=a' & (a'[5])+6=res, true, true)]
!!! REL POST :  P2(a[5],a'[5],res)
!!! POST:  (a'[5])>=5 & a'[5]=a[5] & a=a' & (a'[5])+6=res
!!! REL PRE :  true
!!! PRE :  a[5]=a'[5] & 5<=(a'[5])Omega Error Exp:Globals.Illegal_Prover_Format("Omega.omega_of_exp: array, bag or list constraint  a'[5]")
 Formula: a[5]=a'[5] & 5<=(a'[5])

Post Inference result:
foo2$int[]
 EBase htrue&a[5]=a'[5] & 5<=(a'[5]) & MayLoop[]&{FLOW,(4,5)=__norm#E}[]
         EAssume ref [a]
           emp&(a'[5])>=5 & a'[5]=a[5] & a=a' & (a'[5])+6=res&
           {FLOW,(4,5)=__norm#E}[]
           

Checking procedure foo3$int... rel_rhs  P2(a,a',res)
inf_rel_ls  ( a_1269<=4 & res=v_int_36_1155' & a=a_1269 & P2(1+a_1269,a',v_int_36_1155')  P2(a,a',res))
rel_rhs  P2(a,a',res)
inf_rel_ls  ( 11<=v_int_39_1158' & a=v_int_39_1158'-6 & a'=v_int_39_1158'-6 & 
res=v_int_39_1158'  P2(a,a',res))

Procedure foo3$int SUCCESS.


*************************************
******pure relation assumption*******
*************************************
[RELDEFN P2: ( a<=4 & P2(1+a,a',res)) -->  P2(a,a',res),
RELDEFN P2: ( res=a'+6 & a=a' & 5<=a') -->  P2(a,a',res)]
*************************************

!!!  P2(a,a',res) = ( res=a'+6 & a=a' & 5<=a') \/ ( a<=4 & P2(1+a,a',res))Pi.infer_pure

!!! n_base:2
(==cvutil.ml#972==)
compute_def@2
compute_def inp1 :rel_fml:  P2(a,a',res)
pf:  ((res=a'+6 & a=a' & 5<=a') | 

(exists(fc_1281:P2(fc_1281,a',res) & fc_1281=1+a) & a<=4))

compute_def inp2 :[a]
compute_def@2 EXIT:P2:={[a] -> [PRIa,res] -> []: (res=PRIa+6 && a=PRIa && 5<=PRIa ||  (exists (fc_1281:P2(fc_1281,PRIa,res) && fc_1281=1+a))  && a<=4)
};

!!! bottom up
!!! bottom_up_fp:[( P2(a,a',res), ((4>=a & 11=res & 5=a') | (a'>=5 & a'=a & a'+6=res)))]
!!! fixpoint:[( P2(a,a',res), ((4>=a & 11=res & 5=a') | (a'>=5 & a'=a & a'+6=res)), true, true)]
!!! REL POST :  P2(a,a',res)
!!! POST:  ((4>=a & 11=res & 5=a') | (a'>=5 & a'=a & a'+6=res))
!!! REL PRE :  true
!!! PRE :  true
Post Inference result:
foo3$int
 EBase htrue&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
         EAssume ref [a]
           emp&((4>=a & 11=res & 5=a') | (a'>=5 & a'=a & a'+6=res))&
           {FLOW,(4,5)=__norm#E}[]
           
Stop Omega... 131 invocations 
0 false contexts at: ()

!!! log(small):(0.150471,305)
Total verification time: 0.799356 second(s)
	Time spent in main process: 0.703526 second(s)
	Time spent in child processes: 0.09583 second(s)

