(* syntaxx.ml - template for syntax definitions *)

let f ch = Std.fprintf ch "\
(* This file is generated by ocfg.ml from %s. *)
(* %ssyntax.ml - syntax definitions and helpers. *)

(*---- Syntax definitions. *)

type _info = string
and _char = string
and _ident = string
and _int64 = int64
and _int32 = int32
and _int = int
and _float = float
and _double = float
and _string = string


%a
(* The function [show] below must be defined independently of the rest
of [*_sexp] (ie. do not use [let rec]), or type errors result. *)

(*---- Show as symbolic expressions (sexp). *)

let showf format = Std.showf format
let list_sexp f s = \"[\" ^ Listx.showz f s ^ \"]\"
let bool_sexp = Std.bool_show
let option_sexp = Std.opt_sexp
let string_sexp = Strx.code

let rec _info_sexp x = x
and _char_sexp x = x
and _ident_sexp x = string_sexp x
and _int64_sexp x = Int64.to_string x ^ \"l\"
and _int32_sexp x = Int32.to_string x
and _int_sexp x = string_of_int x
and _float_sexp x = string_of_float x ^ \"f\"
and _double_sexp x = string_of_float x^ \"d\"
and _string_sexp x = string_sexp x


%a
(*---- Show as tag expressions (tag). *)

let list_tag f s = \"[\" ^ Listx.showz f s ^ \"]\"
let bool_tag = Std.bool_show
let option_tag = Std.opt_sexp
let string_tag = Strx.code

let rec _info_tag _ = \"\"
and _char_tag _ = \"char\"
and _ident_tag x = \"id\"
and _int64_tag _ = \"int64\"
and _int32_tag _ = \"int32\"
and _int_tag _ = \"int\"
and _float_tag _ = \"float\"
and _double_tag _ = \"double\"
and _string_tag x = \"string\"


%a
(*---- Show as source code (src). *)

let list_src = Listx.showz
let list_src_sep = Listx.show
let bool_src = Std.bool_src
let option_src = Std.opt_show
let string_src = Strx.code

let rec _info_src x = \"\"
let rec _char_src x = x
and _ident_src x = x
and _int64_src x = Int64.to_string x ^ \"l\"
and _int32_src x = Int32.to_string x
and _int_src x = string_of_int x
and _float_src x = string_of_float x ^ \"f\"
and _double_src x = string_of_float x ^ \"d\"
and _string_src x = string_src x


%a
(*---- Maps (map). *)

let list_map = Listx.map
let bool_map x = x
let option_map = Std.opt_map

let rec _info_map x = x
and _char_map x = x
and _ident_map x = x
and _int64_map x = x
and _int32_map x = x
and _int_map x = x
and _float_map x = x
and _double_map x = x
and _string_map x = x


%a
(*---- Iterators (iter). *)

let list_iter = Listx.iter
let bool_iter x = ()
let option_iter = Std.opt_iter

let rec _info_iter x = ()
and _char_iter x = ()
and _ident_iter x = ()
and _int64_iter x = ()
and _int32_iter x = ()
and _int_iter x = ()
and _float_iter x = ()
and _double_iter x = ()
and _string_iter x = ()


%a
"
