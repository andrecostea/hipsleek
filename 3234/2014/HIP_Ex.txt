// (1) Given a method where i,j are in-out parameters.
//     write the strongest postcondition involving i,j,i',j'
//     for swap method below

void swap (ref int i, ref int j)
  requires true 
  ensures true; // Write the correct Postcondition
{
  int c=i;
  i=j;
  j=c;  
}

// (2) Add strongest postcondition for the swap method
//     below over cell data structures.

data cell {int val;}

void swap (cell i, cell j)
  requires i::cell<a> & i=j
  ensures  true; // Write the correct Postcondition
  requires i::cell<a>*j::cell<b>
  ensures  true; // Write the correct Postcondition
{
	int c=i.val;
	i.val = j.val;
	j.val = c;	
}

// (3)  Use multiple specifications to give another 
//      pre and post condition for the following methods
//      using min(a,b) and max(a,b) constructs

int minf(int i, int j)  
  requires true
  ensures i<=j & res=i or i>=j & res=j;
{
	if (i<j) return i;
	else return j;
}

int maxf(int i, int j)  
  requires true
  ensures i<=j & res=j or i>=j & res=i;
{
	if (i>j) return i;
	else return j;
}

// (4) Change each of the MayLoop below to
//     either (i) Term[..] or (ii) Loop, so that 
//     termination or non-termination property for 
//     Ackermann function is completely proven.

int Ack(int m, int n) 
case {
  m<0 -> requires MayLoop	       
         ensures true;
  m=0 -> requires MayLoop		      
         ensures res=n+1;
  m>0 -> case 
          { 
	    n<0 -> requires MayLoop       
                   ensures true;
            n>=0 -> requires MayLoop 
                    ensures res>0;
          }  
}
{ 
	if (m==0) return n+1;
    	else if (n==0) return Ack(m-1,1);
  	else return Ack(m-1, Ack(m,n-1));
}

// (5) Change each of the MayLoop below to
//     either (i) Term[..] or (ii) Loop, so that 
//     termination or non-termination property for 
//     gcd function is completely proven.

int gcd(int m, int n)
case {
 m=n -> requires MayLoop ensures res=m;		
 m!=n ->
  case {
    m <= 0 -> requires MayLoop ensures true;	
    m > 0 -> 
    case {
	  n <= 0 -> requires MayLoop ensures true; 
	  n > 0 -> requires MayLoop ensures res>0; 
	}
  }
}
{
   if (m == n) return m;
   else if (m > n) return gcd(m-n, n);
   else return gcd(m, n-m);
}
