// must bug via predicates?
data node { int val ; node next }.

pred pos_ll<n> == self = null & n = 0
	or self::node<d,r> * r::pos_ll<n - 1> & d>0
	inv n >= 0.

pred neg_ll<n> == self = null & n = 0
	or self::node<d,r> * r::neg_ll<n - 1> & d<0
	inv n >= 0.
/*
// 1. OK must fail
 checkentail x>3 |- x<=0 .

// 2. OK valid
 checkentail x>3 |- x>0 .


// 3. OK Valid
checkentail x::pos_ll<n> & n=0|- x::neg_ll<n>.

// 4. OK may fail 
checkentail x::pos_ll<n> |- x::neg_ll<n> & n>0.


// 5. OK must fail
checkentail x::pos_ll<m> & m=0 |- x::neg_ll<n> & n>0.



// 6. OK may failure 
checkentail x::pos_ll<n> |- x::neg_ll<n> .

// 7. OK may_error
checkentail x>3 |- x>5 & flow __Error.

*/

// 8. MUST error but detected as Valid
checkentail x>3 |- x>0 & flow __Error.

// 9. VALID but detected as must :
checkentail x>3 |- x<=0 & flow __Error .

print residue.
