# ex13c1.slk

infer [H1,P] H1(q) * s::char_star<v,q> & v!=0 |- P(q).
print residue.

GOT:
 <1>s::char_star<v,q>@M&v!=0&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [H1(q)&true --> P(q)&true]

Expects:
   H1(q) | s::char_star<v,q> --> P(q)

infer [H1,P,@leak] H1(q) * s::char_star<v,q> & v=0 |- true.
print residue.

GOT:
 <1>emp&v=0&{FLOW,(20,21)=__norm#E}[]

Expects:
   H1(q) | s::char_star<v,q> --> emp 
===========================================================================
# ex13c3.slk

infer [P] p::node2<_,null> * s::node2<_,p> |- P(p,s).
print residue.

GOT:
Starting Omega.../usr/local/bin/oc
 <1>s::node2<Anon_13,p>@M&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [p::node2<Anon_12,flted_9_18>@M&
                   flted_9_18=null --> P(p,s@NI)&true]

# Why did we not obtain below. Do we need some flag?
  p::node2<_,null> | s::node2<_,p> --> P(p,s)

===========================================================================
# ex13c4.slk

infer [H1,@leak] H1(q)  |- emp.

# Why isn't classic inference working?

Entail (2) : Fail.(may) cause: H1(q)&{FLOW,(20,21)=__norm#E}[]: possible memory leak failure : residue is forbidden.

===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================

