==================================================================
# bug2.ss

# Is termination proving assumption too strong here?
# lemma search creates choice! should not be more problem ..

Termination checking result: 
(55)->(55) (ERR: invalid transition)  Term[100; k-n] ->  MayLoop[]


Checking procedure while2$STR~STR... 
Procedure while2$STR~STR SUCCESS.


Termination checking result: 
(70)->(70) (ERR: invalid transition)  Term[101; k-n] ->  MayLoop[]
==================================================================
# ex3.c

Currently translate char* to int*.
Perhaps, we should use string type?

 char *(cstrcat)(char *s1, const char *s2)
 /*@ 
     requires true
     ensures true;
 */
 {
     char *s = s1;
     s++;
     char x = *s2;
     *s = x;
     s++;
     s2++;
     return s1;
 }

===>

int_star cstrcat$int_star~int_star(  int_star s1,  int_star s2)static  EBase 
   htrue&{FLOW,(4,5)=__norm#E}[]
   EBase 
     emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
     EAssume 
       htrue&{FLOW,(4,5)=__norm#E}[]
dynamic  EBase 
   hfalse&false&{FLOW,(4,5)=__norm#E}[]
{((int_star s;
int x);
{((((((s = s1;
s = {((int v_int_27_1198;
v_int_27_1198 = 1);
__pointer_add__int_star__int__$int_star~int(s,v_int_27_1198))});
x = bind s2 to (value_28_1199,offset_28_1200) [read] in 
value_28_1199);
bind s to (value_29_1201,offset_29_1202) [write] in 
value_29_1201 = x);
s = {((int v_int_30_1207;
v_int_30_1207 = 1);
__pointer_add__int_star__int__$int_star~int(s,v_int_30_1207))});
s2 = {((int v_int_31_1212;
v_int_31_1212 = 1);
__pointer_add__int_star__int__$int_star~int(s2,v_int_31_1212))});
ret# s1)})}

{(20,1),(33,2)}

==================================================================
# bug4.ss -p while2

void while2(ref str s1,ref str s2)
  requires s1::str<_,q>*q::BADS<> * s2::WFS<n,k> & Term[k-n]
  ensures s1::WFSeg<k-n,pp>*pp::str<0,qq>*qq::BADS<> 
  * s2'::str<0,qqq> * qqq::BADS<> & pp=s1'; //

Why is there a performance bug when we used pp=s1'?

Checking procedure while2$str~str... [omega.ml]Timeout when checking sat for 
10. Restarting Omega after ... 249 invocations Stop Omega... 249 invocations [omega.ml]Timeout when checking sat for 
10. Restarting Omega after ... 263 invocations Stop Omega... 263 invocations [omega.ml]Timeout when checking sat for 
10. Restarting Omega after ... 274 invocations Stop Omega... 274 invocations 
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
