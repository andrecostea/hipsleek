pred_prim Trans@trans{%P}<sender,receiver>.
pred_prim Sess@session{%P}<>.
pred_prim Chan@channel{%P}<>.
pred_prim S@send{-%P}<a@IP>.
pred_prim R@receive{+%P}<a@IP>.
pred_prim Seq@sequence{%P,%P}<>.
pred_prim SOr@disjunction{%P}<>.
/*pred_prim Pred@spred{%P}<>.*/

/* orders */
pred_prim Event@event<peer,id:int>.
pred_prim HB@hb{%P, %P}<>.
pred_prim CB@cb{%P, %P}<>.

/* protocol lang related */
pred_prim Assume@assumed{%P}<>. 
pred_prim Guard@guard{%P}<>.
pred_prim Peer@peer{%P}<>.

/* orders relation */
/* need to sync this rel definitions with chr_orders_prelude */
relation oev@event(int n,int m).
relation ohb@hb(int n1,int m1,int n2,int m2).
relation ocb@cb(int n1,int m1,int n2,int m2).
/* sleek relations */
relation ev@sevent(int n).
relation hb@shb(int n1,int n2).
relation hbp@shbp(int n1,int n2).
relation cb@scb(int n1,int n2).
relation snot_eq(int a,int b).


/* apply A+ before G- */
lemma_norm@0 "A+" self::Chan{@S Assume{%P}<>;;%R}<> -> self::Chan{@S %R}<> * %P.
/* to check if * %P is neccessary in the body of this lemma */
lemma_norm@1 "G-" self::Chan{@S Guard{%P}<>;;%R}<> * %P -> self::Chan{@S %R}<> * %P.
