sleek_include 'msess/notes/node.slk'.
sleek_include 'msess/notes/hodef.slk'.

//1
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(b2, 3, c2,5)] }<>;;!1}<>
           & ["chr": hb(b1, 2, c1,4) ] 
|- c::Chan{@S !1}<>.
expect Valid.                                                                    
print residue.

//2
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(b2, 3, c2,5)] }<>;;!1}<>
           & v=4 & ["chr": hb(b1, 2, c1,v) ] 
|- c::Chan{@S !1}<>.
expect Valid.                                                                    
print residue.

//3
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(b2, 3, c2,5)] }<>;;!1}<>
           & v=5 & ["chr": hb(b1, 2, c1,v) ] 
|- c::Chan{@S !1}<>.
expect Fail.                                                                    
print residue.

//4
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(b2, 3, c2,5)] }<>;;!1}<>
           & ["chr": hb(b1,2,c0,4) & hb(c0,4,c1,4)]
|- c::Chan{@S !1}<>.
expect Valid.                                                                    
print residue.

//5
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(b2, 3, c2,5)] }<>;;!1}<>
           & ["chr": hb(b1,2,c0,5) & hb(c0,4,c1,4)]
|- c::Chan{@S !1}<>.
expect Fail.                                                                    
print residue.

//6
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(b2, 3, c2,5)] }<>;;!1}<>
           & ["chr": cb(b1,2,c0,2) & hb(c0,2,c1,4)]
|- c::Chan{@S !1}<>.
expect Valid.                                                                    
print residue.

//7
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(b2, 3, c2,5)] }<>;;!1}<>
           & ["chr": cb(b1,2,c0,2) & hb(c0,2,c1,3) & hb(c1,3,c1,4)]
|- c::Chan{@S !1}<>.
expect Valid.                                                                    
print residue.

//8 needs to trigger assume first
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S Assume{emp & ["chr": hb(c0, 2, c1,3)] }<>;;!1}<>
           & ["chr": cb(b1,2,c0,2) & hb(c1,3,c1,4)]
|- c::Chan{@S !1}<>.
expect Valid.                                                                    
print residue.


//9 
checkentail c::Chan{@S Guard{emp & ["chr": hb(b1, 2, c1,4)] }<>;;!1}<> *
           c2::Chan{@S !1}<>
           & ["chr": cb(b1,2,c0,2) & hb(c1,3,c1,4)]
|- c::Chan{@S !1}<>.
expect Fail.                                                                    
print residue.

