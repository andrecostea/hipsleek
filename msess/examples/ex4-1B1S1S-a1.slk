sleek_include 'msess/notes/hodef.slk'. 


//1
checkentail x::Sess{@S aa!0;;aa?emp & 0<=msg}<> |- x::Sess{@S aa!emp & 0<=msg;;aa?0}<>.
expect Fail.


//2
checkentail x::Sess{@S aa!emp & 0<=msg;;aa?0;;aa!0}<>|- x::Sess{@S aa!0;;aa?emp & 0<=msg;;aa!0}<> .
expect Valid.

//3
checkentail x::Sess{@S aa!emp & 0<=msg;;aa?0;;bb!0}<>|- x::Sess{@S aa!0;;aa?emp & 0<=msg}<> .
expect Valid.

//4
checkentail x::Sess{@S aa!0 or aa!1}<>|- x::Sess{@S aa!0 or aa!1}<>.
expect Valid.

/*
pred_sess_proj pp17<aa> == aa!0;;aa?emp & 0<=msg.
pred_sess_proj pp18<aa> == aa!emp & 0<=msg;;aa?0.
//12
checkentail x::pp17<b> |- x::pp18<b>.
expect Fail.

//13
checkentail x::pp18<b> |- x::pp17<b>.
expect Valid.

*/


//5
checkentail
 x::Sess{ self::Seq{ aa::S{ - emp&0<=msg}<>,
          self::Seq{ aa::R{ + emp&msg=0}<>, bb::S{ - emp&msg=0}<>}<>}<>}<>
|- x::Sess{ self::Seq{ aa::S{ - emp&msg=0}<>, self::Seq{aa::R{ + emp&0<=msg}<>, emp}<>}<>}<>.

//6
checkentail
 x::Sess{ self::Seq{ aa::S{ - emp&0<=msg}<>,
          self::Seq{ aa::R{ + emp&msg=0}<>, bb::S{ - emp&msg=0}<>}<>}<>}<>
|- x::Sess{ self::Seq{ aa::S{ - emp&msg=0}<>, self::Seq{aa::R{ + emp&0<=msg}<> or aa::R{+ mgs=0}<>, emp}<>}<>}<>.

expect Fail. //because of classical reasoning

//7
checkentail
 x::Sess{ self::Seq{ aa::S{ - emp&0<=msg}<>,
          self::Seq{ aa::R{ + emp&msg=0}<>, emp}<>}<>}<>
|- x::Sess{ self::Seq{ aa::S{ - emp&msg=0}<>, self::Seq{aa::R{ + emp&0<=msg}<> or aa::R{+ mgs=0}<>, emp}<>}<>}<>.

expect Valid.


//8
checkentail bb::S{ - emp&msg=0}<> |- emp.
expect Valid.

//9
checkentail_exact bb::S{ - emp&msg=0}<> |- emp.
expect Fail.

//10
checkentail x::Sess{@S aa!emp & 0<=msg;;aa?0;;(bb!0)*(bb!1);;aa!0}<>|- x::Sess{@S aa!0;;aa?emp & 0<=msg;;(bb!0)*(bb!1);;aa!0}<> .
expect Valid.

//11
checkentail x::Sess{@S (bb!0)*(bb!1)}<>|- x::Sess{@S (bb!0)*(bb!1)}<> .
expect Valid.

//12
checkentail bb::S{ - msg=1}<> * bb::S{ - msg=0}<>|- bb::S{ - msg=1}<> * bb::S{ - msg=0}<>.
expect Valid.
print residue.

pred_prim P{- %P}<>.

checkentail x::P{- a=1}<> * x::P{- a=2}<> * y::P{- a=1}<> |- x::P{- a=2}<> *  y::P{- a=1}<> .
print residue.