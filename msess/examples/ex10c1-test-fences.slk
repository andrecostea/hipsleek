sleek_include 'msess/notes/node.slk'.
sleek_include 'msess/notes/hodef.slk'.


pred_sess_proj GSa<> == ?v#v>=1;;!v#v>0;;((?1;;?v#v::Addr<_>;;!v#v::DDate<_,_,_>) or ?0).
pred_sess_proj GSb<> == (!1) or (!0).
pred_sess_proj GSb1<> == !1.

pred_prim Ff<id:int>. //full
pred_prim Fp<id:int,p>. //partial
pred_prim Fm<id:int>.   //minus
                                           
checkentail c::Ff<1> |- c::Ff<1>.
expect Valid.
                                                                                      
checkentail c::Ff<2> |- c::Ff<1>.
expect Fail.

                                           
checkentail c::Fp<1,0.5> |- c::Fp<1,0.6>.
expect Fail.

checkentail c::Fp<1,0.5+0.5> |- c::Fp<1,1.0>.
expect Valid.
print residue.

                                           
lemma_safe self::Fp<id,p1> * q::Fp<id,p2> & self=q & m=p1+p2 <-> self::Fp<id,m>.
lemma self::Fp<id,m> & m=p1+p2 <-> self::Fp<id,p1> * self::Fp<id,p2>.
lemma self::Fp<id,m> <-> (exists p1, p2: self:: Fp< id, p1> * self:: Fp< id, p2> & m=p1+p2).
                                           
checkentail c::Fp<1,0.5> * c::Fp<1,0.5> |- c::Fp<1,1.0>.
expect Valid.
print residue.

checkentail c::Fp<1,1> |- c::Fp<1,0.5> * c::Fp<1,0.5>.
expect Valid.
print residue.


lemma  self::Fp<id,a> * self::Fp<id,b> & a+b=1 -> self::Ff<id>.

checkentail c::Fp<1,0.5> * c::Fp<1,0.5> |- c::Ff<id>.
expect Valid.
print residue.

checkentail c::Fp<1,0.6> * c::Fp<1,0.5> |- c::Ff<id>.
expect Fail.
print residue.

checkentail c::Fp<1,0.3> * c::Fp<1,0.5> |- c::Ff<id>.
expect Fail.
print residue.

//lemma for 
//lemma  self::Ff<id>@L <-> self::Fm<id>.
lemma  self::Fm<id> <- self::Ff<id>@L.
                                           
checkentail c::Ff<1> |- c::Fm<1>.
expect Valid.
print residue.
