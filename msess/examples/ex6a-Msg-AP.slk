sleek_include 'msess/notes/hodef.slk'.
sleek_include 'node.slk'.

pred_prim Msg<a>.

//1
checkentail x::Sess{@S ?msg::Msg<y>  * y::node<_,_>;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> * yy::node<_,_>;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Valid.

//2
checkentail x::Sess{@S ?msg::Msg<y>  * y::node<_,_>;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> * %L;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Valid.

//3
checkentail x::Sess{@S ?msg::Msg<y>  & y=3;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> & yy;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Fail.

//4
checkentail x::Sess{@S ?msg::Msg<y>  & y;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> & yy=3;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Fail.


//5
checkentail x::Sess{@S ?msg.msg::node<_,_> & z=0;;?msg=0}<> |-
            x::Sess{@S ?v.v::node<_,_>;;?y.y=0}<>.
print residue.
expect Valid.

pred_prim RR{+ %P}<a>.
pred_prim RR2<a>.


//6
checkentail x::RR{+ y=0}<y> |- x::RR{+ z=0}<z>.
print residue.
expect Valid.


//7
checkentail x::RR{+ y=0}<y> * yyy::RR{+ z=0 & yy}<yy>|- true. //x::RR{+ z}<z>.
print residue.
expect Valid.

//8
checkentail x::RR2<y> * yyy::RR2<yy> & y=0 & yy |- true. //x::RR{+ z}<z>.
print residue.
expect Valid.


