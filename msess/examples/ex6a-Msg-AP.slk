sleek_include 'msess/notes/hodef.slk'.
sleek_include 'node.slk'.

pred_prim Msg<a>.

//1
checkentail x::Sess{@S ?msg::Msg<y>  * y::node<_,_>;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> * yy::node<_,_>;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Valid.

//2
checkentail x::Sess{@S ?msg::Msg<y>  * y::node<_,_>;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> * %L;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Valid.

//3
checkentail x::Sess{@S ?msg::Msg<y>  & y=3;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> & yy;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Fail.

//4
checkentail x::Sess{@S ?msg::Msg<y>  & y;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> & yy=3;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Fail.


//1
checkentail x::Sess{@S ?msg::node<z,_> & z=0;;?msg=0}<> |-
            x::Sess{@S ?msg::node<_,_>;;?msg=0}<>.
print residue.
expect Valid.

1. freshid, renamed_formula = rename(freshid/msg, msg::node<_,_>)
// freshid = fresh_any_name Globals.session_msg_id_aux 
// renamed_formula = freshid::node<_,_>
2. wrapped_formula = wrap(freshid, renamed_formula)
// wrapped_formula: msg::Msg<freshid>  * renamed_formula

  |
  V

//1
checkentail x::Sess{@S ?msg::Msg<y>  * y::node<_,_>;;?msg::Msg<z> & z=0}<> |-
            x::Sess{@S ?msg::Msg<yy> * yy::node<_,_>;;?msg::Msg<zz> & zz=0}<>.
print residue.
expect Valid.
