sleek_include 'msess/notes/hodef.slk'.

pred_prim Ff<id:int>. //full
pred_prim Fp<id:int,p>. //partial
pred_prim Fm<id:int>.   //minus


//lemma_norm "ACCincorrect" self::Fp<id,a> * self::Fp<id,b> & a+b=m -> self::Fp<id,m>.
lemma_norm "ACC" self::Fp<id,a> * self::Fp<id,b> -> self::Fp<id,a+b>.
lemma_norm "REL" self::Chan{@S Fp<id,a>;;%R}<> -> self::Chan{@S %R}<> * self::Fp<id,a>.
//lemma_norm "REL2" self::Chan{@S %R;;Fp<id,a>}<> -> self::Chan{@S %R}<> * self::Fp<id,a>.
//lemma_norm "FULL" self::Fp<id,p> & p=1.0 -> self::Ff<id>.
lemma "SYNC-CHECK" self::Chan{@S Ff<id> ;; %R}<> * self::Ff<id> -> self::Chan{@S %R}<> * self::Ff<id>.


checkentail x::Chan{@S Fp<1,1>;;!1;;!2}<> |- x::Chan{@S !1;;!2}<> * x::Fp<1,1>.
expect Valid.
print residue.
 
checkentail x::Chan{@S Fp<1,1>;;!1;;!2}<> |- x::Chan{@S !1;;!2}<>.
expect Valid.
print residue.

checkentail x::Chan{@S Fp<1,1>;;!1;;!2}<> |- x::Chan{@S !1;;!2}<> * x::Fp<1,2>.
expect Fail.
print residue.

checkentail x::Chan{@S Fp<1,1>;;!1}<> |- x::Chan{@S !1;;!2}<> * x::Fp<1,1>.
expect Fail.
print residue.


checkentail x::Chan{@S Fp<1,1>;;!1;;!2}<> |- x::Chan{@S !1}<> * x::Fp<1,1>.
expect Fail.
print residue.


/* this example fails if the lemmas are characterized as Normalize false or true */
checkentail x::Fp<1,1> * x::Fp<1,1> |- x::Fp<1,2>.
expect Valid.
print residue.


checkentail x::Chan{@S Fp<1,1>;;!1;;!2}<> |- x::Chan{@S !1;;!2}<> * x::Fp<1,1>.
expect Valid.
print residue.

checkentail x::Chan{@S !1;;!2;;Fp<1,1>}<> |- x::Chan{@S !1;;!2}<> * x::Fp<1,1>.
expect Fail.
print residue.

