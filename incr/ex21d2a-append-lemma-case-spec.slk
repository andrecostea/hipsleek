/* singly linked lists */

/* representation of a node */

data node {
	int val; 
	node next;	
}.

pred ll<> == self = null 
	or self::node<_, q> * q::ll<> 
  inv true.

pred lseg<p> == self = null 
	or self::node<_, q> * q::lseg<p> 
  inv true.

pred app3<> == self::node<_,null> 
	or self::node<_, q> * q::app3<> & q!=null 
  inv self!=null.

pred PP2<> == 
       [] self::node<_,q> 
          case {q=null -> [] emp;
              q!=null -> [] q::PP2<>;
           } 
inv self!=null.

HeapPred U(node x).
HeapPred U2(node x,node y).
HeapPred U3(node x,node y).

lemma_infer [U,classic]
  self::PP2<> <- self::node<_,q>*U(q).
print residue.


/*
# ex21d2a.slk (with case-spec)

lemma_infer [U,classic]
  self::PP2<> <- self::node<_,q>*U(q).
print residue.

pred PP2<> == 
       [] self::node<_,q> 
          case {q=null -> [] emp;
              q!=null -> [] q::PP2<>;
           } 
inv self!=null.

# Used case-spec for better completeness but met with a runtime
  bug:

ERROR: at _0:0_0:0
Message: combine_struc_base unexpected continuations

Exception processed: Failure("combine_struc_base unexpected continuations")
error at: 
SLEEK FAILURE (END)




*/
