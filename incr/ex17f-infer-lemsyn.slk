
data node {
	int val;
	node next;
}.

pred lseg<p> == self = p
	or self::node<_, q> * q::lseg<p>
  inv true.

pred sll<> == self = null 
	or self::node<_, q> * q::sll<>
  inv true.

/*
checkentail (exists a_1655: a'::lseg<a_1655>@M&a_1655=null)
 |-  a'::sll<>.
*/

HeapPred H(node a).

lemma_infer_pred [H] self::sll<> <- self::lseg<q> * H(q) .
print residue.


//lemma_safe self::sll<> <- self::lseg<q> * q::sll<>.
// above is provable

/*
# ex17f.slk (WN to fix)

lemma_infer_pred [H] self::sll<> <- self::lseg<q> * H(q) .
print residue.

# Why same q on both LHS & RHS?

!!! **WARNING****solver.ml#4230:FREE VAR IN HEAP RHS :[q]
impl/expl vars:[]
LHS:
  q_64::lseg<q>@M * H(q)&
Anon_65=Anon_63 & q_66=q_64 & Anon_65=Anon_63 & q_66=q_64&
{FLOW,(20,21)=__norm#E}[]
RHS:
 EBase 
   q_66::lseg<q>@M * H(q)&{FLOW,(20,21)=__norm#E}[]

# Did we use library of lemma synthesis?


*/

