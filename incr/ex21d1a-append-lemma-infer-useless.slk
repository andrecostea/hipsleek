/* singly linked lists */

/* representation of a node */

data node {
	int val; 
	node next;	
}.

pred ll<> == self = null 
	or self::node<_, q> * q::ll<> 
  inv true.

pred lseg<p> == self = null 
	or self::node<_, q> * q::lseg<p> 
  inv true.

pred app2<y> == self::node<_,null> 
	or self::node<_, q> * q::app2<y> & q!=null 
  inv self!=null.

pred app3<> == self::node<_,null> 
	or self::node<_, q> * q::app3<> & q!=null 
  inv self!=null.

HeapPred U(node x).
HeapPred U1(node x).
HeapPred U2(node x,node y).
HeapPred U3(node x,node y).

lemma_unsafe
  self::app3<> -> self::node<_,q>*U(q).


infer [U1,classic]
  self::app3<> & q2!=null 
   |- U1(self).

print residue.



/*
# ex21d1a.slk

lemma_unsafe
  self::app3<> -> self::node<_,q>*U(q).

infer [U1,classic]
  self::app3<> & q2!=null 
   |- U1(self).

# infer_fold 1
# lemma ==>

Need to schedule this inside:
     process_one_match_mater_unk_w_view [] right_preds vl_name h_name m_res ms alternative
     (* TODO : if data_node for view, schedule Seq_action [infer_fold 1; lemma] *)

-------------------------------------

# should print without --old-pred-synthesis

lemma_unsafe
  self::app3<> -> self::node<_,q>*U(q).


infer [U1,classic]
  self::node<_,q> * app<> & self!=null 
     |- self::node<_,q>*U(q)

  q::app<> & self!=null 
     |- U(q)

  q::app<> & self!=null 
     |- self::node<_,q>*U(q)


# How to schedule a infer_fold here?

  self::node<_, q2> * q2::app3<> & q2!=null |- self::node<_,q>*U(q).



*/
