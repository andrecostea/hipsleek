# ex2a.slk -tp oc --esl

 id: 1<-1; prover: OMEGA CALCULATOR; loc: _0:0_0:0; kind: Sleek_Entail(1)
 raw proof:SAT:{[a, b] : ((1 <= 0=0))};
 raw result:{[a,b]  : FALSE }
 Sat:  1<=(a*b)
 res: UNSAT

For SAT checking of
   SAT(a*b>=1)

We should not replace a*b by true,
as the type is wrong.

At worst, we should replace a*b>=1 by true
as a weakening measure.

However, I like to suggest the following algorithm, we do this:

(1)  subs all constants (maybe use eqmap)

  checkentail b=1  & a*b>=1 |- a>=0
  ==>
  checkentail b=1  & a*1>=1 |- a>=0


(2)  extract non-linear term to place on LHS, if possible.

   checkentail a*b>=1 |- a>=0.
   ==>
   checkentail z=a*b & z>=1 |- a>=0.

(3)  weaken LHS & strengthen RHS


   checkentail z=a*b & z>=1 |- a>=0.
   ==>
   checkentail true & z>=1 |- a>=0.

Examples
========
Using the above algorithm, we can support the following examples:

   checkentail a*b>=1 |- b*a>=0.
   ==> Step 2 (z is a fresh var)
   checkentail z=a*b & z>=1 |- z>=0.
   ==> Step 3
   checkentail true & z>=1 |- z>=0.

   checkentail true |- b*a>=0.
   ==> Step 2
   checkentail z=b*a & true |- z>=0.
   ==> Step 3
   checkentail true & true |- z>=0.

   checkentail true |- (exists b: b*a>=0).
   ==> Step 2 // fail to linearize as b is not free
   checkentail true |- (exists b: b*a>=0).
   ==> Step 3
   checkentail true |- (exists b: false).

========================================================

# ex2b.slk -tp oc

-tp z3

seems to perform correctly but not -tp oc
========================================================
# ex2c.slk -tp oc

-tp z3
========================================================
# ex2.slk -dre ".*nonlinear\|.*Omega.is_"

Why below called twice?


(==omega.ml#631==)
drop_nonlinear_formula_rev@34@33@32@29@28@27@26@24@23@22@21@20@19@18
drop_nonlinear_formula_rev inp1 : (not(1<=(aaa*b)) | 0<=aaa)
drop_nonlinear_formula_rev@34 EXIT: (not(true) | 0<=aaa)

(==omega.ml#631==)
drop_nonlinear_formula_rev@51@50@49@46@45@44@43@41@40@39@38@37@36@35
drop_nonlinear_formula_rev inp1 : (not(1<=(aaa*b)) | 0<=aaa)
drop_nonlinear_formula_rev@51 EXIT: (not(true) | 0<=aaa)


Why below called twice?

(==omega.ml#518==)
drop_nonlinear_formula@8@7
drop_nonlinear_formula inp1 : 0<=aaa
drop_nonlinear_formula@8 EXIT: 0<=aaa

(==tpdispatcher.ml#1736==)
Omega.is_sat_ops@7
Omega.is_sat_ops inp1 : 0<=aaa
Omega.is_sat_ops@7 EXIT:true

(==omega.ml#518==)
drop_nonlinear_formula@10@9
drop_nonlinear_formula inp1 : 1<=(aaa*b) & 0<=aaa
drop_nonlinear_formula@10 EXIT: true & 0<=aaa

(==tpdispatcher.ml#1736==)
Omega.is_sat_ops@9
Omega.is_sat_ops inp1 : 1<=(aaa*b) & 0<=aaa
Omega.is_sat_ops@9 EXIT:true


(==omega.ml#518==)
drop_nonlinear_formula@14@13
drop_nonlinear_formula inp1 : 0<=aaa
drop_nonlinear_formula@14 EXIT: 0<=aaa

(==tpdispatcher.ml#1736==)
Omega.is_sat_ops@13
Omega.is_sat_ops inp1 : 0<=aaa
Omega.is_sat_ops@13 EXIT:true
========================================================
# ex3b.slk -tp oc --esl

-tp z3

seems to perform correctly but not -tp oc

WhY (5-7) VALID WITH drop_nonlinear?

dangerous to simplify RHS ..

 id: 5<0; prover: OMEGA CALCULATOR; loc: _0:0_0:0; kind: Sleek_Entail(1)
 raw proof:SIMPLIFY:{[a] : ( (exists (bbbb_15:((0=0)))) )};
 raw result:{[a]}
 Simplify:  exists(bbbb_15:0<=(bbbb_15*a))
 res:  true
========================================================
# ex3d1.slk

Why is here x!=y?

!!! **solver.ml#8263:xpure_lhs_h1: x=1 & y=2 & x!=y
!!! **solver.ml#8264:xpure_lhs_h1_sym: x!=null & y!=null & x!=y
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
