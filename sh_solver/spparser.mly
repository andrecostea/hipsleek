%{	module Eqs = Share_prover.Eqs%}%token <string> IDENTIFIER%token EOF %token EQ %token COMMA%token STAR%token OPAREN%token CPAREN%token HASH%token DOT%token SAT%token IMPL%start eq_systs%type <Share_prover.cmd> eq_systs%%eq_systs: 	SAT eq_syst {Share_prover.Sat $2}	| IMPL eq_syst eq_syst {Share_prover.Imply ($2,$3)};	eq_syst: var_list var_list eq_list {Eqs.mkEqS $1 $2 $3};	var : IDENTIFIER {Eqs.mkVar $1};var_list:	DOT {[]}	| var COMMA var_list {$1::$3};	eq_list:	DOT {[]}	| eq COMMA eq_list {$1::$3};   	eq: vc vc vc {Eqs.mkEq $1 $2 $3};vc: shc {Eqs.mkpcCnst $1} 	| var {Eqs.mkpcVar $1};			shc:   HASH {Eqs.mkcFull}   | OPAREN shc COMMA CPAREN {Eqs.mkcNode $2 Eqs.mkcEmpty}   | OPAREN COMMA shc CPAREN {Eqs.mkcNode Eqs.mkcEmpty $3}   | OPAREN shc COMMA shc CPAREN {Eqs.mkcNode $2 $4};%%