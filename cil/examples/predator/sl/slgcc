#!/bin/bash
export SELF="$0"

# this makes 7x speedup in case 'grep' was compiled with multi-byte support
export LC_ALL=C

die() {
    printf "%s: %s\n" "$SELF" "$*" >&2
    exit 1
}

if test -z "$1" || test ! -e "$1"; then
    echo Usage: $0 foo.c
    exit 1
fi

# basic setup
topdir="`dirname "$(readlink -f "$SELF")"`/.."
export SL_PLUG='/home/locle/workspace/tools/predator/src/sl_build/libsl.so'
export GCC_HOST='/home/locle/workspace/tools/predator/src/gcc-install/bin/gcc'

# initial checks
"$GCC_HOST" --version >/dev/null || die "unable to run gcc: $GCC_HOST --version"
test -r "$SL_PLUG"  || die "Predator GCC plug-in not found: ${SL_PLUG}"

# use chromium as default SVG_VIEWER
test -z "$SVG_VIEWER" && SVG_VIEWER=chromium

if test x1 = "x$SL_PLOT"; then
    # wipe all .dot and .svg
    rm -f *.dot *.svg
fi

pidfile="$(mktemp)"
test -w "$pidfile" || die "mktemp failed"
export pidfile
trap "rm -f '$pidfile'" EXIT

# check whether stdout is connected to a terminal
if tty 0>&1 >/dev/null; then
    # initialize coloring escape sequences
    export S='\o033[1;30m'
    export R='\o033[1;31m'
    export G='\o033[1;32m'
    export Y='\o033[1;33m'
    export B='\o033[1;34m'
    export W='\o033[1;37m'
    export N='\o033[0m'
fi

# run the gcc
run_gcc() {
    printf "Trying to compile \033[1;37m%s\033[0m ... " "$*" >&2
    tmp="$(mktemp)"
    test -w "$tmp" || die "mktemp failed"
    trap "rm -f '$tmp'" RETURN

    if "$GCC_HOST" -o /dev/null -O0 -m32 -DPREDATOR                 \
        -I../cl -I../cl/gcc -I../include -I../include/gcc -c "$@"   \
        > "$tmp" 2>&1
    then
        printf "\033[1;32mOK\033[0m\n" >&2
        cat "$tmp" >&2
        printf "Running \033[1;34mPredator\033[0m ...\n" >&2
    else
        printf "\033[1;31mFAILED\033[0m\n\n" >&2
        cat "$tmp"
        return 1
    fi

    "$GCC_HOST" -o /dev/null -O0 -m32 -DPREDATOR                    \
        -I../cl -I../cl/gcc -I../include -I../include/gcc           \
        -fplugin="$SL_PLUG" -fplugin-arg-libsl-pid-file="$pidfile"  \
        -fplugin-arg-libsl-args=error_label:ERROR $SL_OPTS -c "$@"  \
        2>&1 | stdbuf --output=L grep -E                            \
        ' \[-fplugin=libsl\.so\]$|CL_BREAK_IF|INT3|SIGTRAP|internal compiler error|undefined symbol'
}

forward_signal() {
    cc_pid="$(<$pidfile)"
    test 0 -le "$cc_pid" || die "invalid pidfile"
    kill "-$1" "$cc_pid"
    wait
}

# colorize the output
run_gcc "$@" | stdbuf --output=L sed -re 's| \[-fplugin=libsl\.so\]$||'        \
        -e "s|(^.*) \[internal location\]\$|$S\1$N|"                           \
        -e "s|(: error:) (.*)\$|\1 $R\2$N|"                                    \
        -e "s|(: warning:) (.*)\$|\1 $Y\2$N|"                                  \
        -e "s|(: note:) (.*)\$|\1 $G\2$N|"                                     \
        -e "s|(current memory usage: *) ([0-9.]+ MB)|\1 $B\2$N|"               \
        -e "s|(peak memory usage: *) ([0-9.]+ MB)|\1 $R\2$N|"                  \
        -e "s|(!!! executing insn #[0-9]+ ...) (.*)\$|\1 $G\2$N|"              \
        -e "s|(variable[:]? #[0-9]+:)([a-zA-Z0-9_.]+)|\1$G\2$N|"               \
        -e "s|(per target) (L[0-9]+)|\1 $G\2$N|"                               \
        -e "s|(initial size of state was) ([0-9]+)|\1 $W\2$N|"                 \
        -e "s|(#[0-9]+)|$W\1$N|"                                               \
        -e "s|(block L[0-9]+) (in progress)|\1 $Y\2$G|"                        \
        -e "s|(... while executing) (.*\\(\\))|\1 $Y\2$N|"                     \
        -e "s|took ([0-9.]+ s)|took $R\1$N|"                                   \
        -e "s|(internal compiler error:) (.*)\$|\1 $R\2$N|"                    \
        -e "s|(undefined symbol:) (.*)\$|\1 $R\2$N|"                           \
        -e "s/(CL_BREAK_IF|INT3|SIGTRAP)/$R\1$N/"                              \
        -e "s/(importGlVar\\(\\))/$R\1$N/"                                     \
        -e "s/(: debug: *) ([<>]J[<>]|AAA)/\1 $R\2$N/"                         \
        -e "s/(: debug: SymHeap::)(objSetConcrete)/\1$Y\2$N/"                  \
        -e "s/(: debug:) \\(x\\) (.*)\$/\1 $Y(x)$N \2/"                        \
        -e "s/(: debug:) (spliceOutListSegment)/\1 $B\2$N/"                    \
        -e "s/(: debug:) (<<<|>>>)/\1 $B\2$N/"                                 \
        -e "s/(: debug: ___) (entering|we are)/\1 $G___$N \2/"                 \
        &

# redirect terminating signals to our plug-in
trap "forward_signal SIGTERM" SIGTERM
trap "forward_signal SIGINT"  SIGINT
wait

if test x1 = "x$SL_PLOT"; then
    # visualize graphs
    printf "graph visualization in progress ... "
    make $MAKEOPTS -s -f "$topdir/sl/data/Makefile" TIMEOUT="timeout 2" \
        || exit $?
    printf "done\n"
    "$SVG_VIEWER" *.svg
fi
