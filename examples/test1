int a() { a a; }

data node { 
	int val; 
	node next
}

enum Color { RED=1, BLACK }

sll<n> == self=null & n=0
	or self::node<_, r> * r::sll<n-1> inv n>=0;


void copy(node a, ref node b)

	requires a::node<_, _> & n > 0
	ensures b::node<_, _> & n > 0;


{
	b.val = a.val;
	b.next = a.next;
	int a = 0, b = 1;
	int c;
	const int a = 2, b = 3;

	node tmp1, tmp2 = null;

	c = a + b;
	c += b;
	tmp1 = new node(100, null);
	tmp1 = new node(200, tmp1);

	while (true) []  tmp1 = tmp1.next.next;

	if (1 < 3) 
		a = 2; 
	else 
	        c = 3; 

	if (1 < 2) {
		while (false) {
			c+=1;
			b*= 2;
		}
	}
	else 
		b = c;
	
	return a;
	
}


int get_key(RBN t) { a = t.key; a = 1; return null; return  t.key; }
