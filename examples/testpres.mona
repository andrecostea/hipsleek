# auxiliary predicates

pred xor(var0 x,y) = x&~y | ~x&y;
pred at_least_two(var0 x,y,z) = x&y | x&z | y&z;

# addition relation (P + q = r)
pred plus(var2 p,q,r) =
	ex2 c: 0 notin c
		& all1 t: (t+1 in c <=> at_least_two(t in p, t in q, t in c))
		& (t in r <=> xor(xor(t in p, t in q), t in c));

# less-than relation (p<q)
pred less(var2 p,q) = 
	ex2 t: t ~= empty & plus(p,t,q);

# less-or-equal than relation (p<=q)
pred lessEq(var2 p, q) = 
	less(p, q) | (p=q);

# greater-than relation (p>q)
pred greater(var2 p, q) = 
	less(q, p);

# greater-or-equal than relation (p>=q)
pred greaterEq(var2 p, q) = 
	greater(p, q) | (p=q);

pred eq(var2 p, q) = 
	p = q;

var2 a, b;

a = pconst(9) & b = pconst(2) => plus(a, b, pconst(1));
