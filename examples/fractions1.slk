data cl {int val;}.

 data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.


checkentail x::node<_,q>*q::ll<n> |-  x::node@v<_,q>*q::ll@v<n>.
 print residue.
 //valid 
 
 
checkentail x::ll@[R]<n> & n>0 |- x::node@v<_,_>.
 print residue.
 //valid with two cases v=R or v<R 
 

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_>.
print residue.
//valid 
checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl<_>.
//valid
checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_> & join([L],[R,L],v).
print residue.
//valid 

checkentail x::cl@[L]<_> * x::cl<_> |- x!=y.
//valid
checkentail x::cl@[L]<_> * y::cl@[R]<_> |- x=y.
//fail
checkentail x::cl@[L]<_> * y::cl@[L,R]<_> |- x!=y.
//valid
checkentail x::cl@[L]<_> * y::cl@[L,R]<_> |- x=y.
//fail
