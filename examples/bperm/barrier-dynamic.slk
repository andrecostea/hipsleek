/*
  For static barriers, a=0 always
*/

//********************************************
lemma "D-SPLIT" self::barrier(c,t,a)<p> & c=c1+c2 & 0<c1<t+a1 & 0<c2<t+a2 -> self::barrier(c1,t,a1)<p> * self::barrier(c2,t,a2)<p> & 0<c<=t+a.

lemma "D-FULL" self::barrier(c,t,a)<p> & c=t+a & a!=0 -> self::barrier(c,t+a,0)<p>.

//D-COMBINE-1
//combine successfully
//lemma "combineBarrier" self::barrier(c1,t,0)<p> * self::barrier(c2,t,0)<p> -> self::barrier(c1+c2,t,0)<p>.

//detect inconsistency
//lemma "combineBarrierFail" self::barrier(c1,t,0)<p1> * self::barrier(c2,t,0)<p2> & p1!=p2 & flow __norm -> true & flow __Fail.
//********************************************

//(1)
checkentail b::barrier(2,3,1)<p> |- b::barrier(1,3,1)<p>*b::barrier(1,3,0)<p>.
print residue. //VALID, 1 residue

//(2)
checkentail b::barrier(1,3,1)<p> |- b::barrier(0,3,1)<p>*b::barrier(1,3,0)<p>.
print residue. //FAIL, zero-permission is not allowed when SPLIT
// due to 0<c1<t+a1 & 0<c2<t+a2

//(3)
checkentail b::barrier(3,2,1)<p> |- b::barrier(3,3,0)<p>.
print residue.//VALID, D-FULL

//(4)
checkentail b::barrier(3,2,1)<p> |- b::barrier(1,3,0)<p> * b::barrier(2,3,0)<p>.
print residue. //VALID, D-FULL -> D-SPLIT -> MATCH -> MATCH
