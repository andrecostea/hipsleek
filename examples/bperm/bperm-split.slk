data cell {int val}.

lemma "splitCell" self::cell(c,t,0)<v> & c=c1+c2 & 0<c1<t & 0<c2<t -> self::cell(c1,t,0)<v> * self::cell(c2,t,0)<v> & 0<c<=t.

//THIS LEMMA is not correct because c>=0
//lemma "splitCell" self::cell(c,t,0)<v> & c=c1+c2 -> self::cell(c1,t,0)<v> * self::cell(c2,t,0)<_>.

//(1)
checkentail x::cell(2,2,0)<_> |- x::cell(1,2,0)<_>.
print residue. //VALID, 1 residue

//(2)
checkentail x::cell(2,2,0)<_> |- x::cell(1,2,0)<_>*x::cell(1,2,0)<_>.
print residue. //VALID, 1 residue

//(3)
checkentail x::cell(3,3,0)<_> |- x::cell(1,2,0)<_>*x::cell(1,2,0)<_>.
print residue. //FAIL, different permission total

//(4)
checkentail x::cell(3,3,0)<_> |- x::cell(1,3,0)<_>*x::cell(1,3,0)<_>.
print residue. //VALID, 1 residue

//(5)
checkentail x::cell(3,3,0)<_> |- x::cell(1,3,0)<_> * x::cell(1,3,0)<_> * x::cell(1,3,0)<_>.
print residue. //VALID, 1 residue

//(6)
checkentail x::cell(2,2,0)<_> |- x::cell(1,2,0)<_> * x::cell(1,2,0)<_> * x::cell(1,2,0)<_>.
print residue. //FAIL, split more than allowed

//(7)
checkentail x::cell(2,3,0)<v> |- x::cell(1,3,0)<v> * x::cell(1,3,0)<v>.
print residue. //VALID, 1 residue
