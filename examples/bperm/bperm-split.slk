data cell {int val}.

//lemma "splitCell" self::cell(c,t,0)<v> & c=c1+c2 & 0<c1<t & 0<c2<t -> self::cell(c1,t,0)<v> * self::cell(c2,t,0)<_> & 0<c<=t.

lemma "splitCell" self::cell(c,t,0)<v> & c=c1+c2 -> self::cell(c1,t,0)<v> * self::cell(c2,t,0)<_>.

//(1)
checkentail x::cell(2,2,0)<_> |- x::cell(1,2,0)<_>.
print residue.

//checkentail x::cell(2,2,0)<_> |- [a] x::cell(a,2,0)<_>.
//VALID, explicit instantiation
//print residue.

//checkentail x=(1+2) |- true.

//checkentail x={1,2,3} |- (exists a,b,c: x={a,b,c}).
//print residue.

//checkentail x={1,2,3} |- (exists a,b: x={a,b,3}).
//print residue.

//checkentail t1={x1,x2,x3} & t2={x4,x5,x6} & t1=t2 |- x1=x4.
//VALID

//checkentail x={1,2,3} |- (exists a: x={a,2,3} & a=1).
//VALID

//checkentail x={1,2,3} |- x={a,2,3} & a=1.
//FAIL

//ORIGNAL
//checkentail perm_6_95={2,2,0} & perm_3_119={c1_104,t_100,0} & c1_104=1|- (exists c2_103: perm_6_95={c2_103+c1_104,t_100,0} & perm_3_119={1,2,0}).


//checkentail perm_6_95={2,2,0} & perm_3_119={c1_104,2,0} & c1_104=1 & c2_103+c1_104=a |- (exists a,t_100: perm_6_95={a,t_100,0} & perm_3_119={1,t_100,0}).
