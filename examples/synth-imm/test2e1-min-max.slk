data node{
     int key;
     node down;
     node fwd;
}.


pred skl0<p> ==
    self = p    or
    self::node<_,p,p> & self!=p or //can comment out
    self::node<val,down,fwd> * down::skl0<fwd> * fwd::skl0<p>
    & self!=p & self!=fwd
    inv true.

pred skl1<p,n> ==
    self=p & n=0 or
    self::node<_,p,p> & self!=p & n = 1 or //can comment out
    self::node<val,down,fwd> * down::skl1<fwd,m1> * fwd::skl1<p,m2>
    & self!=p & self!=fwd  & self!=down
    & n = m1 + m2 + 1 & n > 1
    inv n>=0.

pred skl2<p,n,mn,mx> ==
    self = p    & n=0
    or
    self::node<mn,p,p> & self!=p & n = 1 & mn=mx
    or
    self::node<mn,down,fwd> *
    down::skl2<fwd,m1,mn1,mx1> *
    fwd::skl2<p,m2,mn2,mx>
    & self!=p
    & n = m1 + m2 + 1
    & mx1<=mn2 & mn<=mn1 & mn1<=mx1 & mn2<=mx
    inv n>=0.

pred lsort2<p,n,mn,mx> ==
                  self=p & n=0 or
                  self::node<mn,null,p>  & mn=mx & n=1 & self!=p or
                  self::node<mn,null,q> * q::lsort2<p,n-1,mn1,mx> & n>1 & mn<=mn1 & self!=p & self!=q & mn1<=mx
                  inv n>=0.

checkentail x::lsort2<p,n,mn,mx> & x!=p |- mn<=mx.
checkentail x::skl2<p,n,mn,mx> & x!=p   |- mn<=mx.
