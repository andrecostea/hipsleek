[EMP]
   EV(\Gamma,Pre,Post)=0    \Phi => \Psi
-------------------------------------------
\Gamma; {\Phi; emp}  --> {\Psi; emp} | skip



[READ]
   a \in GV(\Gamma,Pre,Post)       y \notin Vars(\Gamma,Pre,Post)
\Gamma \union {y}; [y/a] {\Phi; <x,\iota>->a * P} --> [y/a] {Post} | c
------------------------------------------------------------------------
   \Gamma; {\Phi;<x,\iota>->a * P} --> {Post} | let y = *(x+\iota);c


[WRITE]
   Vars(e) \subset \Gamma        e != e'
\Gamma ;  {\Phi; <x,\iota>->e * P} --> {\Psi;<x,\iota>->e * Q} | c
-------------------------------------------------------------------------------
   \Gamma; {\Phi;<x,\iota>->e' * P} --> {\Psi;<x,\iota>->e * Q} | *(x+\iota)=e;c


[FRAME]
    EV(\Gamma,Pre,Post) \cap Vars(R)=0
   \Gamma; {\Phi; P} --> {\Psi; Q} | c
--------------------------------------------
\Gamma; {\Phi; P * R} --> {\Psi; Q * R} | c


[CALL]
  func = f(x_i):{\Phi_f;P_f}{\Psi_f;Q_f} \in \Sigma
  R =^l [\sigma]P_f         \Phi => [\sigma] \Phi_f
  \Phi':=[\sigma]\Psi_f       R':=[\sigma]Q_f        e_i=[\sigma]x_i
Vars(e_i) \subset \Gamma     \Sigma;\Gamma;{\Phi /\ \Phi'; P*R'} --> {Post}|c
------------------------------------------------------------------------------
         \Sigma;\Gamma;{\Phi; P*R} --> {Post}| f(e_i);c

==========================================
==========================================
             swap example
==========================================
==========================================
{x,y,a2,b2}; { emp} --> {emp} | c7
             c6 := c7
------------------------------------------------- FRAME on y
{x,y,a2,b2}; { y->a2} --> {y->a2} | c6
             c5 := c6
------------------------------------------------- FRAME on x
{x,y,a2,b2}; {x->b2 * y->a2} --> {x->b2 * y->a2} | c5
             c4 := *y=a2 ; c5
------------------------------------------------- WRITE on y
{x,y,a2,b2}; {x->b2 * y->b2} --> {x->b2 * y->a2} | c4
             c3 := *x=b2 ; c4
------------------------------------------------- WRITE on x
{x,y,a2,b2}; {x->a2 * y->b2} --> {x->b2 * y->a2} | c3
          c2 := let b2 = *y ; c3
------------------------------------------------- READ on y
{x,y,a2}; {x->a2 * y->b} --> {x->b * y->a2} | c2
          c1 := let a2 = *x ; c2
------------------------------------------------- READ on x
{x,y}; {x->a * y->b} --> {x->b * y->a} | c1
