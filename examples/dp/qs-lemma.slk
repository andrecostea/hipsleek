data node {
  int val;
  node next;
}.

pred blseg<y,lb,ub> ==            // ~~ in GRASShopper: blseg<x,y,lb,ub>
     self = y & lb<=ub
  or self::node<val,next> * next::blseg<y,lb,ub>
   & self != y 
       & lb <= val & val <= ub
 inv lb<=ub.

pred bslseg<y,lb,ub> ==           // ~~ in GRASShopper: blseg<x,y,lb,ub>
  self = y & lb<=ub //& lb=\inf & ub=-\inf
  or self::node<val,next> * next::bslseg<y,val,ub>
       & self != y 
       & lb <= val & val <= ub
  inv lb<=ub. //self=y | self!=y & lb<=ub.


lemma_safe self::bslseg<y,lx,ux> 
  <- self::bslseg<y,ly,uy> & lx<=ly & uy<=ux.

  /*
lemma_unsafe self::bslseg<y,lx,up> 
  <- self::bslseg<p,lx,ux> * p::bslseg<y,lp,up> & ux<=lp 
       //
     .
  */

lemma_safe self::bslseg<y,lx,up> * y::node<a,b>
  <- self::bslseg<p,lx,ux> * p::bslseg<y,lp,up>  
     * y::node<a,b> & ux<=lp
     .

checkentail
  self::bslseg<p,lx,ux> * p::bslseg<y,lp,up> & ux<=lp 
  |- self::bslseg<y,lx,up> .


checkentail
  p::bslseg<y,lp,up> & ux<=lp & self=p & lx<=ux  
  |- self::bslseg<y,lx,up> .

checkentail
  self::node<v,n> * n::bslseg<p,v,ux>* p::bslseg<y,lp,up> & ux<=lp 
     & lx<=v & v<=ux 
  |- self::bslseg<y,lx,up> .
