

data cell{
  int val;
}
 
//view definitions

//cell_v<n> == self::cell<n>;
//endpoint_v<c, s, r> == self::endpoint<c,s,r>;


// message definitions

message packet <> == true  ;
message packet_one <cell x3> == x3::cell<m> ;
message packet_two <cell x1,cell x2> == x1::cell<n> * x2::cell<_> & n=44  ;
 
 


//message start [emp]
 
//contract definitions

contract C { 
  initial  state start { !packet_two -> middle; //}
			 !packet  -> end;
		       } 
  state middle {?packet_one -> temp;}

  state temp {?packet_one -> next;}

  state next {!packet_one -> end; 
	      !packet_two -> middle;}
 
  final state end {}

}

 


void put_get() 
  requires true
  ensures true;
{
  endpoint e,f;
  cell x, y, x1, y1;
  

  x = new cell(44);
  y = new cell(88);

  x1 = new cell(44);
  y1 = new cell(88);

   	
  open(C, e, f);
  assert e'::endpoint<C, 1, 0> * f'::endpoint<C, 1, 1>  ;
  

  send(packet_two,e,x, y);
  assert e'::endpoint<C, 2, 0>;
  dprint;
  
  
   receive(packet_one,e, x1);
   assert e'::endpoint<C, 3, 0>;
   dprint;

 receive(packet_one,e, x1);
   assert e'::endpoint<C, 4, 0>;
   dprint;

  send(packet_one,e, y1);
  assert e'::endpoint<C, 5, 0>;
  dprint; 
 // f = get(f);
 // close(e,f);
  
}

 


