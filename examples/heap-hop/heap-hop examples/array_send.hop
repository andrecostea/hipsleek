
message cell [val|-> * param0 == val * _nextparam0 == param0]
message rand [array(val,0,4,4) * param0 == val * _nextparam0 == param0]
message back [array(param0,0,4,4) * _nextparam0 == param0]

contract C {
  initial state start { !rand -> sback; }
  state sback { ?back -> end; }
  final state end {}
}

put_get() [array(x,0,4,4)] {
  local e,f;
  (e,f) = open(C,x);
  put(e) || get(f);
  close(e,f);
} [emp]

put(e) [e|-> C{start}, p0:x * array(x,0,4,4) ] {
  x[1] = 0;
  send(rand,e,x);
  receive(back, e);
  x[2] = 0;
  dispose(x);
} [e|->C{end}, p0:x]

get(f) [f|-> ~C{start},pr:_ee, p0:_x] {
  local y;
  y = receive(rand,f);
  y[3] = 0;
  send(back,f);
} [f|-> ~C{end},pr:_ee, p0:_y ]



