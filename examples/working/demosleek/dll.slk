/* representation of a node */
data node{
	node prev;
	node next;
}.

/* predicate for a doubly linked list */
pred dll<p,tl> == self = tl
	or self::node<p,x> * x::dll<self,tl>.


checkentail x::node<a,b>*b::node<x,q> |- x::dll<p,q>.
print residue.
// residue is empty since entire list is consumed


checkentail x::node<a,b>*b::node<x,q> |- x::dll<p,q>@L.
print residue.
// residue is not empty since we used @L lend annotation;
// so list is matched but not is consumed
// note the instantiation of p=a

checkentail x::dll<p,tl> & x!=tl |- x::node<a,b>.
print residue.


pred dll_size<n,p,tl> == self = tl & n=1
	or self::node<p,x> * x::dll_size<n-1,self,tl>
inv n>=0.

checkentail x::dll_size<n,p,tl> & n>3 |- x::node<a,b> * b::node<c,d>.
print residue.
// valid

checkentail x::dll_size<n,p,tl> & n>1 |- x::node<a,b> * b::node<c,d>.
print residue.
// fail

