/*
   For threads as resource, we attempt syntatic MATCH/SPLIT
   first. If they fail, we try semantic MATCH/SPLIT

   - Syntatic MATCH/SPLIT: based on the syntax of the
     two resources
   - Semantic MATCH/SPLIT: perform entailment
   l_rsr |- r_rsr * remained_rsr

*/

data cell{ int val;}.

//permission split
lemma "splitCell" self::cell(f)<v> & f=f1+f2 & f1>0.0 & f2>0.0  -> self::cell(f1)<v> * self::cell(f2)<v> & 0.0<f<=1.0.

//permission combine
lemma "combineCell" self::cell(f1)<v> * self::cell(f2)<v> -> self::cell(f1+f2)<v>.

//(1)
checkentail x::cell(0.6)<2> |- x::cell(0.4)<2> .
print residue.
//VALID. normal heap cell

//(2)
checkentail t::thrd<# x::cell<1> & true #> |- true.
print residue.
//VALID. Normal thread node with resource

//(3)
checkentail t::thrd<# b=1 --> x::cell<1> & true #> |- true.
print residue.
//VALID. thread node with resource and delayed constraint

//(4)
checkentail t::thrd<# x::cell<1> & true #> |- t::thrd<# x::cell<1> & true #>.
print residue.
//VALID, syntatic match

//(5)
checkentail t::thrd<# a=1 --> x::cell<v1> & true #> |- t::thrd<# a=1 --> x::cell<v1> & true #> .
print residue.
//VALID, syntatic match

//(6)
checkentail t::thrd<# x::cell<1> & a=1 #> |- t::thrd<# x::cell<1> & true #>.
print residue.
//VALID, syntatic match

//(7)
checkentail t::thrd<# a=1 --> x::cell<v1> & true #> |- t::thrd<# b=1 --> x::cell<v1> & true #>.
print residue.
//VALID. with instantiation a=b

//(8)
checkentail t::thrd<# a=1 --> x::cell(0.5)<v1> & true #> |- t::thrd<# a=1 --> x::cell(0.5)<v1> & true #> .
print residue.
//VALID: exact matching with fractional permissions

//(9)
checkentail t::thrd<# a=1 --> x::cell(0.5)<v1> & true #> |- t::thrd<# a=1 --> x::cell(0.6)<v1> & true #> .
print residue.
//FAIL: fail exact matching with fractional permissions
// fail both syntatic and semantic matching

//(10)
checkentail t::thrd<# a=1 --> x::cell<v1> & true #> |- t::thrd<# a=1 --> x::cell<v2> & true #> .
print residue.
//VALID: (may)match (if instantiate v1=v2)

//(11)
checkentail t::thrd<# a=1 --> x::cell<v1> * y::cell<v1> * z::cell<v1> & true #> |- t::thrd<# a=1 --> x::cell<v2> * u::cell<v3> & true #> & v1=v2.
print residue.
//FAIL: resources semantically unmatched

//(12)
checkentail t::thrd<# a=1 --> x::cell<v1> & true #> & x=y |- t::thrd<# a=1 --> y::cell<v1> & true #> & v1=v2.
print residue.
//FAIL. Currently FAIL because lhs's resource is unmatched with rhs' resource
//Restrictive, re-consider later TODO

//(13)
checkentail t::thrd<# a=1 --> x1::cell<v1> * x2::cell<v2> & true #> & x1=y1 & x2=y2 |- t::thrd<# a=1 --> y1::cell<v1> * y2::cell<v2> & true #>.
print residue.
//VALID

//(14)
checkentail t::thrd<# a=1 --> x::cell(0.5)<1> * x::cell(0.5)<1> & true #> |- t::thrd<# a=1 --> x::cell(0.5)<1> & true #>.
print residue.
//VALID. SPLIT
//TODO: may want to normalize resources

//(15)
checkentail t::thrd<# a=1 --> x::cell(1.0)<1> & true #> |- t::thrd<# a=1 --> x::cell<1> & true #>.
print residue.
//VALID. Syntatic SPLIT
//TODO: for this, may need to float all None to become
// Anon_full_perm in order to prove that the two resources
// are syntatically equal

//(16)
checkentail t::thrd<# a=1 --> x::cell<1> & true #> |- t::thrd<# a=1 --> x::cell(1.0)<1> & true #>.
print residue.
//VALID. Semantic SPLIT
//TODO: float as above

//(17)
checkentail t::thrd<# a=1 --> x::cell(0.6)<1> & true #> |- t::thrd<# a=1 --> x::cell(0.5)<1> & true #>.
print residue.
//VALID. Semantic SPLIT

//(18)
checkentail t::thrd<# a=1 --> x::cell<1> & true #> |- t::thrd<# a=1 --> x::cell(0.5)<1> & true #>.
print residue.
//VALID. Semantic SPLIT

//(19)
checkentail x::cell<1> * y::cell<2> |-  y::cell<2>.
print residue.
//VALID

//(20)
checkentail t::thrd<# a=1 --> x::cell<1> * y::cell<2> & true #> |- t::thrd<# a=1 --> y::cell<2> & true #>.
print residue.
//VALID. Syntatic SPLIT

//(21)
checkentail x::cell<1> * y::cell<2> |- x::cell(0.6)<1> * y::cell(0.6)<2>.
print residue.
//VALID

//(22)
checkentail t::thrd<# a=1 --> x::cell<1> * y::cell<2> & true #> |- t::thrd<# a=1 -->  x::cell(0.6)<1> * y::cell(0.6)<2> & true #>.
print residue.
//VALID. Semantic SPLIT

//(23)
checkentail t::thrd<# a=1 --> x::cell(0.6)<1> *  y::cell(0.6)<2> & true #> |- t::thrd<# a=1 --> x::cell(0.5)<1> * y::cell(0.4)<2> & true #>.
print residue.
//VALID. Semantic SPLIT

//(24)
checkentail t::thrd<# a in B --> x::cell(0.5)<v1> & true #> |- t::thrd<# a in B --> x::cell(0.5)<v1> & true #> .
print residue.
//VALID: exact matching with fractional permissions, bag constraints


//(25)
checkentail t::thrd<# a!=b --> x::cell(0.5)<v1> & true #> 
            |- t::thrd<# a=b --> x::cell(0.5)<v1> & true #>.
print residue.
//FAIL: delayed constraints unmatched
