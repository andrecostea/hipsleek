

data node { int val ; node next }.
pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n-1> 
	inv n >= 0.

checkentail (x::ll<n>@I); y::ll<m> * ((t::ll<a>@I); z::ll<m>) & n > 0  |- x::ll<n>.
print residue.
//1. Fail


//wrong
checkentail (x::ll<n>@I); y::ll<m> * ((t::ll<a>@I); z::ll<m>) & n > 0  |- (x::ll<n>@I); y::ll<m> * t::ll<a>@I.
print residue.
// t@I; z
//2. Valid


checkentail (x::ll<n>@I * p::ll<m>@I); y::ll<m> * ((t::ll<a>@I); z::ll<m>) & n > 0  |- (x::ll<n1>@I * p::ll<m1>@I); t::ll<a1>@I.
print residue.
// x@I * p@I; y * (t@I; z)
//3. Valid


checkentail (x::ll<n>@I * p::ll<m>@I); y::ll<m> * ((t::ll<a>@I); z::ll<m>) & n > 0  |- (x::ll<n1>@I * p::ll<m1>@I).
print residue.
// x@I * p@I; y * (t@I; z)
//4. Valid


checkentail (x::ll<n>@I * p::ll<m>@I); y::ll<m> * ((t::ll<a>@I); z::ll<m>) & n > 0  |- (x::ll<n1>@I * p::ll<m1>@I); z::ll<m2>.
print residue.
// y
//5. Valid

checkentail (x::ll<n>@I); y::ll<m> * ((t::ll<a>@I); z::ll<m>) & n > 0 & m=5  |- y::ll<m2>.
print residue.
// t@I; z
//6. Valid




