data node { int val; node next}.



pred ls2<n, p> == self = p & n = 0 or
     (exists m,v1,q: self::node<v1, q> * q::ls2<m, p> & m + 1 = n & self!=p)
inv n>=0.

/*
Below results in direct match rather than base-case unfolding

*/

checkentail p2::ls2<n, q> & p2=q |- p2::ls2<f3,f4>  .
print residue.

checkentail p2::ls2<n, q> & n=0 |- p2::ls2<f3,f4>  .
print residue.

checkentail p2::ls2<n, q> & p2=q |- p2::ls2<f3,f4>  .
print residue.

checkentail p2::ls2<n, q> & p2=null |- p2::ls2<f3,f4>  .
print residue.

checkentail p2=q & n=0 & p2=null |- p2::ls2<f3,f4>  .
print residue.

checkentail p2=q & n=0 & p2=null |- [m,f4] true & f4=p2 & m=0 .
print residue.

/*
checkentail p2=q & n=0  |- p2::ls2<f3,f4>  .
print residue.
*/





