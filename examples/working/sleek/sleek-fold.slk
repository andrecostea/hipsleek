data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

pred sortl<n, mi> == self = null & n = 0
	or self::node<mi, r> * r::sortl<n - 1, k> & mi <= k
	inv n >= 0.

lemma self::sortl<n, mi> -> self::ll<n>.

/*
checkentail x::node<next = r1> * r1::node<next = aa> * y::node<> & b > 10 & aa=null |- x::ll<c>.
print residue.
*/

checkentail x=null or x::node<_,q>*q::node<_,null> & q=null |- x::ll<d>.
print residue.

checkentail x=null or x::node<_,q>*q::node<_,null> & 1=0 |- x::ll<d>.
print residue.

checkentail x::node<_,q>*q::ll<n> & n>=0 |- x::ll<d>.
print residue.

checkentail 1=0 |- x::ll<d>.
print residue.

checkentail 2=3 |- x::ll<d>.
print residue.


checkentail false |- x::ll<d>.
print residue.


checkentail x::ll<n> & n>1 |- x::node<_,q> * q::node<_,r>.
print residue.


