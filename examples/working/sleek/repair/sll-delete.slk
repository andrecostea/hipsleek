data node {
     node next
}.

pred ll<n> == self = null & n = 0
	or (exists q: self::node<q> * q::ll<n-1>).

void delete(node x, int a)
	requires x::ll<n> & n > a & a > 0 
	ensures (exists k: x::ll<k> & k = n-1);.

// synthesize [node x,int a]
// x::ll<n> & (1-n)<0 & a-1=0
// ~>
// (exists fr54,q_3: x::node<q_3> * q_3::ll<fr54> & a-1=0 & fr54=n-2).

// to synthesize x.next = x.next.next

synthesize [node x,int a]
 x::ll<n> & (a-1)!=0 & (0-a)<0 & (a+(0-n))<0 & a=a
~>

(exists fr60,q_3, q_27: q_3::node<q_27> * x::node<q_3> * q_27::ll<fr60>&a=a & fr60 = n-3).
