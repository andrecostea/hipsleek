data node {
     int val;
     node next
}.

pred ll<n> == self = null & n = 0
	or (exists v, q: self::node<v, q> * q::ll<n-1>).

void insert(node x, node y)
	requires x::ll<n1> * y::ll<n2> & x != null
	ensures exists k: x::ll<k> & k = n1 + n2;.

// synthesize [node x, node y]
// x::node<v1, t> * t::ll<n3> * y::ll<n2> &
// !(v_bool) & x != null & n3 + 1 = n1 & t != null
// // fread

// ~>
// x::ll<n1+n2>.
// append(x.next, y)
// fread t = x.next
// fcall(t, y)

synthesize [node x, node y]
x::node<Anon_4396,q_4397> * q_4397::ll<flted_7_4395> * y::ll<n2> &
x!=null & flted_7_4395=n1-1 & q_4397!=null
~>
// node t = x.next
// unfold t
(exists f_r_4411: x::ll<f_r_4411> & f_r_4411=flted_7_4395+n2+1).

// pre: x::ll<n> & x = null
