data node2 {
	node2 prev;
	node2 next;	
}.

/* view for a doubly linked list with size */
pred dll<p,n> == self = null & n = 0 
  or self::node2<p , q> * q::dll<self, n-1> & n > 0.

void append(node2 x, node2 y)
	requires x::dll<q, m> * y::dll<p, n> & m > 0 & n > 0
	ensures x::dll<q, k> & k = m + n;.

// synthesize [node2 x, node2 y, node2 q_98]
// y::node2<p,q_98> * q_98::dll<y,f7> * x::node2<q,q4>&
// 0<m & 0<n & 1+f3=m & q4=null & f3=0 & f7+1=n & 0<n
// ~>
// (exists f0,prev6,n7, q7:
// x::node2<q,q7>@M * y::node2<prev6,n7>@M * n7::dll<q7,f0> &
// f0=n-1 ).

synthesize [node2 x, node2 y, node2 q_98]
y::node2<p,q_98> * x::node2<q,q4>&
0<m & 0<n & 1+f3=m & q4=null & f3=0 & f7+1=n & 0<n
~>
(exists f0,prev6, q7: x::node2<q,q7> * y::node2<prev6,n7> &
f7=f0 & y=q7 & f0+1=n).

// append(x.next, y) 

// simplify exists

// synthesize [node2 x, node2 y, node2 q_98]
// y::node2<p,q_98> * x::node2<q,q4> &
// 0<m & 0<n & 1+f3=m & q4=null & f3=0 & f7+1=n & 0<n 
// ~>
// (exists f0,prev6,next7:
// x::node2<q,y>@M * y::node2<prev6,n7>@M & f0=n-1 & q_98=next7 & f7=f0 ).

//          F1 ~> F2 & \vec{x}=\vec{z}
// ---------------------------------------------
//        F1 * x->\vec{y}  ~>  F2 * x->\vec{z}

//          F1 ~> F2 & \vec{y}=\vec{z}
// ---------------------------------------------
//        F1 * P(\vec{y})  ~>  F2 * P(\vec{z})

// goal (vars:[x:node2,y:node2,q_98:node2]
// pre:  y::node2<p,q_98>@M * x::node2<q,q4>@M&
// 0<m & 0<n & f3+1=m & q4=null & f3=0 & 1+f7=n & 0<n
// post:  (exists f0_84,prev6_85,next7_86,
// q7_87: x::node2<q,q7_87>@M * y::node2<prev6_85,n7>@M&
