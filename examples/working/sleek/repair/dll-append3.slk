data node2 {
	node2 prev;
	node2 next;	
}.

/* view for a doubly linked list with size */
pred dll<p,n> == self = null & n = 0 
  or (exists q: self::node2<p , q> * q::dll<self, n-1> & n > 0).

void append(node2 a, node2 b)
	requires a::dll<q, m> * b::dll<p, n> & m > 0 & n > 0
	ensures a::dll<q, k2> & k2 = m + n;.

// synthesize [node2 x,node2 y]
//  x::node2<q,q78>@M * q78::dll<x,f77>@M * y::dll<p,n>@M&
// v_bool_14_4457 & y=y & x=x & self_4476=x & p_4475=q & 0<m & 0<n & 
// f77+1=m & q78=null
// ~> 
//  (exists f_r_4506,p5,n1,
// q91: x::node2<q,q91>@M * y::node2<p5,n1>@M * 
//         n1::dll<q91,f_r_4506>@M&
// (((-1*n)-f77)-1)<0 & ((-1*n)-f77)<0 & 
// f_r_4506=(f77+n)-1).

synthesize [node2 x,node2 y]
 x::node2<q,q78> * q78::dll<x,f77> * y::dll<p,n> &
0<m & 0<n & f77+1=m & q78=null
~> 
 (exists fr,p5,n1,q91: x::node2<q,q91> * y::node2<p5,n1>@M * n1::dll<q91,fr>&
n+f77>0 & fr=f77+n-1).

// synthesize [node2 q78,node2 x,node2 y]
//  x::node2<q,q78>@M * y::dll<p,n>@M&0<m & 0<n & 1+f77=m & q78=null & f77=0
// ~> 
//  (exists fr_78,p5_79,n1_80,
// q91_81: x::node2<q,q91_81> * y::node2<p5_79,n1_80>@M * n1_80::dll<q91_81,fr_78>&
// 0<(f77+n) & fr_78+1=f77+n).
