data node2 {
	node2 prev;
	node2 next;	
}.

pred dll<p,n> == self = null & n = 0 
  or (exists q: self::node2<p , q> * q::dll<self, n-1> & n > 0).

void append2(node2 x, node2 y)
	requires x::dll<q, m> * y::dll<p, n> & m>0
	ensures (exists k2: x::dll<q, k2> & k2 = m + n);.

synthesize [node2 x,node2 y]
x::node2<q70, q73> * q73::dll<x, flt72> * y::dll<p,n> &
0<=flt72 & q73!=null & m=1+flt72
~>
(exists fr16: x::dll<q70,fr16> & fr16=1+flt72+n).

// RlFRead(node2 x.next, node2 q_4573)
// [RlFuncCall append2$node2~node2([q_4573,y])
// [RlSkip
// failed branch 20