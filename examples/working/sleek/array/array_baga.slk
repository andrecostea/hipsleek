data arrI {
  int val;
}.



pred arr_seg<i,n> == i=n & i>=0 & self!=null
  or xxx::arrI<_>*self::arr_seg<i+1,n> & xxx=self+i & i>=0
    inv BG([(self,i,n)], n>=i & i>=0 & self!=null
    ).


checkentail base::arr_seg<2,5> * base::arr_seg<2,5>  |- false.
expect Valid. 
print residue.

checkentail base::arr_seg<2,2> * base::arr_seg<2,5> |- false.
expect Fail. 
print residue.

checkentail base::arr_seg<7,9> * base::arr_seg<2,5> |- false.
expect Fail. 
print residue.

checkentail base::arr_seg<2,5> * base::arr_seg<3,6> |- false.
expect Valid. 
print residue.

checkentail base::arr_seg<2,5> * base::arr_seg<3,5> |- false.
expect Valid. 
print residue.

checkentail base::arr_seg<2,5> * base::arr_seg<3,4> |- false.
expect Valid. 		  
print residue.

checkentail base::arr_seg<2,5> * base2::arr_seg<3,4> & base2=base |- false.
expect Valid. 		  
print residue.

checkentail base::arr_seg<2,5> * base2::arr_seg<3,4> |- false.
expect Fail. 		  
print residue.

checkentail base::arr_seg<x,y> * base::arr_seg<a,b> 
   |- a>=y | x>=b.
expect Valid.
print residue.

checkentail base::arr_seg<x,y> * base1::arr_seg<a,b> 
   |- a>=y | x>=b.
expect Fail.
print residue.

//(3)
checkentail base::arr_seg<a,y> * k::arrI<_> & a<y & k=base+a 
   |- false.
expect Valid.
print residue.

//(4)
checkentail base::arr_seg<a,y> * k::arrI<_> & a<y & k=base+b
   |- b<a | b>=y.
expect Valid.
print residue.

