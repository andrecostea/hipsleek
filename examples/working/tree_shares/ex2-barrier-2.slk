data cl {int val;}.
macro L == (#,) .
macro R == (,#) .

 data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

//(1)
checkentail x::node<_,q> |-  x::node(v)<_,q>.
print residue.
 //(1) valid v = full or v<full x(1-v) q (1-v) ll 
 //-> missing?
expect Valid.

 
checkentail x::node<_,q> |- false.
print residue.
expect Fail.

//(1)
checkentail x::node(@@L)<_,q> |-  x::node<_,q>.
print residue.
expect Fail.



checkentail   x::node<_,q> |- x::node<_,q> .
expect Valid.
print residue.


checkentail   x::node<_,q> |- x::node(@@L)<_,q> .
expect Valid.
print residue.
// expect @@R residue..
