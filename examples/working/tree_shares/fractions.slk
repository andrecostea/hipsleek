data cl {int val;}.
data cl2 {int val;}.
data cl3 {int val;}.

checkentail x::cl<n> & n > 3 |- x::cl<m> & m > 2.
//valid 
checkentail x::cl<n> & n > 1 |- x::cl<m> & m > 2.
//fail
checkentail x::cl<_> |- x::cl<_>.
//valid
checkentail x::cl@[L,R]<_> |- x::cl<_>.
//fail
checkentail x::cl@[L,R]<_> |- x::cl@[L]<_>.
//fail
checkentail x::cl@[L]<_> |- x::cl@[R]<_>.
//fail
checkentail x::cl<_> |- x::cl@[R]<_>.
print residue.
//valid x(L)
checkentail x::cl<_> |- x::cl@[L]<_>.
print residue.
//valid x(R)

checkentail x::cl@[L,R]<_> |- x::cl<_>.
//fail
checkentail x::cl@[R,R]<_> |- x::cl[L,R]<_>.
//fail
checkentail x::cl@v<_> |- x::cl@v<_>.
print residue.
//valid empty

checkentail x::cl@v1<_> |- x::cl@v<_>. 
print residue.
//valid v1=v or v1>v

checkentail x::cl@[R]<_> |- x::cl@[R,L]<_>.
print residue.
//valid x(R,R)

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl<_>.
//valid empty

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_>.
print residue.
//valid v=full or v<full

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_> & join([L],[R,L],v).
print residue.
//valid v=L+(R,L)

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_> & join ([L],[R,L],v).
//valid 

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_> & join ([R],[R,L],v).
//fail

checkentail x::cl@v<_> &join ([L],[L,R],v)|- x::cl@v<_> & join ([R],[R,L],v).
//valid (contradiction)

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- 1>2.
//fail

checkentail x::cl@[L]<_> * x::cl@[L,R]<_>|- 1>2.
//valid 
 
 data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

 checkentail x::ll<n> |- x::node<_,_>.
 //fail
 
 checkentail x::ll<n> |- x::ll<m>.
 print residue.
 //valid n=m
 
 checkentail x::ll@v<n> |- x::ll@v<m>.
 print residue.
 //valid n=m
 
 checkentail x::ll@[R]<n> |- x::ll@[R,R]<m>.
 print residue.
 //valid x: RL
 
  checkentail x::ll@[R]<n> & n>0 |- x::node<_,_>.
 //fail
 
 checkentail x::ll@[R]<n> & n>0 |- x::node@[R]<_,_>.
 print residue.
 //valid ll[R](n-1)
 
 checkentail x::ll@[R]<n> & n>0 |- x::node@[R,R]<_,_>.
 print residue.
 //valid x:[R,L] * ll R (n-1)
 
 checkentail x::ll@[R]<n> & n>0 |- x::node@v<_,_>.
 print residue.
 //valid v=R  or v<R
 
 checkentail x::node@[R]<_,q>*q::ll<n> |- x::ll<m>.
 //fail
 
 checkentail x::node<_,q>*q::ll<n> |- x::ll<m>. 
 print residue.
 //valid n+1=m
 
 checkentail x::node<_,q>*q::ll<n> |- x::node@v<_,q>*q::ll@v<n>.
 print residue.
 //valid 
 
 checkentail x::node<_,q>*q::ll<n> |- x::ll@[R]<m>. 
 print residue.
 // valid x L q L m=n+1

 checkentail x::node@[R]<_,q>*q::ll@[R]<n> |- x::ll@[R]<m>. 
 print residue.
 // valid m=n+1
 
 
 checkentail x::node@[R]<_,q>*q::ll<n> |- x::ll@[R]<m>. 
 print residue.
 // valid q::ll [L]
 
 checkentail x::node<_,q>*q::ll@[R]<n> |- x::ll@[R]<m>. 
 print residue.
 // valid x[L] node
 
 checkentail x::node<_,q>*q::ll@[R]<n> |- x::ll@[L]<m>. 
  //fail

checkentail x::cl@[L]<_> * x::cl@[L]<_> |- false.
// valid

checkentail x::cl@[L]<_> * y::cl@[L]<_> |- x!=y.
// valid
checkentail x::cl@[L]<_> * y::cl@[R]<_> |- x!=y.
  // fail

checkentail x::cl@[L]<_> * y::cl@[R]<_> |- x=y.
  // fail

checkentail x::cl@[L]<_> * y::cl@[R]<_> |- true.
print residue.
// valid


checkentail x::node<_,q>*q::ll<n> |-  x::node@v<_,q>*q::ll@v<n>.
 print residue.
 //valid 
 
 
checkentail x::ll@[R]<n> & n>0 |- x::node@v<_,_>.
 print residue.
 //valid with two cases v=R or v<R 
 

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_>.
print residue.
//valid 
checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl<_>.
//valid
checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_> & join([L],[R,L],v).
print residue.
//valid 

checkentail x::cl@[L]<_> * x::cl<_> |- x!=y.
//valid
checkentail x::cl@[L]<_> * y::cl@[R]<_> |- x=y.
//fail
checkentail x::cl@[L]<_> * y::cl@[L,R]<_> |- x!=y.
//valid
checkentail x::cl@[L]<_> * y::cl@[L,R]<_> |- x=y.
//fail