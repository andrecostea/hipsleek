data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.


//(3)
//infer [x,y] b::node<1,y>   |- x::node<_,b>*b::node<_,y>*y::node<_,null>.
//print residue.
// TODO : "b" part of the inferred?
// I suppose this is OK?
/*
Inferred Heap:[ x::node<inf_Anon_74,inf_b_75>[Orig], y::node<inf_Anon_78,inf_flted_20_79>[Orig]]
Inferred Pure:[ inf_b_75=b & inf_flted_20_79=null]
*/

//(4)
//infer [x,y,b] b::node<1,y>   |- x::node<_,b>*b::node<_,y>*y::node<_,null>.
//print residue.


infer [y] b::node<1,y>   |- b::node<a,y>*y::node<_,null>.
//infer [y] true   |- y::node<_,q>*q::node<c,d>.
print residue.
