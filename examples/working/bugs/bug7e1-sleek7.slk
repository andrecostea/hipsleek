data node { int val ; node next }.

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
//   n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     n!=0 ->  [] self::node<next = r> * r::lseg<b,p> & b=n-1; 
     }
     inv n >= 0.

lemma_safe self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::lseg<n, p> & n>=a & a>=0  -> self::lseg<a, r> * r::lseg<b, p> & n=a+b.
//above cannot work!


// 4
checkentail n > 9 & n=n1+n2 & Univ(n1) & Univ(n2) & n1,n2>=0
    |- n1 >= 9  & n2>=0.
expect Valid.

checkentail n > 9 & n=n1+n2 & Univ(n1) & Univ(n2) & n1,n2>=0
    |- n1 >= 9 .
expect Valid.

checkentail n > 9 & n=n1+n2 & Univ(n1) & Univ(n2) & n1,n2>=0
    |- n1 >= 9  & n2>=2.
expect Fail.
print residue.


checkentail n > 9 & n=n1+n2 & Univ(n1) & Univ(n2) & n1,n2>=0 & n1>=9
    |- n2>=2.
expect Fail.
print residue.
//print residue.
// invalid-exception

