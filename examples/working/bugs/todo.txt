==================================================
# i5-3a.slk

infer [k]  b=null  |-  b=k.
print residue.

FAIL but expecting:
pre: k=null

REASON
======
We currently translate
 x=null --> x<=0
 x!=null --> x>0

This is good for implication
and UNSAT check but not good
for simplifcation

 Simplify:  forall(b:(b!=null | b=k))
 res:  false

For simplification, we should translate
 b=null  --> b=0
 b!=null --> b!=0
 
That way we can simplify the above to k=0 
(which is translated to k=null) for this example.
==================================================
# baga-test-eps.slk

in new smt2014 branch, unsat is not being detected
in two examples below. I think this is due to new unsat
we currently have? Please make the new unsat into an option
that is disabled by default, if this is the case.

pred l3a<> == 
  self::node<q>*q::node<_>  & self=q
inv self!=null.

Why is UNSAT on lhs not being detected?

//(1) (3) valid
checkentail x::l3a<> |- false.
expect Valid.

pred l7<q:node> == 
  self=null & q=null
  or self::node<r>*r::node<_> & r=q
inv true.

//(5) --eps
// (15) Valid
checkentail x::l7<q> * y::l7<q> & x!=null & y!=null |- false.
expect Valid.

--inv-baga
Entail 2: Fail.(must) cause: true |-  false. LOCS:[0;26] (RHS: contradiction)
Validate 2: Not Expected.



Entail 3: Fail.(may) cause:OrR[ null=q & q=null |-  q!=null. LOCS:[31;36] (must-bug),valid]
Validate 3: Not Expected.



Entail 4: Valid. 
Validate 4: Expected.



Entail 5: Fail.(must) cause: true |-  false. LOCS:[0;46] (RHS: contradiction)
Validate 5: Not Expected.

Unexpected: 2 3 5 
==================================================
# baga-test-eps.slk  -dre "proc_sleek_result"

Why is SuccCtx below considered a Must error?

Entail 5: Fail.(must) cause: true |-  false. LOCS:[0;46] (RHS: contradiction)

proc_sleek_result_validate lc@5
proc_sleek_result_validate lc inp1 : 1[
   x::l7<q> * y::l7<q_158>&x!=null & y!=null & q_158=q&{FLOW,(3,4)=__Error}[]
   ]
proc_sleek_result_validate lc@5 EXIT:Valid
Validate 5: Expecting Fail BUT got : Valid


==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
