==================================================
==================================================
==================================================
==================================================
Unexpected result with : 
 sleek.slk (failed check(s): {E1#Valid},{E2#Valid},{E3#Valid}) 
 cll-d.slk (failed check(s): {E1#Valid}) 
==================================================
# bug7b.slk

checkentail x::lseg<n, p> & n > 9 |- x::lseg<nn1, r1> * r1::lseg<n2, r2> & nn1 >= 9 & n2 >= 2.
expect Fail.

# why is n2 expl rather than impl?

@7! **solver.ml#8940:es_expl_vars:[nn1,n2]
@7! **solver.ml#8941:es_impl_vars:[]
==================================================
# bug7e3.slk

checkentail x::lseg<a, q1> * q1::lseg<b, q> & n=a+b & n > 9 
      & Univ(a) & Univ(b) & a,b>=0
   |- x::lseg<nnn1, r1> * r1::lseg<nnn2, r2>& nnn1 >= 9 & nnn2>=2 .
expect Fail.

Fixed by adding ante_ex : es_init_impl_expl_vars
==================================================
# i5-3a.slk

infer [k]  b=null  |-  b=k.
print residue.

FAIL but expecting:
pre: k=null

REASON
======
We currently translate
 x=null --> x<=0
 x!=null --> x>0

This is good for implication
and UNSAT check but not good
for simplifcation

 Simplify:  forall(b:(b!=null | b=k))
 res:  false

For simplification, we should translate
 b=null  --> b=0
 b!=null --> b!=0
 
That way we can simplify the above to k=0 
(which is translated to k=null) for this example.
==================================================
# baga-test-eps.slk

in new smt2014 branch, unsat is not being detected
in two examples below. I think this is due to new unsat
we currently have? Please make the new unsat into an option
that is disabled by default, if this is the case.

pred l3a<> == 
  self::node<q>*q::node<_>  & self=q
inv self!=null.

Why is UNSAT on lhs not being detected?

//(1) (3) valid
checkentail x::l3a<> |- false.
expect Valid.

pred l7<q:node> == 
  self=null & q=null
  or self::node<r>*r::node<_> & r=q
inv true.

//(5) --eps
// (15) Valid
checkentail x::l7<q> * y::l7<q> & x!=null & y!=null |- false.
expect Valid.

--inv-baga (FIXED)

Unexpected: 2 3 5 
==================================================
# baga-test-eps.slk  -dre "proc_sleek_result"

Why is SuccCtx below considered a Must error?

Entail 5: Fail.(must) cause: true |-  false. LOCS:[0;46] (RHS: contradiction)

proc_sleek_result_validate lc@5
proc_sleek_result_validate lc inp1 : 1[
   x::l7<q> * y::l7<q_158>&x!=null & y!=null & q_158=q&{FLOW,(3,4)=__Error}[]
   ]
proc_sleek_result_validate lc@5 EXIT:Valid
Validate 5: Expecting Fail BUT got : Valid

==================================================
# run-fast-test 

Why below when sleek generates output for below?

Total number of errors: 2 in files:
  baga-test-eps.slk(no result (!!!check script options, provers, etc))
  imm/imm-hard.slk(no result (!!!check script options, provers, etc)).
==================================================
# example/working/bugs/imm-hard-1.slk

checkentail (x::ll<n>@L * y::ll<m>@L) & n>0 & m>0  |- y!=x. 
print residue.
// x * y
// (3) Valid
expect Valid.

why fail with and without --imm?

==================================================
orrect behavior:
gather_type_info_b_formula@9@8@7@5@4@3
gather_type_info_b_formula inp1 :self = null
gather_type_info_b_formula inp2 :[(self:14:node)(q:13:node)]
gather_type_info_b_formula@9 EXIT:[(self:14:node)(TVar__15:15:null)(q:13:node)]

leads to:
compute_invariants@41@39
compute_invariants inp1 :[self,q]
compute_invariants inp2 : ,[{1} -> {[]} [ q=null; self=null]; 
{2} -> {[self,q]} [ q!=null; self!=null]]
compute_invariants@41 EXIT: ,
  [{1,2} -> {[]} []; 
   {1} -> {[]} [ q=null; self=null];
   {2} -> {[self,q]} [ q!=null; self!=null]]

-------------------------------------------------------------------------------------------------
-
incorrect behavior:
gather_type_info_pure@9@8@6@5@4@3
gather_type_info_pure inp1 :self = null
gather_type_info_pure inp2 :[(self:18:node)(q:17:node)]
gather_type_info_pure@9
EXIT:[(TVar__20:20:node)(self:18:node)(TVar__19:19:node)(q:17:node)]

leads to:
compute_invariants@42@40
compute_invariants inp1 :[self,q]
compute_invariants inp2 : ,
     [{1} -> {[]} []; 
     {2} -> {[self,q]} [ self!=null]]
compute_invariants@42 EXIT: ,[\
  {1,2} -> {[]} []; 
  {1} -> {[]} [];  // q=_ & self=_
  {2} -> {[self,q]} [self!=null]]
-------------------------------------------------------------------------------------------------
-
the problem is that due to the fact that there is no type for null, the prunning
conditions for base case are incorrect:
{1} -> {[]} [ q=null; self=null]; 
vs
 {1} -> {[]} [];

===================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
==================================================
