data node { int val ; node next }.

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
//   n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     n!=0 ->  [] self::node<next = r> * r::lseg<b,p> & b=n-1; 
     }
     inv n >= 0.

//lemma_safe self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::lseg<n, p> & n>=a & a>=0  -> self::lseg<a, r> * r::lseg<b, p> & n=a+b.
//above cannot work!


checkentail x::lseg<a, q1> * q1::lseg<b, q> & n=a+b & n > 9 
      & Univ(a) & Univ(b) & a,b>=0
   |- x::lseg<n1, r1> & n1 >= 9 .
expect Valid.
print residue.
//print residue.
// invalid-exception


checkentail x::lseg<a, q1> * q1::lseg<b, q> & n=a+b & n > 9 
      & Univ(a) & Univ(b) & a,b>=0
   |- x::lseg<nnn1, r1> * r1::lseg<nnn2, r2>& nnn1 >= 9 & nnn2>=1 .
expect Valid.
print residue.


checkentail x::lseg<a, q1> * q1::lseg<b, q> & n=a+b & n > 9 
      & Univ(a) & Univ(b) & a,b>=0
   |- x::lseg<nnn1, r1> * r1::lseg<nnn2, r2>& nnn1 >= 9 & nnn2>=2 .
expect Fail.
print residue.

/*
# bug7e3.slk

checkentail x::lseg<a, q1> * q1::lseg<b, q> & n=a+b & n > 9 
      & Univ(a) & Univ(b) & a,b>=0
   |- x::lseg<nnn1, r1> * r1::lseg<nnn2, r2>& nnn1 >= 9 & nnn2>=2 .
expect Fail.

Fixed by adding ante_ex : es_init_impl_expl_vars

*/

