data node { int val ; node next }.

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
//   n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     n!=0 ->  [] self::node<next = r> * r::lseg<b,p> & b=n-1; 
     }
     inv n >= 0.

lemma_safe self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::lseg<n, p> & n>=a & a>=0  -> self::lseg<a, r> * r::lseg<b, p> & n=a+b.
//above cannot work!


checkentail n>9 & nnn1+n2+n3=n & nnn1>=0 & n2>=0 & n3>=0
   & Univ(nnn1) & Univ(n2) & Univ(n3) |- nnn1>=9 & n2>=2.
expect Fail.
print residue.

checkentail n>9 & nnn1+n2+n3=n & nnn1>=0 & n2>=0 & n3>=0
   & Univ(nnn1) & Univ(n2) & Univ(n3) |- nnn1>=9 & n2>=1.
expect Valid.
print residue.


/*
checkentail x::lseg<n, p> & n > 9 |- x::lseg<n1, r1> * r1::lseg<n2, r2> & n1 >= 9 & n2 >= 3.
expect Fail.
print residue.
*/
//print residue.
// invalid-exception


//(3)
checkentail n>9 & nnn1+n2+n3=n & nnn1>=0 & n2>=0 & n3>=0
   & Univ(nnn1) & Univ(n2) & Univ(n3) & k=n2 |- nnn1>=9 & k>=1.
expect Fail. // assuming k is global here..
print residue.


checkentail i<m<=n & Univ(m) & i<n & i>=0 
        |- m=i+1.
expect Valid.
print residue.


checkentail i<m<=n & Univ(m) & i<n & i>=0 
        |- m=i+1.
expect Valid.
print residue.

checkentail (((0<=m & 
    ((0-xx)+1)<=m & m<n) | (m=n & 0<=n))) & i<m & m<=n 
    & Univ(m) & i<n & 0<=i & xx!=null |-  m=i+1.
expect Valid.
print residue.


/*
checkentail n>9 & n1+n2+n3=n & n1>=0 & n2>=0 & n3>=0
   & Univ(n1) & Univ(n2) & Univ(n3) |- n2>=2 .
expect Valid.
print residue.


*/

/*

!!! **solver.ml#7747:p1(after xpure_perm): Univ(n3) & Univ(n2) & Univ(n1) & 0<=n3 & 0<=n2 & 0<=n1 & n3+n1+n2=n & 9<n
!!! **solver.ml#9687:process_univ added!: 2<=n2
!!! **solver.ml#9687:process_univ added!: 2<=n2

*/