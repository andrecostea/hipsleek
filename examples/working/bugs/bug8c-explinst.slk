data node {
	int val;
	node next;
}.

pred ll<n> == self=null & n=0
	or self::node<_, r> * r::ll<n-1>
	inv n>=0.


/*
//(3)
checkentail x::node<5,q> |- x::node<v,_>.
print residue.
expect Valid.
// v=5

checkentail x::node<5,q> |- (exists v: x::node<v,_>).
print residue.
expect Valid.


checkentail x::node<5,q>*q::node<_,null> |- x::ll<n>.
// implicit inst
expect Valid.
print residue.

checkentail x::node<5,q>*q::node<_,null> |- (exists n: x::ll<n>).
// existential
expect Valid.
print residue.
*/

checkentail x::node<5,q>*q::node<_,null> |- [nnn] x::ll<nnn>.
// explicit
expect Valid.
print residue.

pred foo<n> == self::node<v,_> & n>v 
	inv self!=null.

checkentail x::node<5,_> |- x::foo<6>.
expect Valid.

checkentail x::node<5,_> |- x::foo<n>.
expect Valid.
print residue.

checkentail x::node<5,_> |- x::foo<n> & n=6.
expect Valid.
print residue.

checkentail x::node<5,_> |- [n] x::foo<n> & n=6.
expect Valid.
print residue.

//(2)
checkentail x::node<5,_> |- (exists nnn: x::foo<nnn> & nnn=6).
expect Valid.


// emp

/*

*/