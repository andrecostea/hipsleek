
data node { int val ; node next }.
pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n-1> 
	inv n >= 0.


checkentail (x::ll<n>@L * y::ll<m>@L) & n>0 & m>0  |- y!=x. 
print residue.
// x * y
// (3) Valid
expect Valid.


checkentail x::ll<n> * y::ll<m> & n>0 & m>0  |- y::ll<m1> * x::ll<n1> & y!=x.
print residue.
// true
// (4) Valid
expect Valid.

checkentail (x::ll<n>@L * y::ll<m>@L) & x!=null & y!=null  |- (y::ll<m1>@L & x::ll<n1>@L) & y!=x. 
print residue.
// x * y
// (5) Valid
expect Valid.

checkentail (x::ll<n>@L * y::ll<n>@L) & n>0  |-  x!=y. 
print residue.
// x * y
// (6) Valid
expect Valid.

