data node {
	int val;
	node next;
}.

pred lseg<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg<p, n-1>
	inv n>=0.

lemma "ll_tail2" self::lseg<p, n> 
   <- self::lseg<t, n-1> * t::node<_, p>.

checkentail x::node<_,q>*q::lseg<p,n> |- x::lseg<qq,n+1>.
print residue.
expect Valid.

checkentail x::node<_,q>*q::lseg<p,n> |- x::lseg<qq,n+2>.
print residue.
expect Fail.

checkentail x::node<_,q>*q::lseg<p,n> |- [qq] x::lseg<qq,n+1>.
print residue.
expect Valid.

checkentail x::node<_,q>*q::lseg<p,n> |- x::lseg<qq,n+2>.
print residue.
expect Fail.
