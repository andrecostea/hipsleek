data node {
	int val;
	node next
}.

/* view for a singly linked list */
pred ll<L1:seq(int),n:int> == self = null & L1 = [||]
	or self::node<v, r> * r::ll<L2,n> & L1 = v:::L2. //bug with v+n works with z3

//checkentail x::node<a,y>*y::node<b,null> |- x::ll<L,_>.
//checkentail x::node<a,y>*y::node<b,null> |- [m] x::ll<L,_> & length(L,m) & m=2. 
//checkentail x::node<a,y>*y::node<b,null> |- x::ll<L,_> & len(L)= 2.  // this syntax uses seqaxioms.smt2
//checkentail x::node<a,y>*y::node<b,null> |- [m] x::ll<L,_> & length(L,m) & m!=2. // unsound if valid!
//checkentail x::node<a,y>*y::node<b,null> |- x::ll<L,_> & len(L)!= 2. // unsound if valid!
//checkentail x::node<a,null> |- [m] x::ll<L,_> & length(L,m) & m=1. 
//checkentail x::node<a,null> |- x::ll<L,_> & len(L) = 1. 
//checkentail x::node<a,null> |- [m] x::ll<L,_> & length(L,m) & m>0.  
//checkentail x::node<a,null> |- x::ll<L,_> & len(L) > 0. 
//checkentail x::node<a,null> |- x::ll<L,_> & length(L,1). 
//checkentail x::node<a,null> |- x::ll<L,_> & len(L) = 1. 
//checkentail x::node<a,null> |- (exists m: x::ll<L,_> & length(L,m) & m>2). 
//checkentail x::node<a,null> |- x::ll<L,_> & len(L) > 2. 
//checkentail x::node<a,null> |- x::ll<L,_> & exists(v: exists(L2: L = v:::L2 & len(L) > 1)).
//checkentail L1 = [|1|] & L3 = [|2,3|] |- true. // parsed as L1=[|1|] & L3=1 & L3=2 ! fixed
//checkentail L1=[|1|] & L2=[|2|] & L3=[|1,2|] |- append(L1,L2,L3).
//checkentail L1=[|1|] & L2=[|2|] & L3=[|1,2|] |- app(L1,L2) = L3.
//checkentail L1=1:::L2 & L2=[|2|] & L3=[|1,2,2|] |- app(L1,L2) = L3.
//checkentail L1=2:::L2 & L2=[|2|] & L3=[|2,2,2|] |- app(L1,L2) = rev(L3).
//checkentail s1 = [|1|] & s2 = [||] & s3 = [|1|] |- app(s2,s1) = app(s3,s1).
//checkentail s1 = [|1|] & s2 = [|2|] & s3 = [|1,2|] |- rev(app(s1,s2)) = rev(s3).
//checkentail s1 = [|1|] & s2 = [|2|] & s3 = [|1,2|] |- rev(app(s1,s2)) = s3.
//checkentail s1 = [|1|] & s2 = [|2|] & s3 = [|1,2|] |- app(rev(s3),s2) = app(s2,s1,s2).

checkentail r_790!=null & r_790!=null & r_852=r_790 & L1_809=L2_791 & (r_790=null & 
L2_849 = [||] | exists(v:exists(L2:L2_849= v ::: L2 & r_790!=null))) & L1=v_789 :::
L2_791 & 0<(len(L1)) & L2_849=app(L1_809,[|a|]) & v_851=v_789 & 
L2_853=L2_849 |-  app(L1,[|a|])=v_851 ::: L2_853.

//checkentail L1_806=L2_799 & v_797=v_812 & L2_807=(v_812:int) ::: L2_814 & L2_814=L2 & 
//L_825!=[||] & L1=v_797 ::: L2_799 & L1!=[||] & L_825 = app(rev(L1_806), L2_807) |-  L_825=app(rev(L1),L2).
//checkentail r_1348=y & (r_1341=null & L2_1342=[||] | exists(v: exists(L2:L2_1342 = v::: L2 & 
//r_1341!=null))) & L1= (v_1340:int) ::: L2_1342 & 0<(len(L1)) & v_1347=v_1340 & 
//L2_1349=L2 & (y=null & L2=[||] | exists(u:exists(L2_1372:L2=u ::: L2_1372 & 
//y!=null))) |-  app([|head(L1)|],L2)= v_1347::: L2_1349. 
//print residue.
