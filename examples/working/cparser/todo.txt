==================================================================
list all examples/features supported


==================================================================
#ex1-a.c:

 to handle if(x) === if (x!=NULL)

-------------------------------

Checking procedure foo$node__star... inside unfold_baref

( [(,0 ); (,1 )]) :ex1-a.c:27: 9: bind: node  x'::node__star<pdata_27_897'>@L cannot be derived from context


(Cause of Bind Failure):ex1-a.c:27: 9:  List of Failesc Context: [FEC(1, 0, 0 )]
Failed States:
[
 Label: [(,0 ); (,1 )]
 State:
        fe_kind: MUST
        fe_name: logical bug
        fe_locs: {
                  fc_message:  x'=null |-  x'!=null. LOCS:[26;19;27] (must-bug)
                  fc_current_lhs_flow: {FLOW,(3,7)=__Error}}
 ]

Procedure foo$node__star result FAIL.(1)

==================================================================
# ex2-b.ss: DONE

  - generate inferred specs for empty specs (see ex2-a.ss)
  - ref
  - NI/I

==================================================================
# ex1-b.c: DONE

 - print the new generated HeapPred: DONE
 - expected result ex1.c: DONE

==================================================================
# ex3-b.ss: DONE
generate inferred specs for empty specs
   -ref: DONE
   - test with cparser: ex3-c.c: DONE

===========
expected result:
   ex3-a.ss
==================================================================
# ex2-?.ss:
generate inferred specs for empty specs
  - NI/I
==================================================================
==================================================================


Convert old pred to new pred:
1.c: ???
append.c: DONE
append-tail.c: DONE
avl-bind.c: ???
avl.c: ???
global1.c: DONE
global2.c: DONE
global3.c: DONE
global4.c: DONE
global5.c: DONE
global6.c: ???
global-ll.c: ???
global-ll2.c: ???
global-mutual-rec.c: DONE
heaps.c: ???
heaps2.c: ???
heaps3-1.c: ???
heaps3-2.c: ???
pair.c: ???
pair2.c: ???
struct_global.c: ???
struct_plain.c: DONE
t1.c: ???
t2.c: ???

slayer/address_of2.c: ???
slayer/address_of.c: ???
slayer/address_of_global.c: ???
slayer/address_of_malloced_struct.c: ???
slayer/address_of_struct.c: DONE
slayer/bool_to_int.c: DONE
slayer/call_arg.c: ???
slayer/call_arg_unique.c: DONE
slayer/call.c: DONE
slayer/control_guard.c: DONE
slayer/dead_code.c: DONE
slayer/deref_funs.c: ???
slayer/deref_NULL2.c: DONE
slayer/deref_via_call.c: ???
slayer/deref_via_call2.c: ???
slayer/empty.c: DONE
slayer/free_local1.c: ???
slayer/free_local.c: ???
slayer/fun_arg_order.c: DONE
slayer/global_var.c: DONE
slayer/if.c: DONE
slayer/ifguard.c: DONE
slayer/if_pointer.c: ???
slayer/inline_criteria.c: ???
slayer/update_global_var.c: ???
slayer/while2loads.c: ???
slayer/writer_reader.c: ???

