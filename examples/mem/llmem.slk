data node {
	int val; 
	node next;	
}.

pred nll<n> == self::node<_,null> & n = 1 
	or self::node<_,p> * p::nll<n-1> 
	inv n > 0
	mem {self}->(node<@M,@M>).

pred ll<M> == self = null & M = {} 
	or self::node<_,p> * p::ll<Mp> & M subset union(Mp,{self})
	inv true
	mem M->(node<@M,@M>).
	
checkentail x::ll<Mx> & Mx != {} |- x::node<_,_@L>.
print residue.


/*
checkentail true |- exists M1,M2: M2 = union(Ml,Mr) & M2 subset union(M1,Ml) & M1 = Ml.
checkentail self != null |- exists p: {self} subset {self,p} & {self,p} subset {self} & p notin {self} & self notin {p}.
print residue.
*/
