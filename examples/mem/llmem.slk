data node {
	int val; 
	node next;	
}.

pred nll<n> == self::node<_,null> & n = 1
	or self::node<_,p> * p ::nll<n-1> 
	inv n > 0
	mem {self}->().

pred ll<M> == self = null & M = {} 
	or self::node<_,p> * p::ll<Mp> & M = union(Mp,{self})
	inv true
	memE M->(node<@L,@M> | node<@L,@A> | node<@A,@A>).

checkentail x::ll<M> & M != {} |- x::node<_,_@L>.
print residue.


