data cl {int val;}.

 data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.


checkentail x::node<_,q>*q::ll<n> |- 
x::node@v<_,q>*q::ll@v<n>.
 print residue.
 //valid v = full or v<full x(1-v) q (1-v) ll 
 //-> missing?
 
  
/*  
checkentail x::ll@[R]<n> & n>0 |- x::node@v<_,_>.
 print residue.
 //valid v=R ll (n-1) or v<R x(R-v) ll (n-1)
 

checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_>.
print residue.
checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl<_>.
checkentail x::cl@[L]<_> * x::cl@[R]<_>|- x::cl@v<_> & join([L],[R,L],v).
print residue.
//valid v=L+(R,L) x[RR]

checkentail x::cl@[L]<_> * y::cl@[R]<_> |- x!=y.
checkentail x::cl@[L]<_> * y::cl@[R]<_> |- x=y.
checkentail x::cl@[L]<_> * y::cl@[L,R]<_> |- x!=y.
checkentail x::cl@[L]<_> * y::cl@[L,R]<_> |- x=y.
*/