// this used a single predicate to mark lower/upper stack bound
// for a given method; and it is specified in the post-condition

pred_prim RS_min<low:int>
  inv 0<=low.

pred_prim RS_max<high:int>
  inv 0<=high.

/*
lemma "norm" self::RS_max<m> 
   <- self::RS_max<m1>*self::RS_max<m2> & m=max(m1,m2).
*/


lemma "combine" 
   self::RS_max<m1>*self::RS_max<m2> 
   -> self::RS_max<m> & m=max(m1,m2).


/*
checkentail x::RS_min<3> * x::RS_min<6> |- x::RS_min<3>.

checkentail x::RS_max<3> * x::RS_max<6> |- x::RS_max<3>.

checkentail x::RS_min<n3> & n3=max(n1,n2) & n1>=3 & n2>=6
    |- x::RS_min<n> & n>=7. // Fail

checkentail x::RS_min<n3> & n3=max(n1,n2) & n1>=3 & n2>=6
    |- x::RS_min<n> & n>=5. // Valid

checkentail x::RS_min<n3> & n3=max(n1,n2) & n1>=3 & n2>=6
    |- x::RS_min<n> & n>=1. // Valid

checkentail x::RS_max<n3> & n3=max(n1,n2) & n1<=3 & n2<=6
    |- x::RS_max<n> & n<=7. // Valid

checkentail x::RS_max<n3> & n3=max(n1,n2) & n1<=3 & n2<=6
    |- x::RS_max<n> & n<=5. // Fail

checkentail x::RS_max<n3> & n3=max(n1,n2) & n1<=3 & n2<=6
    |- x::RS_max<n> & n<=1. // Fail

checkentail x::RS_min<n1> * x::RS_min<n2> & n1>=3 & n2>=6
    |- x::RS_min<n> & n>=7. // Fail

checkentail x::RS_min<n1> * x::RS_min<n2> & n1>=3 & n2>=6
    |- x::RS_min<n> & n>=5. // Valid

checkentail x::RS_min<n1> * x::RS_min<n2> & n1>=3 & n2>=6
    |- x::RS_min<n> & n>=1. // Valid

checkentail x::RS_max<n1> * x::RS_max<n2> & n1<=3 & n2<=6
    |- x::RS_max<n> & n<=7. // Valid

checkentail x::RS_max<n1> * x::RS_max<n2> & n1<=3 & n2<=6
    |- x::RS_max<n> & n<=1. // Fail
*/

checkentail x::RS_max<n1> * x::RS_max<n2> & n1<=6 & n2<=3
    |- x::RS_max<n> & n<=6. // Valid

checkentail n1<=3 & n2<=6 & n=max(n1,n2) |- n<=6. //Valid

checkentail x::RS_max<n3> & n3=max(n1,n2) & n1<=3 & n2<=6
    |- x::RS_max<n> & n<=5. // Fail

checkentail x::RS_max<n1> * x::RS_max<n2> * x::RS_max<n3> & n1<=6 & n2<=3
    |- x::RS_max<n> & n<=6. // Fail

checkentail x::RS_max<n1> * x::RS_max<n2> * x::RS_max<n3> & n1<=6 & n2<=3 & n3<=10
    |- x::RS_max<n> & n<=6. // Fail

checkentail x::RS_max<n1> * x::RS_max<n2> * x::RS_max<n3> & n1<=6 & n2<=3 & n3<=10
    |- x::RS_max<n> & n<=10. // Valid

