//Valid.Valid.Fail
data node { int val ; node next }.

pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

/*
pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg<b,p> & b=n-1; 
     }
     inv n >= 0.
*/

lemma "V1" self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.
// Valid 

checkentail x::lseg<3,p> |- x::lseg<1,q>.
print residue.

/*
checkentail x::lseg<3,p> |- x::lseg<3,q>.
print residue.

checkentail x::lseg<3,p> |- x::lseg<4,q>.
print residue.
*/
