data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

//lemma self::lseg(1.0)<n, p> & n = a + b & a,b >=0 <-> self::lseg(1.0)<a, r> * r::lseg(1.0)<b, p>.

checkentail x::lseg(1.0)<n, p> & x!=p |- x!=null.
// valid

checkentail x::lseg(1.0)<n, p> & n>0 |- x!=null.
// valid

checkentail x::lseg(1.0)<n, p> & x=null |- p=null.
// valid


checkentail x::lseg(1.0)<n, y> * y::lseg(1.0)<m,z> & n>0 & m>0 |- x!=y.
// fail but should be valid 


pred ll<n> == self = null & n = 0
        or self::node<next = r> * r::ll<n - 1>
        inv n >= 0.

checkentail x::ll(1.0)<n> * y::ll(1.0)<m> & n>0 |- x!=y.
// fail but should be valid 


checkentail x::ll(1.0)<n> * y::ll(1.0)<m> & n>0 & m>0 |- x!=y.
// fail but should be valid 


pred clist<n> == 
         self::node<next = r> * r::lseg<n - 1, self>
         inv n >= 1.

checkentail x::clist(1.0)<n>  |- x!=null.
// valid 

checkentail x::clist(1.0)<n>*y::clist(1.0)<m>  |- x!=y.
// fail but should be valid 

data node2 {
        int ele;
        int height;
        node2 left;
        node2 right;
}.

pred avl<m, n, bal> == 
 case {
  self = null -> [] m = 0 & n = 0 & bal=1;
  self!=null -> [] self::node2<_, n, p, q> * p::avl<m1, n1, _> * q::avl<m2, n2, _
>
                & m = 1+m1+m2 & n=1+max(n1, n2) 
  & -1 <= n1-n2 <=1 & bal=n1-n2+1; }
                //& n2+bal=n1+1 & n2<=n1+1 & n1 <= 1+n2
                // & (n1=n2 & bal=0 | n1>n2 & bal=1 | n1<n2 & bal=2)
        inv m >= 0 & n >= 0 & 0<=bal<=2.

checkentail x::avl(1.0)<m,_,_> * y::avl(1.0)<n,_,_> & m>0 & n>0   |- x!=null & y!=null.
// valid 


checkentail x::avl(1.0)<m,_,_> * y::avl(1.0)<n,_,_> & m>0 & n>0   |- x!=y .
// fail but should be valid 


checkentail x::node(1.0)<_,_> * y::node(1.0)<_,_>   |- x!=y .
// fail but should be valid 



