data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

//lemma self::lseg<n, p> & n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::lseg(f)<n, p> & n = a + b & a,b >=0 <-> self::lseg(f)<a, r> * r::lseg(f)<b, p>.
lemma self::lseg(1.0)<n, p> & n = a + b & a,b >=0 <-> self::lseg(1.0)<a, r> * r::lseg(1.0)<b, p>.


// (1)
checkentail x::lseg(1.0)<n, p> & n = 7 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 = 3 & n2 = 4.
//print residue.
// valid


// (2)
checkentail x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, p> & n1 = 3 & n2 = 4 |- x::lseg(1.0)<n, p> & n = 7.
// valid : after lemma folding fixed
print residue.
//LDK: currently fail because f=1.0 is transfer to the RHS


// (3)
checkentail x::lseg(1.0)<n, p> & n = 7 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, p> & n1 = 4 & n2 = 3.
// valid
//print residue.

//checkentail x::lseg(1.0)<n, p> & n = 6 |- (exists p1, p2: x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, p> & n1 = p1 & n2 = p2 & p1 = p2).
//checkentail x::lseg(1.0)<n, p> & n = 6 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, p> & n1 = p1 & n2 = p2 & p1 = p2.

// (4)
checkentail x::lseg(1.0)<n, p> & n = 6 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, p> & n1 = n2.
// valid 

// (5)
checkentail x::lseg(1.0)<n, p> * t1::lseg(1.0)<x1, y1> & n = 6 |- t1::lseg(1.0)<x2, y2> * x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, p> & n1 = n2.
// valid

// (6)
checkentail x::lseg(1.0)<n, p> & n = 7 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 = 3 & n2 = 4.
// valid
//print residue.

// (7)
checkentail x::lseg(1.0)<n, p> & n = 7 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 >= 1 & n2 >= 2.
// valid
//print residue.

// (8)
checkentail x::lseg(1.0)<n, p> & n > 10 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 >= 1 & n2 >= 2.
// valid

// (9)
checkentail x::lseg(1.0)<n, p> & n > 10 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 >= 9 & n2 >= 2.
// valid

// (10)
checkentail x::lseg(1.0)<n, p> & n > 9 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 >= 9 & n2 >= 2.
// fail

// (11)
checkentail x::lseg(1.0)<n, p> & n > 10 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 >= 10 & n2 <= 2.
// valid

// (12)
checkentail x::lseg(1.0)<n, p> & n > 10 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> * r2::lseg(1.0)<n3, r3> & n1 <= 1 & n2 <= 2 & n3 >= 5.
// valid

// (13)
checkentail x::lseg(1.0)<n, p> & n > 10 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> * r2::lseg(1.0)<n3, r3> & n1 >= 1 & n2 >= 2 & n3 >= 5.
// valid

// (14)
checkentail x::lseg(1.0)<n, p> & n > 10 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> * r2::lseg(1.0)<n3, r3> & n1 >= 1 & n2 >= 2 & n3 >= 1.
// valid

// (15)
checkentail x::lseg(1.0)<n, p> & n = 7 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 = 3 & n2 = 5.
// fail

// (16)
checkentail x::lseg(1.0)<n, p> & n = 7 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, r2> & n1 = 3 & n2 = 3.
// valid

// (17)
checkentail x::lseg(1.0)<n, p> & n = 7 |- x::lseg(1.0)<n1, r1> * r1::lseg(1.0)<n2, p> & n1 = 3 & n2 = 3.
// fail


