/*
 * LDK
 * Explicit normalization with complex LHS
 *
*/

data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

//lemma self::ll(f1)<n1> * self::ll(f2)<n2> -> self::ll(f1+f2)<n1> & n1=n2.

lemma self::ll(f1)<n1> * self::ll(f2)<n2> & n1=n2 -> self::ll(f1+f2)<n1>.


//(1)
checkentail x::ll(0.5)<1> * x::ll(0.2)<2> |- false.
// fail

//(2)
checkentail x::ll(0.5)<n1> * x::ll(0.6)<n2> & n1=n2 |- n1=0.
// valid because we CHECK for satisfiability: false |- n1=1
// wierd behaviors: valid with NONE, imm, eps
// but fail with imm+eps

//(3)
checkentail x::ll(f1)<n1> * x::ll(f2)<n2> & n1=n2 |- x=null.
// fail, may bug
//print residue.


