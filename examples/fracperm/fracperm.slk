data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

/*


//SPLIT
checkentail x::node<_,null> |- x::node(1/4)<_,null> * x::node(3/4)<_,null>.
print residue.

//JOIN
checkentail x::node(1/2)<_,null> * x::node(1/2)<_,null> |- x::node<_,null>.
print residue.

//NON-ALIAS
checkentail x::node(1/2)<_,null> * y::node(3/4)<_,null> & p1+p2>1 |- x!=y.
print residue.

//CONTRADICT
checkentail x::node(1/2)<_,null> * x::node(3/4)<_,null> |- false.
print residue.//valid

checkentail x::node(1/2)<_,null> |- x::node(3/4)<_,null>.
print residue. //fail

//MATCH
checkentail x::node<v,p> |- x::node(3/4)<v1,p1>.
print residue.

//MATCH
checkentail x::ll(1)<n> |- x::ll(1)<m>.
print residue.

//MATCH
checkentail x::ll<n+1> |- x::ll<m+1>.
print residue. // WHY FAIL ???

//MATCH
checkentail x::ll<n*n-1> |- x::ll<m>.
print residue. //TEST redlog and linearize_formula

//MATCH
checkentail x::ll<n> & 1/3+2/3=1 |- x::ll<m>.
print residue.
*/

//MATCH
checkentail x::ll(1/2)<2> |- x::ll<m>.
print residue.

