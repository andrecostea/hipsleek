Starting Reduce... 
Starting Omega...oc
Translating global variables to procedure parameters...
Eliminating variable aliasing...
Eliminating pointers...PASSED 

Checking procedure main$... 
dprint: cell.ss:57: ctx:  List of Failesc Context: [FEC(0, 0, 1  )]

Successful States:
[
 Label: 
 State:x_29'::cell()<v_int_53_638>@M[Orig] * l_30'::LOCKA()<x_29>@M[Derv]&Anon_full_perm=FLOAT 1. & v_int_53_638=0 & l_30'!=null & ls'=union(ls,bag({l_30'}))&{FLOW,(20,21)=__norm}[]
       es_var_measures: MayLoop

 ]

procedure call:cell.ss:60: 2: 
Verification Context:(Line:48,Col:10)
Proving precondition in method acquire$lock~cell for spec:
 EBase exists (Expl)(Impl)[f_647](ex)l_30'::LOCKA(f_647)<x_29>@M[Derv]&
       l_30' <notin> ls'  & f_647>FLOAT 0. & f_647<=FLOAT 1.&
       {FLOW,(1,23)=__flow}[]
         EAssume 1::ref [ls]
           EXISTS(v_648: x_29'::cell()<v_648>@M[Orig] * 
           l_30'::LOCKA(f_647)<x_29>@M[Derv]&0<=v_648 & ls'=union(ls,
           bag({l_30'}))&{FLOW,(20,21)=__norm})[] has failed 


procedure call:cell.ss:62: 2: 
Verification Context:(Line:48,Col:10)
Proving precondition in method finalize$lock~cell for spec:
 EBase l_30'::LOCKA()<x_29>@M[Derv]&l_30' <in> ls' &{FLOW,(20,21)=__norm}[]
         EAssume 1::ref [ls]
           l_30'::LOCKA()<x_29>@M[Derv]&ls'=ls-bag({l_30'})&
           {FLOW,(20,21)=__norm}[] has failed 


Procedure main$ result FAIL-1

Checking procedure main1$... 
Procedure main1$ SUCCESS
Halting Reduce... 
Stop Omega... 26 invocations 
5 false contexts at: ( (84,2)  (83,2)  (80,2)  (79,2)  (79,2) )

Total verification time: 0.37 second(s)
	Time spent in main process: 0.21 second(s)
	Time spent in child processes: 0.16 second(s)
