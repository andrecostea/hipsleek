data node { int val ; node next }.

data cell { int val}.

pred cellp<v> == self::cell<v>
     inv true.

pred ll<n> == self = null & n = 0
     or self::node<next = r> * r::ll<n - 1>
     inv n>=0.

pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.


lemma "split1" self::cellp(f)<v> & f=f1+f2 & f1>0.0 & f2>0.0  -> self::cellp(f1)<v> * self::cellp(f2)<v> & 0.0<f<=1.0.


lemma "L2R" self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p> & n>=0 .


lemma "combine1" self::cellp(f)<v> & f=f1+f2 &f1>0.0 & f2>0.0  <- self::cellp(f1)<v> * self::cellp(f2)<v> &  0.0<f<=1.0.

lemma "R2L" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p> & n>=0.


//checkentail x::lseg<n1, r1> * r1::lseg<n2, p> & n1 = 3 & n2 = 4 |- x::lseg<n, p> & n = 7.
//print residue.// valid

//(1)
checkentail x::cellp(0.4)<v1> * x::cellp(0.6)<v1>  |- x::cellp(1.0)<v2>.
print residue. //valid, COMBINE
// succeeds with 2 answers
// lossless combine --> one answer

//(2)
checkentail x::cellp(0.4)<v1> * x::cellp(0.2)<v1> * x::cellp(0.2)<v1> * x::cellp(0.2)<v1>  |- x::cellp(1.0)<v2>.
//print residue. //valid, COMBINE
// succeeds with 24 answers
// lossless combine --> one answer

//(3)
checkentail x::cellp(0.4)<v1> * x::cellp(0.6)<v3> |- x::cellp(1.0)<v2>.
//print residue. 
// fails as may failure
// lossless combine --> would succeed ???

//(4)
checkentail x::cellp(0.4)<v1> * x::cellp(0.6)<v3> & v1=v3 |- x::cellp(1.0)<v2>.
//print residue. //valid, COMBINE

//(5)
checkentail x::cellp(0.4)<v1> * x::cellp(0.7)<v1>  |- false.
//print residue. //fail, COMBINE
// fails as a MUST failure (wrong as false on LHS not detected)
// lossless combine --> would succeed
// LDK: this is a motivate towards lossless combine.
// if we can normalize the LHS, we will be able to
// check for UNSAT

//(6)
checkentail x::cellp(0.4)<v1> * x::cellp(0.7)<v1>  |- x::cellp(f)<v>.
//print residue. //valid, COMBINE
// succeeds with 6 answers
// lossless combine --> would succeed with one false prestate
// LDK: need UNSAT check in the LHS

//(7)
checkentail x::cellp(0.4)<v1> * x::cellp(0.3)<v1>  |- x::cellp(f)<v>.
//print residue. //valid, COMBINE
// succeeds with 8 answers
// lossless combine --> would succeed with 2 answers





