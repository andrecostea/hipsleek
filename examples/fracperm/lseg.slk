/*
 * LDK
 * To understand entailment
 * From sleek7.slk
 */

data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

lemma self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> * r1::lseg<n2, r2> & n1 = 3 & n2 = 4.
print residue.

checkentail x::lseg<n, p> & n > 10 |- x::lseg<n1, r1> * r1::lseg<n2, p> & n1 >= 1 & n2 >= 2.
print residue.

checkentail x::lseg<n, p> & n > 10 |- x::lseg<n1, r1> * r1::lseg<n2, r2> & n1 >= 9 & n2 >= 2.
print residue.


checkentail x::lseg<n, p> & n > 1000 |- (exists r1: x::lseg<n1, r1> * r1::lseg<n2, p> & n1 >= 1 & n2 <=2 ).
print residue.

checkentail x::lseg<n, p> & n > 1000 |-  x::lseg<n1, r1> * r1::lseg<n2, p> & n1 >= 1 & n2 <=2.
print residue. // ???? compare with the previous


checkentail x::lseg<n, p> & n > 10 |- x::lseg<n1, r1> * r1::lseg<n2, r2> * r2::lseg<n3, r3> & n1 <= 1 & n2 <= 2 & n3 >= 5.
print residue.

checkentail x::lseg<n, p> & n > 10 |- x::lseg<n1, r1> * r1::lseg<n2, r2> * r2::lseg<n3, r3> & n1 >= 1 & n2 >= 2 & n3 >= 5.
print residue.

checkentail x::lseg<n, p> & n > 10 |- x::lseg<n1, r1> * r1::lseg<n2, r2> * r2::lseg<n3, r3> & n1 >= 1 & n2 >= 2 & n3 >= 1.
print residue.

checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> * r1::lseg<n2, r2> & n1 = 3 & n2 = 3.
print residue.

checkentail x::lseg<n, p> & n = 7 |- (exists r2: x::lseg<n1, r1> * r1::lseg<n2, r2> & n1 = 3 & n2 = 3).
print residue. //??? is the difference due to the fact that r2 is replaced by a fresh variable
