data cell { int val }.

data pair { int val ; int val2 }.

data node { int val ; node next }.

pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

pred clist<n> == self::node<_,q> * q::lseg<n-1,self>
	inv n>0.

pred foo<n> == self::cell<_> & n=5
	inv n>0.

checkentail x=3 |- x>1.
print residue.

checkentail x::foo<a> & a=1 |- x::foo<d>.
print residue.

checkentail x::cell<a> & a=1 |- x::cell<d>.
print residue.

checkentail x::cell<a> |- x::foo<d>.
print residue.

checkentail x::cell<a> |- x::cell<_> & d=5.
print residue.

checkentail x::cell<a> |- x::cell<_>.
print residue.

checkentail x::cell<2> |- x::cell<_>.
print residue.

checkentail x::cell<2> |- x::cell<c>.
print residue.

checkentail x::cell<n> & n=2 |- x::cell<c>.
print residue.

checkentail x::cell<2> |- (exists p : p::cell<c> & p=x).
print residue.

checkentail x::pair<a,b> |- x::pair<_,_>.
print residue.

checkentail x::pair<a,b> |- (exists c,d : x::pair<c,d>).
print residue.

checkentail x::node<a,b> |- x::node<c,d>.
print residue.

checkentail x::pair<a,b> |- x::pair<b,_>.
print residue.

checkentail x::node<a,b> |- x::node<a,c>.
print residue.

checkentail x::node<a,b> |- (exists c : x::node<a,c>).
print residue.

checkentail x::node<a,b> |- (exists c,atmp : x::node<atmp,c> & atmp=a).
print residue.

checkentail x::node<_,r>*r::lseg<3,x> |- x::clist<n>.
print residue.

checkentail (exists t : x::node<_,r>*r::lseg<t,x> & t=3) |- x::clist<n>.
print residue.

checkentail  x::node<_,r>*r::lseg<t,x> & t=3 |- x::clist<n>.
print residue.
checkentail x::node<_,r>*r::lseg<3,x> |- (exists q,m : x::node<_,q>*q::lseg<m,x>& n=m+1).
print residue.

checkentail x::node<_,r>*r::lseg<3,x> |- (exists q,n,m : x::node<_,q>*q::lseg<m,x>& n=m+1).
print residue.

checkentail x::node<_,r>*r::lseg<3,x> |- (exists n,m : x::node<_,q>*q::lseg<m,x>& n=m+1).
print residue.

checkentail x::node<_,r>*r::lseg<3,x> |- (exists n : x::node<_,q>*q::lseg<m,x>& n=m+1).
print residue.

