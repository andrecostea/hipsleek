data node { int val ; node next }.


pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

checkentail x=null |- x::ll<0>.
checkentail x::node<_, null> |- x::ll<m> & m = 1.

checkentail x::node<_, r> * r::node<_, r2> * r2::ll<n> |- x::ll<n + 2>.
print residue.
checkentail x::node<_, r> * r::node<_, r2> * r2::ll<n> |- (exists m: x::ll<m> & m>n).
print residue.
checkentail x::node<_, r> * r::node<_, r2> * r2::ll<n> |- x::ll<m> & m>n.
print residue.

let $a = x' = 1.
print $a.
let $b = x' = x + 1.
print $b.
let $c = compose[x]($a; $b).
print $c.
let $d = x' = 2.
print $d.

checkentail $c |- $d.
print residue.
checkentail x::ll<n> |- x::node<_,q>.
checkentail x::ll<n> & n>2 |- x::node<_,q>.
print residue.
checkentail x::ll<n> & n>2 |- (exists q: x::node<_,q>).
print residue.
