data node { int val ; node next }.
data node2 { node left ; node right }.

HeapPred ll(node x, int n).
HeapPred rr(node x, int n).

//(1)
checkeq [x] x::node<a,null> -|- x::node<c,null> .
// VALID --> !!! [(flted_8_42, flted_8_48), (a, c)]

//(2)
checkeq [x] x::node<a,null> -|- y::node<c,null> & x=y .
//!!! DIFF PART: [ x::node<a,flted_12_53>]
//!!! DIFF PART: [ y::node<c,flted_12_59>&x=y]
// FAIL

//(3)
checkeq [x] x::node<a,null> -|- x::node<c,null> & x=y .
//!!! EQ. FMT: [[(flted_16_66, flted_16_72), (a, c)]]
//!!! DIFF PART: [ emp&x=y]
// FAIL
// ERROR : I think (2) and (3) should have similar outcome
// thru variable renaming and = exploitation

//(4)
checkeq [x] x::node2<a,b> -|- x::node2<c,d> .

//(5)
checkeq [x] x::node2<a,a> -|- x::node2<c,d> .

//(6)
checkeq [x] x::node2<a,b> -|- x::node2<c,c> .

//(6)
checkeq [x] x::node2<a,b> & a=b -|- x::node2<c,d> .

//(6)
checkeq [x] x::node2<a,b> & a=b -|- x::node2<c,d> & d=c .

//(6)
checkeq [x] x::node2<a,b> & a=b -|- x::node2<c,d> & c=d .
