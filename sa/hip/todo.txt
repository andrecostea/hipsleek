# sll-del.ss: DONE

void delete(node2 x)
  /* infer[n] */
/*
  requires x::node2<_,p,q>*q::sll<x> & q!=null
  ensures x::node2<_,p,r>*r::sll<x> ;
*/
  infer[H1,G1]
  requires H1(x)
  ensures G1(x);

[ G1(x_589) ::= x_589::node2<val_27_548,next_29_528'>@M 
              * HP_590(next_29_528')&true,

 H1(x_594) ::= x_594::node2<val_27_520',next_27_521'>@M * 
    next_27_521'::node2<val_27_523',next_27_587>@M&next_27_587=null,

 HP_590(next_29_528') ::= 
 emp&next_29_528'=null
 or next_29_528'::node2<val_27_548,next_29_591>@M * HP_590(next_29_591)&true
 ]

PROBLEM : inferred H1(..) is too strong..
==================================================
# dll-del.ss: DONE

==================================================
# bubble.ss

todo:
  - to fix bug of infer.simplify: DONE
  - to revise unk analysis

==================================================
# dll-del.ss: DONE
HP_590 and HP_598 are the same but our normalization system did not
merge them.

[ H1(x_589) ::= x_589::node2<val_26_520',next_26_521'>@M * 
next_26_521'::node2<val_26_523',next_26_587>@M * HP_590(next_26_587)&true,
 G1(x_597) ::= x_597::node2<val_26_548,next_28_528'>@M * HP_598(next_28_528')&true,
 HP_590(next_26_587) ::= 
 emp&next_26_587=null
 or next_26_587::node2<val_26_523',next_26_588>@M * HP_590(next_26_588)&true
 ,
 HP_598(next_28_528') ::= 
 emp&next_28_528'=null
 or next_28_528'::node2<val_26_548,next_28_599>@M * HP_598(next_28_599)&true
 ]
==================================================
# dll-del.ss

The new dll-del uses two pointers and obtained the following.
Below H1 * H2 are the same. However, H1 should have two nodes,
due to x.next.next test;
so I am surprised that it has suddenly lost a node.
This did not happen for sll-del.ss.

[ H1(x_642) ::= x_642::node2<val_26_533',prev_26_534',next_26_535'>@M * 
  HP_643(prev_26_534',next_26_535') * HP_559(prev_26_534')&true,
 G1(x_649) ::= x_649::node2<val_26_568,prev_26_569,next_28_544'>@M * 
   HP_643(prev_26_569,next_28_544') * HP_559(prev_26_569)&true,

 HP_643(prev_26_534',next_26_535') ::= 
 emp&next_26_535'=null
 or next_26_535'::node2<val_26_533',prev_26_644,next_26_645>@M * 
    HP_643(prev_26_644,next_26_645) * HP_559(prev_26_644)&true
 ]

*************************************
# sll-del2.ss

We obtained :

 G2(res) ::= res::node2<val_30_567,v_node2_30_579>@M&true]

but why did we not get:

 G2(res) ::= res::node2<val_30_567,null>@M&true]

This problem seems to be triggered at relational assumption:

 res::node2<val_30_567,v_node2_30_579>@M&true --> G2(res)&true,

# dll-del3.ss

  too many lines, why did it not fold to dll?

# dll-del3a.ss

  too many lines, why did it not fold to dll?
  G2(..) definition looks good.
