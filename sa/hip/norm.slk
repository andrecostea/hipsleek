data node {
  int val;
  node next;
}.
/*

pred ll<> == self=null
  or self::node<_,q>*q::ll<>
  inv true.

pred lseg<p> == self=p
  or self::node<_,q>*q::lseg<p>
  inv true.
*/
pred l2<y> == self::node<a,p> & y=p//self::node<a,null> & y=self
  or self::node<_,q>*q::l2<y>
  inv true.
  //inv y!=null.
  // l2<y> can be transformed to self::node<_,q>*q::lseg<>
  // say under option --sa-extract
/*
pred H<y> == self=null
  or self::node<_,q>*q::H<y> 
  inv true.
  // y is a useless parameter that can be eliminated
  // say under option --sa-useless
*/
