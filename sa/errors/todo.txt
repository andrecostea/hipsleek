/hip
#ll-next.ss

 --sa-ep:
   print inferred spec

expect:
----------

requires x::node<val,next>@M * HP_907(next) or emp&x=null
ensures  x::node<val,res>@M * HP_907(res) or emp&x=null & res=null;

=====================================================================

ll-val
ll-next
ll-last
ll-get-size
ll-next
ll-insert
ll-append
ll-delete
tree-val
tree-rem

=====================================================================
#alias.ss

GOT

 case {
   (tmp!=null | tmp=null) ->
     requires tmp::node<val,next>@M * HP_930(next) & true || emp & tmp=null
     ensures HP_930(res) * x::node<val,res>@M & true || emp & x=null & res=null;;
   }

==============>
/* EXPEXTED
case x == null =>
  ensures res = null;
case x != null =>
  requires x::node(val,next)
  ensures x::node(val,next) & res=next;
*/

=====================================================================

======================================================================
#ll-next, ll-size, ll-last.c
ll-last2


case spec

=====================================================================
# sa/errors/ex2.slk --efa: FIXED

checkentail x=null |- x::node<p>.
print residue.

why can't we have residue with error status?
why can't we have the original state x=null in residue state?

expecting residue of :
  (x=null) & _Flow=MUST_ERRE

checkentail true |- x::node<p>.
print residue.
/*
# ex2.slk --efa

# why did we get a must failure? shouldn't this be a may failure?


expecting residue of :
  true & _Flow=MAY_ERR

=====================================================================
# next.ss: DONE

[ // BIND
(0)H(x)&true --> x::node<next1> * HP_1196(next1)&
true,
 // BIND
(0)H(x)&true --> emp&
x=null,
 // POST
(0)x::node<res> * HP_1196(res)&true --> G(x,res)&
true]

=============
GOT:

[ H(x1) ::= hfalse&false,
 G(x2,res1) ::= x2::node<res1>&res1=DP]

**************
EXPECTED:
[ H(x1) ::= x::node<next1> * HP_1196(next1) \/ x=null,
 G(x2,res1) ::= x2::node<res1>&res1=DP \/ true \mustF

]



=====================================================================
# ex2.slk --efa --sa-error: FIXED

//3
checkentail true |- x::node<p>.
print residue.
// true & flow __MayError

Got:
Entail 3: Fail.(no cex)(may) cause:do_unmatched_rhs : x::node<p>

why residue for (3) not printed nor given warning?
=====================================================================
# v-next.slk --sa-error

# What is the diff between --efa and --sa-error?

checkentail x=null or x::node<q> |- x::node<r>.
print residue.

Got:
Entail 1: Fail.(cex)(must) cause:OrR[do_unmatched_rhs : x::node<r>,valid]
 <1>emp&{FLOW,(1,25)=__flow}[]

Why can't we get below yet?

Expects:
 x=null & __ERROR \/ q=r & x!=null & __NORM

  D1 |- P -> R1
  D2 |- P -> R2
 --------------------
  D1 \/ D2 |- P --> (R1\/R2)


 Incorrect still!
    emp&x=null&{FLOW,(5,6)=__Error}[]
    or emp&{FLOW,(-1,0)=__false}[]

=====================================================================
# v-next3.slk --efa (FIXED)

checkentail x=null |- x::node<r>.
print residue.

Why is this Valid? should it be a must failure like v.next.slk.
Residue is correct though. 

Entail 1: Valid. 
 <1>emp&x=null&{FLOW,(5,6)=__Error}[]
[[ COND ==>  UnmatchedRHSData ==> ]]


# v-next3.slk --efa

checkentail x::node<q> |- x::node<r>.

Missing x!=null

Entail 2: Valid. 
 <1>emp&r=q&{FLOW,(3,4)=__norm}[]
=====================================================================
# v-next5a.ss --efa (FIXED)

  requires x=null
  ensures x=null & flow __Error;

Why is there a throwlist?
Need to disable it.

Changed to a warning but still inappropriate..

WARNING: v-next5a.ss_20:10_20:31:the result type __Error is not covered by the throw list[]


Last Proving Location: 1 File "v-next5a.ss",Line:5,Col:0

ERROR: at v-next5a.ss_20:10_20:31 
Message: the result type is not covered by the throw list
 Stop Omega... 0 invocations caught
(Program not linked with -g, cannot print stack backtrace)

Exception occurred: Failure("the result type is not covered by the throw list")
Error3(s) detected at main 
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
=====================================================================
