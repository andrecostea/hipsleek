# sa/infer/cell2.ss: FIXED

Why do we have this? Is this from error-spec
inference.Can we have an option to turn this off
esp for @shape. We may later have @shape_err

(0)HP_11(x@NI,y)&true --> emp&y=null(6,10),
 // POST

@incorrect inference below?

[ HP_11(x_1247,y_1248) ::= emp&y_1248=null(6,10)
   \/  y_1248::cell<val_10_1224>(4,5),
 GP_12(x_1239,y_1240) ::= y_1240::cell<v_int_10_1236>(4,5)]

[ // BIND
(0)HP_11(x@NI,y)&true --> y::cell<val_10_1224>&
true(4,5),
 // BIND
(0)HP_11(x@NI,y)&true --> emp&
y=null(6,10),
 // POST
(0)y::cell<v_int_10_1236>&true --> GP_12(x,y)&
true(4,5)]

Checking procedure f_r_1200_while_10_2$cell~cell... Proving binding in method f_r_1200_while_10_2$cell~cell for spec  EAssume ref [x;y]
   emp&{FLOW,(4,5)=__norm}[]
   , Line 0

=================================================================
# cell.ss 

  while (y.val<x.val) 
    infer[@shape]
      requires true
      ensures true;

What @shape spec is being composed for
while loop? Can we print it?

Checking procedure f_r_1200_while_10_2$cell~cell... Proving binding in method f_
r_1200_while_10_2$cell~cell for spec  EAssume ref [x;y]
   emp&{FLOW,(4,5)=__norm}[]
   , Line 0

( []) bind: node  y'::cell<val_10_1205'>@L cannot be derived from context
cell.ss_10:9_10:14

=================================================================
# cell5a.ss 

 same issue as cell5b.ss where some nodes
 are missing in the base-case.

  if (y.val<x.val) {
    y.val = y.val +1;
    wloop(x,y);
  }

[ HP_13(x_1290,y_1291) ::=  [
      x_1290::cell<val_17_1253> * y_1291::cell<val_17_1287>],
 GP_16(x_1292,x_1293,y_1294,y_1295) ::=  [
  emp&y_1294!=null & x_1292!=null; 
  y_1294::cell<val_17_1247> * x_1292::cell<val_17_1253>&x_1293=x_1292 
  & y_1295=y_1294]]

 Why is there an emp case for GP16?
=================================================================
# cell5b.ss 

  if (y.val<x.val) {
    y.val = y.val +1;
    wloop(x,y);
  }

 Some cell nodes are missing in the base-case.

 Why is there an emp case for GP_12?

 What happens to the x,y nodes?

(1;0)GP_12(x,y)&x!=null & y!=null --> GP_12(x,y)&
true(4,5),

--esl

id: 15; caller: []; line: 0; classic: false; kind: POST; hec_num: 1; evars: []; infer_vars: [ HP_11,GP_12,HP_1232]; c_heap: emp
 checkentail GP_12(x',y')&y'=y & x'=x & val_10_1231<val_10_1237 & v_bool_10_1209' & 
val_10_1231<val_10_1237 & v_bool_10_1209' & v_int_11_1263=1+val_10_1231 & 
val_11_1258=val_10_1231 & x!=null & y'!=null&{FLOW,(4,5)=__norm}[]
 |-  GP_12(x,y)&{FLOW,(4,5)=__norm}[]. 

[ HP_11(x_1272,y_1273) ::=  [x_1272::cell<val_10_1237> * y_1273::cell<val_10_1269>],
 GP_12(x_1274,y_1275) ::=  
    [emp&y_1275!=null & x_1274!=null; 
     y_1275::cell<val_10_1231> * x_1274::cell<val_10_1237>]]
=================================================================
# cell2ap.ss 

How come post_n not performed after shape
inference?

void main(cell x, cell y)
  infer[@shape,
  @post_n]
  requires true
  ensures true;
{
    y.val=x.val+1;
}

# cell2aq.ss 

This shows how post_n can be trigered after
shape analysis.

  infer[//@shape,
  @post_n]
  requires x::cell<a>*y::cell<b>
  ensures x::cell<c>*y::cell<d>;

Post Inference result:
main$cell~cell
 requires x::cell<a> * y::cell<b> & MayLoop[]
     ensures x::cell<c_1211> * 
y::cell<d_1212> & a=d_1212-1 & c_1211=d_1212-1;

=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
