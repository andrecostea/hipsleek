 id: 0; caller: []; line: 20; classic: false; kind: BIND; hec_num: 5; evars: []; infer_vars: [H1,G1]; c_heap: emp
 checkentail H1(x,y)&x=x' & y=y'&{FLOW,(22,23)=__norm}[]
 |-  x'::cell<val_20_762'>@L[Orig]&true&{FLOW,(1,25)=__flow}[]. 
hprel_ass: [ H1(x,y)&true --> x::cell<val_20_783>@M&true]
res:  [
  x::cell<val_20_783>@M[Orig]&x=x' & y=y' & val_20_762'=val_20_783&{FLOW,(22,23)=__norm}[]
  ]
--------------
 id: 2; caller: []; line: 20; classic: false; kind: BIND; hec_num: 4; evars: []; infer_vars: [H1,G1]; c_heap: emp
 checkentail x::cell<val_20_783>@M[Orig]&x=x' & y=y' & val_20_762'=val_20_783&
{FLOW,(22,23)=__norm}[]
 |-  emp&true&{FLOW,(1,25)=__flow}[]. 
res:  [
  x::cell<val_20_783>@M[Orig]&x=x' & y=y' & val_20_762'=val_20_783&{FLOW,(22,23)=__norm}[]
  ]
--------------
 id: 3; caller: []; line: 21; classic: false; kind: BIND; hec_num: 5; evars: []; infer_vars: [H1,G1]; c_heap: emp
 checkentail x::cell<val_20_783>@M[Orig]&x=x' & y=y' & n1_30'=val_20_783&
{FLOW,(22,23)=__norm}[]
 |-  y'::cell<val_21_763'>@L[Orig]&true&{FLOW,(1,25)=__flow}[]. 
res:  failctx
         fe_kind: MUST
         fe_name: separation entailment
         fe_locs: {
                   fc_message: infer_heap_node
                   fc_current_lhs_flow: {FLOW,(22,23)=__norm}}