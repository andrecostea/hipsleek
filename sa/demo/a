Starting Omega...oc

choose_context@2@1
choose_context inp1 :LHS node: x::ltwo<y>@M[0][Orig][LHSCase]
choose_context inp2 :RHS node: res::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & res=null
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@2 EXIT out :[]

choose_context@3@1
choose_context inp1 :LHS node: x::ltwo<y>@M[0][Orig][LHSCase]
choose_context inp2 :RHS node: y::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & res=null
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@3 EXIT out :[ 
  Type: MaterializedArg (y,partial,) view_defn_mater
  LHS: x::ltwo<y>@M[0][Orig][LHSCase]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: res::ll@M[0][Orig][LHSCase]]

process_matches@4@1
process_matches inp1 : x::ltwo<y>@M[0][Orig][LHSCase]
process_matches inp2 :([],( res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]))
process_matches@4 EXIT out : Prio:-1COND =>[Prio:2BaseCaseFold =>;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]

process_matches@5@1
process_matches inp1 : x::ltwo<y>@M[0][Orig][LHSCase]
process_matches inp2 :([ 
  Type: MaterializedArg (y,partial,) view_defn_mater
  LHS: x::ltwo<y>@M[0][Orig][LHSCase]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: res::ll@M[0][Orig][LHSCase]],( y::ll@M[0][Orig][LHSCase], res::ll@M[0][Orig][LHSCase]))
process_matches@5 EXIT out : Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>;
         Prio:1BaseCaseUnfold =>
         ]

@1! weighted action:[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>
                           LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                           RHS: y::ll@M[0][Orig][LHSCase];
         Prio:1BaseCaseUnfold =>
                                 LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                                 RHS: y::ll@M[0][Orig][LHSCase]
         ]]
choose_match@6@1
choose_match inp1 :[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      Type: Root
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase]
 lhs_rest: 
                                      x::ltwo<y>@M[0][Orig][LHSCase]
 rhs_rest: 
                                      y::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>
                           Type: MaterializedArg (y,partial,) view_defn_mater
                           LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                           RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: 
                           res::ll@M[0][Orig][LHSCase];
         Prio:1BaseCaseUnfold =>
                                 Type: MaterializedArg (y,partial,) view_defn_mater
                                 LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                                 RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: 
                                 res::ll@M[0][Orig][LHSCase]
         ]]
choose_match@6 EXIT out :None

sort_wt@7@1
sort_wt inp1 :[ Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]], Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>
                           LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                           RHS: y::ll@M[0][Orig][LHSCase];
         Prio:1BaseCaseUnfold =>
                                 LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                                 RHS: y::ll@M[0][Orig][LHSCase]
         ]]
sort_wt@7 EXIT out :[ Prio:1SEARCH =>[
        Prio:1Unfold 1 =>
                          LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                          RHS: y::ll@M[0][Orig][LHSCase];
        Prio:1BaseCaseUnfold =>
                                LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                                RHS: y::ll@M[0][Orig][LHSCase]
        ], Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

@1! sorted action:[(1): Prio:1SEARCH =>[
        Prio:1Unfold 1 =>
                          LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                          RHS: y::ll@M[0][Orig][LHSCase];
        Prio:1BaseCaseUnfold =>
                                LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                                RHS: y::ll@M[0][Orig][LHSCase]
        ],
(2): Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
compute_actions@1
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: x::ltwo<y>@M[0][Orig][LHSCase]
compute_actions inp3 :LHS pure: x=null & res=null
compute_actions inp4 :RHS cand:[ res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]]
compute_actions inp5 :right alias:[]
compute_actions@1 EXIT out : COND =>[Prio:1SEARCH =>[
                Prio:1Unfold 1 =>
                                  LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                                  RHS: y::ll@M[0][Orig][LHSCase];
                Prio:1BaseCaseUnfold =>
                                        LHS: x::ltwo<y>@M[0][Orig][LHSCase]
                                        RHS: y::ll@M[0][Orig][LHSCase]
                ];Prio:2COND =>[Prio:2BaseCaseFold =>
                                                      LHS: emp
                                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

choose_context@9@8
choose_context inp1 :LHS node: y::ll@M[1][Orig]
choose_context inp2 :RHS node: res::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & x=null & res=null
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@9 EXIT out :[]

choose_context@10@8
choose_context inp1 :LHS node: y::ll@M[1][Orig]
choose_context inp2 :RHS node: y::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & x=null & res=null
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@10 EXIT out :[ 
  Type: Root
  LHS: y::ll@M[1][Orig]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: res::ll@M[0][Orig][LHSCase]]

process_matches@11@8
process_matches inp1 : y::ll@M[1][Orig]
process_matches inp2 :([],( res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]))
process_matches@11 EXIT out : Prio:-1COND =>[Prio:2BaseCaseFold =>;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]

process_matches@12@8
process_matches inp1 : y::ll@M[1][Orig]
process_matches inp2 :([ 
  Type: Root
  LHS: y::ll@M[1][Orig]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: res::ll@M[0][Orig][LHSCase]],( y::ll@M[0][Orig][LHSCase], res::ll@M[0][Orig][LHSCase]))
process_matches@12 EXIT out : Prio:-1COND =>[Prio:1BaseCaseUnfold =>;Prio:1Match =>]

@8! weighted action:[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1COND =>[Prio:1BaseCaseUnfold =>
                                        LHS: y::ll@M[1][Orig]
                                        RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]]]
choose_match@13@8
choose_match inp1 :[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      Type: Root
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase]
 lhs_rest: 
                                      y::ll@M[1][Orig]
 rhs_rest: y::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1COND =>[Prio:1BaseCaseUnfold =>
                                        Type: Root
                                        LHS: y::ll@M[1][Orig]
                                        RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: 
                                        res::ll@M[0][Orig][LHSCase];Prio:1Match =>

 Type: Root
 LHS: y::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: res::ll@M[0][Orig][LHSCase]]]
choose_match@13 EXIT out :None

sort_wt@14@8
sort_wt inp1 :[ Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]], Prio:-1COND =>[Prio:1BaseCaseUnfold =>
                                        LHS: y::ll@M[1][Orig]
                                        RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]]]
sort_wt@14 EXIT out :[ Prio:1COND =>[Prio:1BaseCaseUnfold =>
                                       LHS: y::ll@M[1][Orig]
                                       RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]], Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

@8! sorted action:[(1): Prio:1COND =>[Prio:1BaseCaseUnfold =>
                                       LHS: y::ll@M[1][Orig]
                                       RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]],
(2): Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
compute_actions@8
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: y::ll@M[1][Orig]
compute_actions inp3 :LHS pure: x=null & x=null & res=null
compute_actions inp4 :RHS cand:[ res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]]
compute_actions inp5 :right alias:[]
compute_actions@8 EXIT out : COND =>[Prio:1COND =>[Prio:1BaseCaseUnfold =>
                                               LHS: y::ll@M[1][Orig]
                                               RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]];Prio:2COND =>[Prio:2BaseCaseFold =>
                                                                    LHS: 
                                                                    emp
                                                                    RHS: 
                                                                    res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

choose_context@16@15
choose_context inp1 :LHS node: emp
choose_context inp2 :RHS node: res::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & x=null & res=null
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@16 EXIT out :[]

process_matches@17@15
process_matches inp1 : emp
process_matches inp2 :([],( res::ll@M[0][Orig][LHSCase], emp))
process_matches@17 EXIT out : Prio:-1COND =>[Prio:2BaseCaseFold =>;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]

@15! weighted action:[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
choose_match@18@15
choose_match inp1 :[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      Type: Root
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: emp;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
choose_match@18 EXIT out :None

sort_wt@19@15
sort_wt inp1 :[ Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
sort_wt@19 EXIT out :[ Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

@15! sorted action:[(1): Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
compute_actions@15
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: emp
compute_actions inp3 :LHS pure: x=null & x=null & res=null
compute_actions inp4 :RHS cand:[ res::ll@M[0][Orig][LHSCase]]
compute_actions inp5 :right alias:[]
compute_actions@15 EXIT out : COND =>[Prio:2COND =>[Prio:2BaseCaseFold =>
                                             LHS: emp
                                             RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

do_base_fold@20
do_base_fold inp1 : es_formula: emp&x=null & x=null & res=null&{FLOW,(19,20)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: y::ll@M[1][Orig]
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: None
 es_term_err: None
 es_trace: 
   COND ==>  SEARCH ==>  Unfold 1 ==>  COND ==>  COND ==>  Match ==>  COND ==>  COND ==>  BaseCaseFold ==> 
 es_unsat_flag: false
do_base_fold inp2 : res::ll@M[0][Orig][LHSCase]&true&{FLOW,(19,20)=__norm}[]
do_base_fold@20 EXIT out : [
  emp&x=null & x=null & res=null&{FLOW,(19,20)=__norm}[]
  ]

Entail (1) : Valid. 

 <1>emp&x=null & x=null & res=null&{FLOW,(19,20)=__norm}[]


choose_context@22@21
choose_context inp1 :LHS node: x::ltwo<y_820>@M[0][Orig][LHSCase]
choose_context inp2 :RHS node: res::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@22 EXIT out :[]

choose_context@23@21
choose_context inp1 :LHS node: x::ltwo<y_820>@M[0][Orig][LHSCase]
choose_context inp2 :RHS node: y::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@23 EXIT out :[ 
  Type: MaterializedArg (y_820,partial,) view_defn_mater
  LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: res::ll@M[0][Orig][LHSCase]]

process_matches@24@21
process_matches inp1 : x::ltwo<y_820>@M[0][Orig][LHSCase]
process_matches inp2 :([],( res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]))
process_matches@24 EXIT out : Prio:-1COND =>[Prio:2BaseCaseFold =>;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]

process_matches@25@21
process_matches inp1 : x::ltwo<y_820>@M[0][Orig][LHSCase]
process_matches inp2 :([ 
  Type: MaterializedArg (y_820,partial,) view_defn_mater
  LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: res::ll@M[0][Orig][LHSCase]],( y::ll@M[0][Orig][LHSCase], res::ll@M[0][Orig][LHSCase]))
process_matches@25 EXIT out : Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>;
         Prio:1BaseCaseUnfold =>
         ]

@21! weighted action:[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>
                           LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                           RHS: y::ll@M[0][Orig][LHSCase];
         Prio:1BaseCaseUnfold =>
                                 LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                                 RHS: y::ll@M[0][Orig][LHSCase]
         ]]
choose_match@26@21
choose_match inp1 :[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      Type: Root
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase]
 lhs_rest: 
                                      x::ltwo<y_820>@M[0][Orig][LHSCase]
 rhs_rest: 
                                      y::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>
                           Type: MaterializedArg (y_820,partial,) view_defn_mater
                           LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                           RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: 
                           res::ll@M[0][Orig][LHSCase];
         Prio:1BaseCaseUnfold =>
                                 Type: MaterializedArg (y_820,partial,) view_defn_mater
                                 LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                                 RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: htrue
 rhs_rest: 
                                 res::ll@M[0][Orig][LHSCase]
         ]]
choose_match@26 EXIT out :None

sort_wt@27@21
sort_wt inp1 :[ Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]], Prio:-1SEARCH =>[
         Prio:1Unfold 1 =>
                           LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                           RHS: y::ll@M[0][Orig][LHSCase];
         Prio:1BaseCaseUnfold =>
                                 LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                                 RHS: y::ll@M[0][Orig][LHSCase]
         ]]
sort_wt@27 EXIT out :[ Prio:1SEARCH =>[
        Prio:1Unfold 1 =>
                          LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                          RHS: y::ll@M[0][Orig][LHSCase];
        Prio:1BaseCaseUnfold =>
                                LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                                RHS: y::ll@M[0][Orig][LHSCase]
        ], Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

@21! sorted action:[(1): Prio:1SEARCH =>[
        Prio:1Unfold 1 =>
                          LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                          RHS: y::ll@M[0][Orig][LHSCase];
        Prio:1BaseCaseUnfold =>
                                LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                                RHS: y::ll@M[0][Orig][LHSCase]
        ],
(2): Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
compute_actions@21
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: x::ltwo<y_820>@M[0][Orig][LHSCase]
compute_actions inp3 :LHS pure: y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
compute_actions inp4 :RHS cand:[ res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]]
compute_actions inp5 :right alias:[]
compute_actions@21 EXIT out : COND =>[Prio:1SEARCH =>[
                Prio:1Unfold 1 =>
                                  LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                                  RHS: y::ll@M[0][Orig][LHSCase];
                Prio:1BaseCaseUnfold =>
                                        LHS: x::ltwo<y_820>@M[0][Orig][LHSCase]
                                        RHS: y::ll@M[0][Orig][LHSCase]
                ];Prio:2COND =>[Prio:2BaseCaseFold =>
                                                      LHS: emp
                                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

choose_context@29@28
choose_context inp1 :LHS node: y_820::ll@M[1][Orig]
choose_context inp2 :RHS node: res::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@29 EXIT out :[]

choose_context@30@28
choose_context inp1 :LHS node: y_820::ll@M[1][Orig]
choose_context inp2 :RHS node: y::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@30 EXIT out :[ 
  Type: Root
  LHS: y_820::ll@M[1][Orig]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: res::ll@M[0][Orig][LHSCase]]

process_matches@31@28
process_matches inp1 : y_820::ll@M[1][Orig]
process_matches inp2 :([],( res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]))
process_matches@31 EXIT out : Prio:-1COND =>[Prio:2BaseCaseFold =>;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]

process_matches@32@28
process_matches inp1 : y_820::ll@M[1][Orig]
process_matches inp2 :([ 
  Type: Root
  LHS: y_820::ll@M[1][Orig]
  RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: res::ll@M[0][Orig][LHSCase]],( y::ll@M[0][Orig][LHSCase], res::ll@M[0][Orig][LHSCase]))
process_matches@32 EXIT out : Prio:-1COND =>[Prio:1BaseCaseUnfold =>;Prio:1Match =>]

@28! weighted action:[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1COND =>[Prio:1BaseCaseUnfold =>
                                        LHS: y_820::ll@M[1][Orig]
                                        RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y_820::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]]]
choose_match@33@28
choose_match inp1 :[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      Type: Root
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase]
 lhs_rest: 
                                      y_820::ll@M[1][Orig]
 rhs_rest: 
                                      y::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]],
(2): Prio:-1COND =>[Prio:1BaseCaseUnfold =>
                                        Type: Root
                                        LHS: y_820::ll@M[1][Orig]
                                        RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: 
                                        res::ll@M[0][Orig][LHSCase];Prio:1Match =>

 Type: Root
 LHS: y_820::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: res::ll@M[0][Orig][LHSCase]]]
choose_match@33 EXIT out :None

sort_wt@34@28
sort_wt inp1 :[ Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]], Prio:-1COND =>[Prio:1BaseCaseUnfold =>
                                        LHS: y_820::ll@M[1][Orig]
                                        RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y_820::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]]]
sort_wt@34 EXIT out :[ Prio:1COND =>[Prio:1BaseCaseUnfold =>
                                       LHS: y_820::ll@M[1][Orig]
                                       RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y_820::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]], Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

@28! sorted action:[(1): Prio:1COND =>[Prio:1BaseCaseUnfold =>
                                       LHS: y_820::ll@M[1][Orig]
                                       RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y_820::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]],
(2): Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
compute_actions@28
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: y_820::ll@M[1][Orig]
compute_actions inp3 :LHS pure: x=null & y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
compute_actions inp4 :RHS cand:[ res::ll@M[0][Orig][LHSCase], y::ll@M[0][Orig][LHSCase]]
compute_actions inp5 :right alias:[]
compute_actions@28 EXIT out : COND =>[Prio:1COND =>[Prio:1BaseCaseUnfold =>
                                               LHS: y_820::ll@M[1][Orig]
                                               RHS: y::ll@M[0][Orig][LHSCase];Prio:1Match =>

 LHS: y_820::ll@M[1][Orig]
 RHS: y::ll@M[0][Orig][LHSCase]];Prio:2COND =>[Prio:2BaseCaseFold =>
                                                                    LHS: 
                                                                    emp
                                                                    RHS: 
                                                                    res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

choose_context@36@35
choose_context inp1 :LHS node: emp
choose_context inp2 :RHS node: res::ll@M[0][Orig][LHSCase]
choose_context inp3 :LHS pure: x=null & y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
choose_context inp4 :RHS pure: true
choose_context inp5 :right aliase:[]
choose_context@36 EXIT out :[]

process_matches@37@35
process_matches inp1 : emp
process_matches inp2 :([],( res::ll@M[0][Orig][LHSCase], emp))
process_matches@37 EXIT out : Prio:-1COND =>[Prio:2BaseCaseFold =>;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]

@35! weighted action:[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
choose_match@38@35
choose_match inp1 :[(1): Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      Type: Root
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase]
 lhs_rest: emp
 rhs_rest: emp;Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
choose_match@38 EXIT out :None

sort_wt@39@35
sort_wt inp1 :[ Prio:-1COND =>[Prio:2BaseCaseFold =>
                                      LHS: emp
                                      RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
sort_wt@39 EXIT out :[ Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

@35! sorted action:[(1): Prio:2COND =>[Prio:2BaseCaseFold =>
                                     LHS: emp
                                     RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]
compute_actions@35
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: emp
compute_actions inp3 :LHS pure: x=null & y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
v_null_23_781'=null & res=v_null_23_781'
compute_actions inp4 :RHS cand:[ res::ll@M[0][Orig][LHSCase]]
compute_actions inp5 :right alias:[]
compute_actions@35 EXIT out : COND =>[Prio:2COND =>[Prio:2BaseCaseFold =>
                                             LHS: emp
                                             RHS: res::ll@M[0][Orig][LHSCase];Prio:2UnmatchedRHSData =>  res::ll@M[0][Orig][LHSCase]]]

do_base_fold@40
do_base_fold inp1 : es_formula: 
  emp&x=null & y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & 
  v_null_23_781'=null & res=v_null_23_781'&{FLOW,(19,20)=__norm}[]
 es_pure: true
 es_orig_ante: None
 es_heap: y_820::ll@M[1][Orig]
 es_aux_conseq: true
 es_must_error: None
 es_var_measures: None
 es_term_err: None
 es_trace: 
   COND ==>  SEARCH ==>  Unfold 1 ==>  COND ==>  COND ==>  Match ==>  COND ==>  COND ==>  BaseCaseFold ==> 
 es_unsat_flag: false
do_base_fold inp2 : res::ll@M[0][Orig][LHSCase]&true&{FLOW,(19,20)=__norm}[]
do_base_fold@40 EXIT out : [
  emp&x=null & y=y_820 & x=null & v_bool_23_800' & x=null & v_bool_23_800' & v_null_23_781'=null & res=v_null_23_781'&{FLOW,(19,20)=__norm}[]
  ]

Entail (2) : Valid. 

Stop Omega... 18 invocations 
SAT Count   : 19
SAT % Hit   : 47.36%
IMPLY Count : 6
IMPLY % Hit : 0.%
Time(cache overhead) : 0. (seconds)

Total verification time: 0.100004 second(s)
	Time spent in main process: 0.080004 second(s)
	Time spent in child processes: 0.02 second(s)

