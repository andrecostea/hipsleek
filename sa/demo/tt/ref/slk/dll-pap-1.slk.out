========dll-pap-1.slk ==========
Starting Omega...oc
G is defined.
H is defined.
HP_9 is defined.
HP_0 is defined.
HP_1 is defined.
HP_2 is defined.
HP_3 is defined.

!!! >>>>>> step 1: find dangling ptrs, link pre and post-preds dangling preds<<<<<<
!!! >>>>>> step 2: split constraints based on pre and post-preds<<<<<<
!!! *** NO SPLITTING DONE ***
!!! >>>>>> step 3: apply transitive implication<<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> pre-predicates<<<<<<
!!! >>>>>> step pre-4: remove unused predicates<<<<<<
!!! >>>>>> pre-predicates: step pre-5: group & simpl impl<<<<<<
!!! >>>>>> pre-predicates: step pre-6: combine<<<<<<
!!! >>>>>> pre-predicates: step pre-7: remove redundant x!=null<<<<<<
!!! >>>>>> pre-predicates: step pre-8: strengthen<<<<<<
!!! >>>>>> step 6: generalization <<<<<<
!!! >>>>>> post-predicates<<<<<<
!!! >>>>>> step post-4: step remove unused predicates<<<<<<
!!! >>>>>> post-predicates: step post-5: remove redundant x!=null : not implemented yet<<<<<<
!!! >>>>>> post-predicates: step post-61: weaken<<<<<<

*************************************
*******relational definition ********
*************************************
[ HP_9(next_15_56,y_57) ::= 
 next_15_56::node<next_15_797,prev_15_798>@M * HP_9(next_15_797,y_57) * 
 HP_0(prev_15_798,y_57)
 or emp&next_15_56=null
 ,
 H(x_58,y_59) ::= x_58::node<next_15_797,prev_15_798>@M * HP_9(next_15_797,y_59) * 
HP_0(prev_15_798,y_59) * y_59::node<next_21_54,prev_21_55>@M * 
HP_2(next_21_54,x_58) * HP_3(prev_21_55,x_58),
 HP_1(y_60,x_61) ::= y_60::node<next_21_820,prev_21_821>@M * HP_2(next_21_820,x_61) * 
HP_3(prev_21_821,x_61),
 HP_2(a,b) ::= NONE,
 HP_3(a,b) ::= NONE,
 HP_0(a,b) ::= NONE]
*************************************
====================
