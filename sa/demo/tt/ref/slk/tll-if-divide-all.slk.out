========tll-if-divide-all.slk ==========
Starting Omega...oc
H is defined.
G is defined.
H_2 is defined.
H_3 is defined.
H_2a is defined.
H_3a is defined.

!!! >>>>>> step 1: find dangling ptrs, link pre and post-preds dangling preds<<<<<<
!!! >>>>>> step 2: split constraints based on pre and post-preds<<<<<<
!!! *** NO SPLITTING DONE ***
!!! >>>>>> step 3: apply transitive implication<<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> pre-predicates<<<<<<
!!! >>>>>> step pre-4: remove unused predicates<<<<<<
!!! >>>>>> pre-predicates: step pre-5: group & simpl impl<<<<<<
!!! >>>>>> pre-predicates: step pre-6: combine<<<<<<
!!! >>>>>> pre-predicates: step pre-7: remove redundant x!=null<<<<<<
!!! >>>>>> pre-predicates: step pre-8: strengthen<<<<<<
!!! >>>>>> step 6: generalization <<<<<<
!!! >>>>>> post-predicates<<<<<<
!!! >>>>>> step post-4: step remove unused predicates<<<<<<
!!! >>>>>> post-predicates: step post-5: remove redundant x!=null : not implemented yet<<<<<<
!!! >>>>>> post-predicates: step post-61: weaken<<<<<<
!!! >>>>>> step 1: find dangling ptrs, link pre and post-preds dangling preds<<<<<<
!!! >>>>>> step 2: split constraints based on pre and post-preds<<<<<<
!!! *** NO SPLITTING DONE ***
!!! >>>>>> step 3: apply transitive implication<<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> pre-predicates<<<<<<
!!! >>>>>> step pre-4: remove unused predicates<<<<<<
!!! >>>>>> pre-predicates: step pre-5: group & simpl impl<<<<<<
!!! >>>>>> pre-predicates: step pre-6: combine<<<<<<
!!! >>>>>> pre-predicates: step pre-7: remove redundant x!=null<<<<<<
!!! >>>>>> pre-predicates: step pre-8: strengthen<<<<<<
!!! >>>>>> step 6: generalization <<<<<<
!!! >>>>>> post-predicates<<<<<<
!!! >>>>>> step post-4: step remove unused predicates<<<<<<
!!! >>>>>> post-predicates: step post-5: remove redundant x!=null : not implemented yet<<<<<<
!!! >>>>>> post-predicates: step post-61: weaken<<<<<<

*************************************
*******relational definition ********
*************************************
  H_3(right_25_49)<-> H(right_25_49)&right_25_49!=null
  G(x_50,res_51)<-> G(right_25_801,v_node_31_823) * G(left_25_800,v_node_32_833) * 
res_51::node<v_node_32_833,v_node_31_823>@M&right_25_801!=null & res_51=x_50
 Declare_Unknown (1,2)[H_2]
*************************************


*************************************
*******relational definition ********
*************************************
  H(x_53)<-> x_53::node<left_25_800,right_25_801>@M * H_2(left_25_800) * 
H_3(right_25_801)
  H_3(right_25_54)<-> emp&right_25_54=null
  G(x_55,res_56)<-> H_2(left_25_800) * res_56::node<left_25_800,right_25_801>@M&res_56=x_55 & 
right_25_801=null
*************************************
====================
