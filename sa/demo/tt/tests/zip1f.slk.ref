Starting Omega...oc
H is defined.
HP_6 is defined.
HP_7 is defined.
HP_8 is defined.
G1 is defined.

!!! >>>>>> step 1: find dangling ptrs, link pre and post-preds dangling preds<<<<<<
!!! >>>>>> step 2: split constraints based on pre and post-preds<<<<<<
!!! **********************************
!!! **** split_base ****
!!! **********************************
!!! post_hps:[G1]
!!! prog_vars:[]
!!! BEFORE:[(1): H(x,y)&x!=null --> x::node<val_31_4,next_31_5>@M * HP_6(next_31_5,y) * 
  HP_7(y,x),
(2): HP_7(y,x) --> y::node<val_32_821,next_32_822>@M * HP_8(next_32_822,x),
(3): HP_6(next_31_5,y) * HP_8(next_32_822,x) --> H(next_31_5,next_32_822),
(4): H(x,y)&res=x & x=null & res=null --> G1(x,y,res),
(5): y::node<val_32_821,next_32_822>@M * 
  G1(next_31_5,next_32_822,v_node_34_853) * 
  x::node<v_int_33_837,v_node_34_853>@M&res=x --> G1(x,y,res)]
!!! =============>>>>
!!! AFTER:[(1): H(x,y)&x!=null --> x::node<val_31_4,next_31_5>@M * HP_6(next_31_5,y) * 
  HP_7(y,x),
(2): HP_7(y,x) --> y::node<val_32_821,next_32_822>@M * HP_8(next_32_822,x),
(3): HP_6(next_31_5,y) * HP_8(next_32_822,x) --> H(next_31_5,next_32_822),
(4): emp&res=null & x=null & res=x --> G1(x,y,res),
(5): H(x,y)&x=null --> emp,
(6): y::node<val_32_821,next_32_822>@M * 
  G1(next_31_5,next_32_822,v_node_34_853) * 
  x::node<v_int_33_837,v_node_34_853>@M&res=x --> G1(x,y,res)]
!!! UNKNOWN added:[]
!!! **********************************
!!! **** end of split_base ****
!!! **********************************
!!! >>>>>> step 3: apply transitive implication<<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> pre-predicates<<<<<<
!!! >>>>>> step pre-4: remove unused predicates<<<<<<
!!! >>>>>> pre-predicates: step pre-5: group & simpl impl<<<<<<
!!! >>>>>> pre-predicates: step pre-6: combine<<<<<<
!!! >>>>>> pre-predicates: step pre-7: remove redundant x!=null<<<<<<
!!! >>>>>> pre-predicates: step pre-8: strengthen<<<<<<
!!! >>>>>> step 6: generalization <<<<<<
!!! >>>>>> generalize_one_cs_hp: <<<<<<
!!! >>>>>> post-predicates<<<<<<
!!! >>>>>> step post-4: step remove unused predicates<<<<<<
!!! >>>>>> post-predicates: step post-5: remove redundant x!=null : not implemented yet<<<<<<
!!! >>>>>> post-predicates: step post-61: weaken<<<<<<

*************************************
*******relational definition ********
*************************************
[ H(x_83,y_84) ::= 
 H(next_31_74,next_32_72) * y_84::node<val_32_71,next_32_72>@M * 
 x_83::node<val_31_73,next_31_74>@M
 or emp&x_83=null
 ,
 G1(x_85,y_86,res_87) ::= 
 emp&res_87=x_85 & x_85=null & res_87=null
 or y_86::node<val_32_821,next_32_822>@M * 
    G1(next_31_5,next_32_822,v_node_34_853) * 
    res_87::node<v_int_33_837,v_node_34_853>@M&next_31_5=v_node_34_853 & 
    res_87=x_85
 ]
*************************************

