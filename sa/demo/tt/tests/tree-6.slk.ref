Starting Omega...oc
G is defined.
H is defined.
HP_0 is defined.
HP_1 is defined.

!!! >>>>>> step 1: find dangling ptrs, link pre and post-preds dangling preds<<<<<<
!!! >>>>>> step 2: split constraints based on pre and post-preds<<<<<<
!!! *** NO SPLITTING DONE ***
!!! >>>>>> step 3: apply transitive implication<<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> pre-predicates<<<<<<
!!! >>>>>> step pre-4: remove unused predicates<<<<<<
!!! >>>>>> pre-predicates: step pre-5: group & simpl impl<<<<<<
!!! >>>>>> pre-predicates: step pre-6: combine<<<<<<
!!! >>>>>> pre-predicates: step pre-7: remove redundant x!=null<<<<<<
!!! >>>>>> pre-predicates: step pre-8: strengthen<<<<<<
!!! >>>>>> step 6: generalization <<<<<<
!!! >>>>>> post-predicates<<<<<<
!!! >>>>>> step post-4: step remove unused predicates<<<<<<
!!! >>>>>> post-predicates: step post-5: remove redundant x!=null : not implemented yet<<<<<<
!!! >>>>>> post-predicates: step post-61: weaken<<<<<<

*************************************
*******relational definition ********
*************************************
[ HP_1(right_31_79) ::=  
 right_31_79::node<key_31_797,left_31_798,right_31_799>@M * 
 HP_0(left_31_798) * HP_1(right_31_799)
 or emp&right_31_79=null
 ,
 H(x_80) ::=  x_80::node<key_31_797,left_31_798,right_31_799>@M * HP_0(left_31_798) * 
HP_1(right_31_799),
 G(x_81) ::=  
 HP_0(left_31_798) * x_81::node<key_31_797,left_31_798,right_31_799>@M&
 right_31_799=null & left_31_798!=null
 or HP_1(right_31_799) * x_81::node<key_31_797,left_31_798,right_31_799>@M&
    left_31_798=null
 or x_81::node<key_31_797,left_31_798,right_31_799>@M * G(left_31_798) * 
    G(right_31_799)&right_31_799!=null & left_31_798!=null
 ,
 HP_0(left_31_78) ::=  
 left_31_78::node<key_31_797,left_31_798,right_31_799>@M * 
 HP_0(left_31_798) * HP_1(right_31_799)
 or emp&left_31_78=null
 ]
*************************************

