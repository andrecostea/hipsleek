data node{
	int val;
	node next;
}.

HeapPred H_3(node prev, node@NI cur, node@NI sent).
HeapPred H_2(node next_1, node@NI prev, node@NI sent).
HeapPred G(node a, node ra, node b, node rb, node@NI c).

pred H<prev,sent> ==
  self::node<_,n1> * H_2(n1,prev,sent) * H_3(prev,self,sent)
inv self!=null.


infer_exact [H_2,H_3] 
 H_2(next_1,prev,sent) * H_3(prev,cur,sent) * 
  cur::node<_,prev>@M & next_1!=sent & 
   next_1!=null |- //next_1::H<cur,sent>
     next_1::node<_,n1> * H_2(n1,cur,sent) * H_3(cur,next_1,sent)
  .
print residue.
/*
 <1>emp&next_1!=sent & next_1!=null & Anon_13=Anon_47 & n1=n1_48 & n1=n1_48&{FLOW,(19,20)=__norm}[]
 inferred hprel: [
   H_2(next_1,prev@NI,sent@NI)&next_1!=sent & 
      next_1!=null --> next_1::node<Anon_47,n1_48>@M * 
                   HP_49(n1_48,prev@NI,sent@NI); 
   H_3(prev,cur@NI,sent@NI)&next_1!=null & 
                   next_1!=sent --> emp; 
   HP_49(n1_48,prev@NI,sent@NI)&
       next_1!=null |#| cur::node<Anon_12,prev>@M 
                   --> H_2(n1_48,cur@NI,sent@NI); 
   cur::node<Anon_12,prev>@M --> H_3(cur,next_1@NI,sent@NI)
*/



infer_exact [H_2,H_3] 
 H_3(prev,cur,sent) * cur::node<_,prev>@M
  & next_1=null 
  & prev'=null |- //cur::H<prev',sent>
     cur::node<_,n1> * H_2(n1,prev',sent) * H_3(prev',cur,sent)
 .
print residue.
/*
 <1>emp&next_1=null & prev'=null & Anon_14=Anon_15 
    & n1=prev & n1=prev & cur=cur_61 & sent=sent_62&{FLOW,(19,20)=__norm}[]
 inferred hprel: [
   H_3(prev,cur@NI,sent@NI) --> H_2(prev,prev'@NI,sent@NI); 
          ^^prev'=null^^

   emp&prev'=null --> H_3(prev',cur_61@NI,sent_62@NI)]

*/

/*
# swl-i2a.slk


Entail (1) : Valid. 


Entail (2) : Valid. 



*/