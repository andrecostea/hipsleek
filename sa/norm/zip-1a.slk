data node{
	int val;
	node next@REC;
}.

pred_extn size[R]<n> ==
   n=0 // base case
   or R::size<m> & n=1+m // recursive case
   inv n>=0.
// infer/sort/der-2.slk
//pred llN<n> == extend ll<> with size[REC]<n> .

HeapPred zip(node@RO a, node b).


relDefn zip(x,y) <->
  x=null & y=null
or x::node<_,p>*y::node<_,q>*zip(p,q).

 relDefn zipN<a,b,n> == extends zip<a,b> with size[REC:0]<n> .
// relDefn zipNM<a,b,n,m> == extends zipN<a,b,n> with size[REC:1]<m> .

/*
pred_split [zip].

print residue.
*/