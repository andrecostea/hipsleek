data node{
     int val;
     node next;
}.

pred zipNM<y> ==
  self=null & y=null 
or self::node<_,p>*y::node<_,q>*p::zipNM<q>.

pred zipN<n> ==
  self=null & n=0 
 or self::node<_,p>*p::zipN<n1> & n=n1+1 
 inv n>=0.


pred zip<> ==
  self=null  
 or self::node<_,p>*p::zip<>  
 inv true.

//lemma_safe self::zipNM<y,m,n> -> self::zipN<n> * y::zipM<m>.

//lemma_safe "both" self::zipNM<y> & n=m <-> self::zipN<n> * y::zipN<m> .

lemma_test "both2" self::zipNM<y>  <-> self::zip<> * y::zip<> .

lemma_test "one" self::zipNM<y>  <- self::zipN<n> * y::zipN<m> & n=m .

/* complex LHS not handled properly
lemma_test "one" self::zipN<n> * y::zipN<m> & n=m
                     -> self::zipNM<y> .
*/


/*
checkentail self_lem_15::node<_,p_113>@M * p_113::zipN<n1_114>@M * y::zipN<m>@M&n=1+
n1_114 & m=n
 |-  (exists q_115: self_lem_15::node<_,p_89>@M * y::node<_,q_90>@M * 
p_89::zipNM<q_115,n1_91,m1_92>@M).

print residue.
*/
