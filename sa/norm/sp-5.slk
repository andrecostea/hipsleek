data node{
	int val;
	node next;
}.


HeapPred P1(node a).
HeapPred P2(node a).

pred ls<y> == self=y
   or self::node<_,p>*p::ls<y>
inv true.

pred ll<> == self=null
   or self::node<_,p>*p::ll<>
inv true.


lemma self::ll<n> -> P1(self) * P2(y).

/*
// this is for independent paramters, just like zip.
 (a) add lemma
 (b) unfold LHS and for infer_cmd
 (c) collect result from
*/

infer
[P1,P2] 
  self=null & y=null
or self::node<_,p>*p::G<y>
|-
P1(self) * P2(y)
.
print residue.


