===================================================================
# sa/norm/split-1a.slk

HeapPred P2(node a).

lemma self::zip<y> -> P1(self) * P2(y).

/*

Why is there an exception/error?

Starting Omega...oc
P1 is defined.
P2 is defined.
Fatal error: exception Failure("get_node_var: invalid argument")

This must be in the lemma checking section?

*/
===================================================================
# split-1b.slk

infer [P1,P2] x::zip<y> |- P1(x).
print residue.

infer [P1,P2] P1(x)  |- x::zip<y>.
print residue.

/*

First entailment loses data.
Second entailment should not succeed,
as it seems to have gained data!
This is esp when y is instantiated
rather than a continuation.

Need to refine 2nd-order matching.

Entail (1) : Valid. 

 <1>emp&true&{FLOW,(19,20)=__norm}[]
 inferred hprel: [x::zip<y>@M[LHSCase]&true --> P1(x)&true]


Entail (2) : Valid. 

 <1>HP_43(y_42)&y=y_42&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(x)&true --> x::zip<y_42>@M[LHSCase] * HP_43(y_42)&true]

===================================================================
# split-1e.slk

infer [G1,G2,P1] G1(a,b) |- P1(a).
print residue.

GOT
===
 <1>emp&true&{FLOW,(19,20)=__norm}[]
 inferred hprel: [G1(a,b)&true --> P1(a)&true]

EXPECT
=====
  G1(a,b) --> P1(a) * HP_n(b,a@NI)
===================================================================
# bug-classic-4a.slk: FIXED

infer_exact
[P1] n::node<_,null> & self=null
|- P1(self).
print residue.

 <1>(exists flted_23_51: emp&flted_23_51=null & self=null&{FLOW,(19,20)=__norm})[]
 inferred hprel: [// Sleek_Entail(2)
n::node<Anon_14,flted_23_51>@M&flted_23_51=null & 
self=null --> P1(self)]

PROBLEM : why did we include an unrelated n::node<_,null>
 when folding with unknown predicate?
===================================================================
# sp-2a.slk & sp_2b.slk

Right-to-left lemmas not being scheduled!
===================================================================
# sp-2b.slk   FIXED

# How come the print lemmas operation are scheduled
entirely after the two lemma_unsafe??

Updated store with unsafe repo.

Updated store with unsafe repo.
Left Lemmas:[Lemma "lem_14":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]==>]
Right Lemmas:[Lemma "lem_13":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]<==]

Left Lemmas:[Lemma "lem_14":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]==>]
Right Lemmas:[Lemma "lem_13":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]<==]
===================================================================
# sp-2d1.slk: FIXED
(pick unknown preds in lhs by comparing both pred name and pred args)

infer [H2] self::node<_,p>*y::node<_,q>*H2(p)*H2(q)
 |- H2(self) * H2(y). 
print residue.

 <1>emp&{FLOW,(19,20)=__norm}[]
 inferred hprel:

[ self::node<Anon_11,p>@M * H2(p) --> H2(self) * HP_22(q); 
  y::node<Anon_12,q>@M * H2(q) * HP_22(q) --> H2(y)]

Why is there spurious HP_22?

===================================================================
# sp-7b1.slk: FIXED (recheck with the new)

infer [P1] P1(x) |- P1(yyyy) & yyyy=x.
print residue.

<1>emp&x=y&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(y) --> P1(y)]

Seems to be UNSOUND! 

How did x=yyyy got added to LHS?

It seems that a do_match was used, but this isn't
quite right, as we are doing a folding process.
Below the LHS was strengthened with x=yyyy!


 ### action =  InferHeap => ( P1(yyyy), emp)
 ### estate =  P1(x)&{FLOW,(19,20)=__norm}[]
 ### conseq =  P1(yyyy)&{FLOW,(19,20)=__norm}[]


!!!:0: 0: do_match: using  P1(x) to prove  P1(yyyy)
!!!:0: 0: do_match: source LHS:  es_formula: emp&{FLOW,(19,20)=__norm}[]
 es_rhs_eqset: [yyyy:x]
 es_infer_hp_rel: [P1(x) --> P1(x)]
 es_unsat_flag: false
!!!:0: 0: do_match: source RHS:  emp&{FLOW,(19,20)=__norm}[]
!!!:0: 0: do_match (after): LHS:  es_formula: emp&x=yyyy&{FLOW,(19,20)=__norm}[]

===================================================================
# sp-7b2.slk  FIXED (recheck with the new)

infer_exact [P1]
   P1(ppp) 
|- P1(y).
print residue.

 <1>emp&{FLOW,(19,20)=__norm}[]
 inferred hprel: [emp --> P1(y_16); P1(ppp) --> emp]

infer_exact [P1]
   P1(ppp) & y=yy
|- P1(y).
print residue.

 Why did we get below which is less accurate.

 <1>emp&y=yy&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(ppp) --> P1(y)]

===================================================================
# sp-7b2.slk  FIXED

infer_exact [P1]
   P1(ppp) & y=yy
|- P1(y).

Why did we get below? when ppp is not traceable
from y. This occurs only under classic.

 <1>emp&y=yy&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(ppp) --> P1(y)]
===================================================================
# sp-7e.slk

infer_exact [P1]
P1(yy)
|- (exists y,q36: P1(q36) & y=q36 & y=yy).

infer_exact [P1]
P1(yy)
|- (exists y,q36: P1(q36) & y=q36 & q36=yy).

These two examples gave different results.
Presumably it is due to not using eq_map for
equality on the RHS?

Entail (1) : Valid. 
 <1>emp&{FLOW,(19,20)=__norm}[]
 inferred hprel: [emp --> P1(q36_41); P1(yy) --> emp]


Entail (2) : Valid. 
 <1>emp&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(yy) --> P1(yy)]
===================================================================
# sp-7e.slk: FIXED

Obtained below:
 <1>emp&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(q36_22) --> P1(q36_22); P1(yy) --> emp]

where P1(yy) is accounted twice!

@1!   residue before matching: : P1(yy)&{FLOW,(19,20)=__norm}[]
@1!   new_lhs: : P1(q36_22)
@1!   new_es_formula: : P1(yy)&{FLOW,(19,20)=__norm}[]

P1(q36_22) is from smart subs, while P1(yy) is the original LHS.
After the folding, why is P1(yy) still be kept?
===================================================================
# eq-1.slk: DONE
  - emap
  - common vars: lhs-rsh
# eq-2.slk: DONE
  - do_match and unfold after inference when miss node is a view/data
# eq-3.slk: DONE
  - eq args of an unknown pred: don't subst eq of args
#eq-4.slk: DONE
 -eq null
# eq-rft: DONE
  view + pure properties
===================================================================
# null.slk

HP_38(flted_17_37) --> emp&flted_17_37=0

should be
HP_38(flted_17_37) --> emp&flted_17_37=null
===================================================================
# eq-rft

//infer/infer5.slk({E4#Valid})
wrong result
===================================================================
#../demo/cyc-lseg.slk: FIXED

lemma with annotation vars

===================================================================
# split-2.slk
  - to add pred_split for known pred (DONE)
  -  to support views also


===================================================================
# ll.slk: DONE

 - support pure extension for pred (relDefn)

===================================================================
# zip-1b.slk DONE

 - support pure extension for pred (relDefn) for the second pointer

===================================================================
# zip-1a.slk: DONE

 - support pure extension for pred (relDefn) for 2 pointers

===================================================================
===================================================================
# zip-1c.slk:

 - pred_split zipNM

===================================================================
# zip-1.slk
  - add --> possible lemma if fail to split: DONE
  - pred-en-pure: do split with pure extension
  - (may) cause:OrR[ q=null |-  q!=null. LOCS:[0;10] (must-bug),valid]
          ===> (how to know which properties to extend?)


===================================================================
#zip-2b.slk: DONE (lemma_infer_pred)

 inferred hprel: [emp&self_lem_15=null --> H(self_lem_15); 
                  H(p_341) * self_lem_15::node<_,p_341>@M --> H(self_lem_15); 
                  H(q_338) * y::node<_,q_338>@M --> H(y)]

Can ll predicate be directly synthesized by lemma_infer?
===================================================================
# zip-2c.slk

relation R(int a, int b).

lemma_infer[R] self::zipNM<y> <- self::zipN<n> * y::zipN<m> & R(n,m).


Why error below?

 Temp Lemma(s) inferred as valid in current context.
Omega Error Exp:Globals.Illegal_Prover_Format("Omega.omega_of_exp: RelForm")
 Formula: exists(m_433:exists(n_432:R(n_432,m_433) & (((1<=n_432 & p_378>0) | 
(n_432=0 & p_378=0)))) & (((1<=m_433 & q_408>0) | (m_433=0 & q_408=0))))


lemma_infer[n,m] self::zipNM<y> <- self::zipN<n> * y::zipN<m> .
print residue.

why failure?

ntailing lemma lem_17: Fail. (may) cause:OrR[ y=null |-  y!=null. LOCS:[11;8] (must-bug),valid]

Failed to inferred for lem_17:<== ==> invalid lemma encountered.
===================================================================
# zip-2b1.slk: FIXED

How come below not normalized? This can be done at
either relational assumption or pred normalization.
Did we not have disjunctive unification?

[ H(self) ::= 
 self::node<_,p>@M * H(p)
 or self::node<_,q>@M * H(q)
 or emp&self=null
 ]

===================================================================
# zip-1e2.slk --en-pred-equiv: FIXED (lemma_infer_pred: print the final result instead of the inter. one)

How come --en-pred-equiv is not working here?
Is it because both P1 and P2 are post-pred?

[ P1(self_one2_81) ::=  [
  P1(p_73) * self_one2_81::node<_,p_73>@M
  or emp&self_one2_81=null
  ],
 P2(y_82) ::=  [
  P2(q_70) * y_82::node<_,q_70>@M
  or emp&y_82=null
  ]]
===================================================================
# zip-1e3v.slk

Can we infer [n,m] or must we derive pre-relation?
How to do this with fixpoint? greatest or least?

lemma_test  self::zip2<y>  <- self::zipN<n> * y::zipN<m> & n<=m .
// we need to allow residue here
// need --lem-en-residue
// need to infer weakest pre-relation
===================================================================
# zip-1e3v1.slk

More testing with sleek

// dynamically add option in sleek
add_option "--lem-en-residue".
lemma_test  self::zip2<y>  <- self::zipN<n> * y::zipN<m> & n<=m .
test_assert "Valid".
test_assert "Fail(may)".
test_assert "Fail(must)".
test_assert "x+y>4".
// on last command
//IF failure, print
// - last command
// - current answer
// - expected answer
===================================================================
# zip-1e-fix.slk: FIXED (but zip_paper_eq-2.ss has not been fixed because of wrong invs)

This requires gfp to be computed for pre-relation.

relAssume
   P3(n,m) -->  (n!=0 | m<1).

relAssume
   P3(n,m) -->  (m!=0 | n<1).

relAssume
   P3(n,m) & 1<=n 
     & 1<=m & m2=m-1 & n2=n-1
   -->  P3(n2,m2).

relation_infer [P3][].

We first form two things:

  check: P3(n,m) --> (n!=0 | m<1) & (m!=0 | n<1)
  recurrence: P3(n,m) & 1<=n & 1<=m & m2=m-1 & n2=n-1
              -->  P3(n2,m2).

Steps for computing pre-relations are
in topd-zip.fc and topd-zip.oc.

# fixcalc topd-zip.fc 

# form a recurrence betweem n,m and arbitrary rec calls pn,pm
wh:={[n,m]->[pn,pm]->[]:
  (exists (m2,n2:n>=1 && m>=1 && m2=m-1 && n2=n-1 && wh(n2,m2,pn,pm)))};
TD:=topdown(wh,1,SimHeur);
TD;

# derive top-down fix-point:
#(((RECn >= 0 
&& n >= 1 + RECn) 
&& RECn + m >= n) 
&& RECn + m = RECm + n)

# we also need to satisfy the CHECK initially & recursively
# P3(n,m) --> 
(n!=0 | m<1) 
& (m!=0 | n<1)

# oc topd-zip.oc

# Form a recursive check using top-down fixpoint
RecChecks := {[n,m]:forall(RECn,RECm: 
   not(RECn >= 0 
      & n >= 1 + RECn & RECn + m >= n & RECn + m = RECm + n
      ) 
    | ((RECn!=0 | RECm<1) & (RECm!=0 | RECn<1))
    )
  };

# Form initial check.
InitChecks := {[n,m]:(n!=0 | m<1) & (m!=0 | n<1)};

Pre:=RecChecks intersection InitChecks;
Inv := {[n,m]:n>=0 & m>=0};

# Form pre-condition given invariant
D:=gist Pre given Inv;
PairWiseCheck D;

===================================================================
# zp-1a.slk

infer [m,n] 
   x=0 & y!=0
   & (x=0 & n=0 | x!=0 & n>0)
   & (y=0 & m=0 | y!=0 & m>0)
 |-  false.

Below is incorrect. We are selectively inferring m,n.
However, x & y are also present!

 <1>hfalse&false&{FLOW,(21,22)=__norm}[]
 inferred pure: [((x=0 & n=0) | (x!=0 & 1<=n)); ((y=0 & m=0) | (y!=0 & 
                 1<=m))]

Through zp-1a.oc, we should obtain:
  m=0 & 0<=n | 1<=m & 1<=n

===================================================================
# zip-1e-fix.slk

Is below correct?

!!! fixpoint for pre-rels:( P3(n_38,m_39), forall(RECm_39:forall(RECn_38:(!((RECn_38>=0 & n_38>=(1+RECn_38) & (RECn_38+
m_39)>=n_38 & RECn_38+m_39=RECm_39+n_38)) | (((true | RECm_39<1)) & ((true | 
RECn_38<1)))))) & ((true | m_39<1)) & ((true | n_38<1)))Stop Omega... 8 invocations 

===================================================================
# zp-1b.slk (FIXED by Loc)

infer [m,n] x=0 & y!=0 & (x=0 & n=0) & (y!=0 & m>0)
 |-  false.
print residue.

infer [P] 
   x=0 & y!=0 & (x=0 & n=0) & (y!=0 & m>0) 
   & P(m,n)
 |-  false.
print residue.

Why does the above yield different results?
They should be the same. The second one
is good.

Entail (1) : Valid. 

 <1>hfalse&false&{FLOW,(21,22)=__norm}[]
 inferred pure: [n=0; 1<=m]
[[empty]]


Entail (2) : Valid. 

 <1>hfalse&false&{FLOW,(21,22)=__norm}[]
 inferred rel: [RELASS [P]: ( P(m,n)) -->  (n!=0 | 1>m)]

===================================================================
 ../../sleek zp-1b.slk -debug z-debug.log > 2
../../sleek zp-1c.slk -debug z-debug.log > 1
===================================================================
# zp-1a.slk (FIXED)

Why did we have such different answer
when null is replaced by 0?

infer [m,n] 
   x=0 & y!=0
   & (x=0 & n=0 | x!=0 & n>0)
   & (y=0 & m=0 | y!=0 & m>0)
 |-  false.
print residue.

infer [m,n] 
   x=null & y!=null
   & (x=null & n=0 | x!=null & n>0)
   & (y=null & m=0 | y!=null & m>0)
 |-  false.

<1>hfalse&false&{FLOW,(21,22)=__norm}[]
 inferred pure: [(n!=0 | m<=0)]
[

<1>hfalse&false&{FLOW,(21,22)=__norm}[]
 inferred pure: [(m<=-1 | n<=-1)]
[[empty]]
===================================================================
# zip_paper_eq-1.ss (FIXED)

# Need to use assert/assume to capture pure property more permanently

One pure relational assumption was lost...

Sleek log captured:
   es_infer_rel: [RELASS [P]: ( P(m,n)) -->  (n!=0 | 1>m)]
   es_infer_rel: [RELASS [P]: ( P(m,n)) -->  (m!=0 | 1>n)]

However, only the following were printed:

[RELDEFN P: ( P(m,n) & 1<=m & 1<=n & n_1027=n-1 & m_1028=m-1) -->  P(m_1028,n_1027),
RELASS [P]: ( P(m,n)) -->  (m!=0 | 1>n),
RELDEFN Q: ( n=0 & m=0 & k=0 & P(m,n)) -->  Q(m,n,k),
RELDEFN Q: ( n=0 & k=0 & 1<=m & P(m,n)) -->  Q(m,n,k),
RELDEFN Q: ( Q(m_1028,n_1027,k_1049) & 0<=k_1049 & n_1027=n-1 & m_1028=m-1 & k=k_1049+
1 & 1<=m & 1<=n & P(m,n)) -->  Q(m,n,k)]
===================================================================
# zip_paper_eq-1.ss --esl (FIXED)


id: 9 src:2; caller: []; line: 27; classic: false; kind: UNKNOWN; hec_num: 1; evars: []; infer_vars: []; c_heap: emp

Can we support ASSERT and ASSERT/ASSUME..

===================================================================
# zip-1e-fix.slk

not giving correct answer:

!!! fixpoint for post-rels:[]
!!! fixpoint for pre-rels:( P3(n_38,m_39), forall(RECm_39:forall(RECn_38:(!((RECn_38>=0 & n_38>=(1+RECn_38) & (RECn_38+
m_39)>=n_38 & RECn_38+m_39=RECm_39+n_38)) | (((true | RECm_39<1)) & ((true | RECn_38<1)))))) & ((true | m_39<1)) & ((true | n_38<1)))Stop Omega... 8 invocations 
S

However, zip_paper_eq-1.ss is working correctly.
Time to fix relation_infer!

Correctly inferred pre/post pure relation:

!!! pure pre: m=n & 0<=m
*************************************
*******fixcalc of pure relation *******
*************************************
[( Q(m,n,k), k=m & k=n & 0<=k, P(m,n), m=n)]
*************************************

!!!REL POST :  Q(m,n,k)
!!!POST:  k=m & k=n & 0<=k
!!!REL PRE :  P(m,n)
!!!PRE :  m=n

===================================================================
# zip_paper_eq-1.ss

Please provide an option --gsf that will output the
sleek file for inferred pure unknown relations.
===================================================================
#hip zip_paper_eq-2.ss -debug zd-bug.log

pre_rel_fixpoint
update_with_td_fp,Trace
# why not tracing when more than one lines?
===================================================================
#hip zip_paper_eq-2.ss -debug zd-bug.log: fIXED bug in tp.cnv_int_to_ptr

bug with pairwisecheck?
(see pw.oc)

K :=
pairwisecheck@11@10
pairwisecheck inp1 : forall(RECm:forall(RECn:(!((RECm>=0 & m>=(1+RECm) & (RECm+n)>=m & RECm+
n=RECn+m)) | (((RECn!=0 | 1>RECm)) & ((RECm!=0 | 1>RECn)))))) & ((n!=0 | 
1>m)) & ((m!=0 | 1>n))
pairwisecheck@11 EXIT: forall(RECm:forall(RECn:(!((RECm>=0 & m>=(1+RECm) & (RECm+n)>=m & RECm+
n=RECn+m)) | (((true | 1>RECm)) & ((true | 1>RECn)))))) & ((true | 1>m)) & 
((true | 1>n))


K :=
{[n,n]: n <= 0} union
 {[n,m]: n <= m-1, -1} union
 {[n,m]: m <= n-1, -1} union
 {[n,n]: 1 <= n}


PairWiseCheck K :=
{[n,m]: n <= m-1, -1} union
 {[n,m]: m <= n-1, -1} union
 {[n,n]}

===================================================================
#zip-1e-fix-2a.slk vs. zip-1e-fix-2b.slk

Why is fixcalc.compute_fixpoint sensitive with the order of input?

===================================================================
#hip zip_paper_eq-2.ss: FIXED

to extract proper invs from pre_fmls

!!!REL POST :  true
!!!POST:  true
!!!REL PRE :  P(m,n)
!!!PRE :  ((m<=(n-1) & m<=(0-1)) | (n<=(m-1) & n<=(0-1)) | m=n)

===================================================================
#zip-1e.slk:


inferred rel: [RELASS [P3]: ( P3(n_90,m_91)) -->  (n_90!=0 | 0>m_91);
                RELASS [P3]: ( P3(n_133,m_134)) -->  (m_134!=0 | 1>n_133);
                RELDEFN P3: ( P3(n_133,m_134) & 1<=n_133 & 1<=m_134 & n1_152=m_134-1 & n1_132=n_133-1) -->  P3(n1_132,n1_152)]


====>
[( true, true, P3(n_90,m_91), ((n_90<=(m_91-1) & n_90<=(0-1)) | (m_91<=n_90 & m_91<=(0-1))))]


===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
