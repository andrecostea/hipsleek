===================================================================
# sa/norm/split-1a.slk

HeapPred P2(node a).

lemma self::zip<y> -> P1(self) * P2(y).

/*

Why is there an exception/error?

Starting Omega...oc
P1 is defined.
P2 is defined.
Fatal error: exception Failure("get_node_var: invalid argument")

This must be in the lemma checking section?

*/
===================================================================
# split-1b.slk

infer [P1,P2] x::zip<y> |- P1(x).
print residue.

infer [P1,P2] P1(x)  |- x::zip<y>.
print residue.

/*

First entailment loses data.
Second entailment should not succeed,
as it seems to have gained data!
This is esp when y is instantiated
rather than a continuation.

Need to refine 2nd-order matching.

Entail (1) : Valid. 

 <1>emp&true&{FLOW,(19,20)=__norm}[]
 inferred hprel: [x::zip<y>@M[LHSCase]&true --> P1(x)&true]


Entail (2) : Valid. 

 <1>HP_43(y_42)&y=y_42&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(x)&true --> x::zip<y_42>@M[LHSCase] * HP_43(y_42)&true]

===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
