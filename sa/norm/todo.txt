===================================================================
# sa/norm/split-1a.slk

HeapPred P2(node a).

lemma self::zip<y> -> P1(self) * P2(y).

/*

Why is there an exception/error?

Starting Omega...oc
P1 is defined.
P2 is defined.
Fatal error: exception Failure("get_node_var: invalid argument")

This must be in the lemma checking section?

*/
===================================================================
# split-1b.slk

infer [P1,P2] x::zip<y> |- P1(x).
print residue.

infer [P1,P2] P1(x)  |- x::zip<y>.
print residue.

/*

First entailment loses data.
Second entailment should not succeed,
as it seems to have gained data!
This is esp when y is instantiated
rather than a continuation.

Need to refine 2nd-order matching.

Entail (1) : Valid. 

 <1>emp&true&{FLOW,(19,20)=__norm}[]
 inferred hprel: [x::zip<y>@M[LHSCase]&true --> P1(x)&true]


Entail (2) : Valid. 

 <1>HP_43(y_42)&y=y_42&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(x)&true --> x::zip<y_42>@M[LHSCase] * HP_43(y_42)&true]

===================================================================
# split-1e.slk

infer [G1,G2,P1] G1(a,b) |- P1(a).
print residue.

GOT
===
 <1>emp&true&{FLOW,(19,20)=__norm}[]
 inferred hprel: [G1(a,b)&true --> P1(a)&true]

EXPECT
=====
  G1(a,b) --> P1(a) * HP_n(b,a@NI)
===================================================================
# bug-classic-4a.slk

infer_exact
[P1] n::node<_,null> & self=null
|- P1(self).
print residue.

 <1>(exists flted_23_51: emp&flted_23_51=null & self=null&{FLOW,(19,20)=__norm})[]
 inferred hprel: [// Sleek_Entail(2)
n::node<Anon_14,flted_23_51>@M&flted_23_51=null & 
self=null --> P1(self)]

PROBLEM : why did we include an unrelated n::node<_,null>
 when folding with unknown predicate?
===================================================================
# sp-2a.slk & sp_2b.slk

Right-to-left lemmas not being scheduled!
===================================================================
# sp-2b.slk

# How come the print lemmas operation are scheduled
entirely after the two lemma_unsafe??

Updated store with unsafe repo.

Updated store with unsafe repo.
Left Lemmas:[Lemma "lem_14":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]==>]
Right Lemmas:[Lemma "lem_13":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]<==]

Left Lemmas:[Lemma "lem_14":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]==>]
Right Lemmas:[Lemma "lem_13":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]<==]
===================================================================
# sp-2d1.slk

infer [H2] self::node<_,p>*y::node<_,q>*H2(p)*H2(q)
 |- H2(self) * H2(y). 
print residue.

 <1>emp&{FLOW,(19,20)=__norm}[]
 inferred hprel:

[ self::node<Anon_11,p>@M * H2(p) --> H2(self) * HP_22(q); 
  y::node<Anon_12,q>@M * H2(q) * HP_22(q) --> H2(y)]

Why is there spurious HP_22?

===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
