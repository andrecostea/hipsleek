data node {
  int v;
  node next;
}.

/* 
I think we can introduce a class of template
relations of the following form:

where ?? denotes some constants that are to be
instantiated.
*/

relation RR0(a,b) == a=??*b+??.

infer [RR0] 
 x'::node<v_905,q_906>@M
 //&TermR[][r_ll_865] 
 &  s=v_905+s1_907 & 0<v_905 
 //& r_ll_865 = RR[1]( s) 
 //& r_ll_908 = RR[1]( s1_907) 
 & RR0(r_ll_865,s)  & RR0(r_ll_908,s1_907) 
 //& RR2(r_ll_865,r_ll_908) 
 //& RR4(r_ll_865,s,r_ll_908,s1_907) 
 & x=x' & x'!=null & !(v_bool_15_864') & x'!=null & !(v_bool_15_864') 
 & v_int_19_862'=1 & q_906=v_node_19_860' & s1_907=s_911 
 & r_ll_908=r_ll_912 
 |- r_ll_865>r_ll_912.
 print residue.

/*
Given the above, I suggest we infer:

  s1_907=s_911 
  & r_ll_908=r_ll_912 & s=v_905+s1_907 
  & 0<v_905 
  & RR0(r_ll_908,s1_907) 
  & RR0(r_ll_865,s) --> r_ll_865>r_ll_912.

I think you already has the machinery to obtain the
able. Based on the given template, this could then be
solved by LP to give:

  RR0(a,b) == a=1*b+0

I think this would allow us to use the relation's
infrastructure; though it would be solved by different
mechanisms.

*/

