# ex1b.c (FIXED)

C_INCLUDE_PATH=.. ../hip ex1b-simple-a.01-alloca.c -infer "@shape_prepost" 

Proving binding in method foo$int_star for spec  EAssume 
   emp&{FLOW,(4,5)=__norm#E}[]
   struct:EBase 
            emp&{FLOW,(4,5)=__norm#E}[], Line 5

( []) bind: node  x'::int_star<value_13_1633'>@M cannot be derived from conte

==========================================================================
# ex1a3.ss

It seems we need to use IMPLICIT instead EXIST here for
precondition; and maybe also postcondition.

We probably also need to schedule @post to infer
some relations..

 infer[@shape_post GP_1629]requires EXISTS(value_15_1628: y::int_star<value_15_1628>@M&
true&[]requires emp&MayLoop[]
 ensures GP_1629(y)&true{,(4,5)=__norm#E};

 es_gen_impl_vars(E): []]
!!! **solver.ml#3087:free var to_conseq:y
********************************************
******* shape relational assumptions *******
********************************************
[ // POST
(2;1;0)y::int_star<value_15_1634>@M&true --> GP_1629(y)&
true]
==========================================================================
# ex1a4.c (FIXED)

void loop (int* y)
/*@
  infer[@shape_prepost,@term]
  requires true
  ensures true;
*/
{
    while (*y > 0) 
  /*@
    infer[@shape_prepost,@term]
    requires true
    ensures true;
   */
   {
      *y = *y - 1;
    }
}

# Why do we have split components problem here..
 Why was post-shape scheduled so late?

Context of Verification Failure: _0:0_0:0

Last Proving Location: ex1a4-alloca-nested-while.c_14:4_22:5

ERROR: at _0:0_0:0
Message: split_components: don't expect OR

ExceptionFailure("split_components: don't expect OR")Occurred!

Error1(s) detected at main 
Stop z3... 113 invocations 
Stop Omega... 133 invocations caught

Exception occurred: Failure("split_components: don't expect OR")
Error3(s) detected at main 

==========================================================================
# ex1a3.c --trace-exc (QUICK-FIX)

Exception(look_up_view_def_raw):Not_found
Exception(sig_of_formula):Failure("**cfutil.ml#138:Found duplicate star nodes in [ x::int_star<value_14_1694>@M, HP_1713(x,y), y'::int_star<value_21_1723>@M]")
Exception(process_one_match):Failure("**cfutil.ml#138:Found duplicate star nodes in [ x::int_star<value_14_1694>@M, HP_1713(x,y), y'::int_star<value_21_1723>@M]")

==========================================================================
# ex1a3.c --trace-exc

Exception(get_proot_hp_def_raw):Failure("hp_root_pos has not yet set.")
Exception(C.get_root_args_hp):Failure("hp_root_pos has not yet set.")

# Why was dangling introduced below?

!!! **syn.ml#183:Merging is not performed due to the set of pre-hprels does not have disjoint conditions:
 
  [(1;1;0)unfold HP_1695(y,x) |#|  --> y::int_star<value_21_1712>@M * 
                                       HP_1713(x,y); 
   (1;1;0)unfold HP_1695(y,x) |#|  --> y::Dangling<>@M&y=x]
WARNING: _0:0_0:0:* between overlapping heaps: ( x::int_star<value_14_1694>@M, y::Dangling<>@M)

WARNING: _0:0_0:0:* between overlapping heaps: ( x::int_star<value_14_1694>@M, y::Dangling<>@M)

==========================================================================
# ex1a3.c --trace-exc -show-push-list ".*_hp_rel" ( FIXED by considering only rec type *)

(==solver.ml#11313==)
compute_actions@18
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: HP_1687(x,y)
compute_actions inp3 :LHS pure: x'=x & y'=y & v_bool_14_1583'
compute_actions inp4 :RHS cand:[ x'::int_star<value_14_1529'>@L]
compute_actions inp5 :RHS pure: true
compute_actions inp6 :right alias:[value_14_1529']
compute_actions@18 EXIT: SEARCH =>[
  Prio:2
  BaseCaseUnfold =>
    LHS: HP_1687(x,y)
    RHS: x'::int_star<value_14_1529'>@L;
  Prio:2
  InferUnfold =>
    LHS: HP_1687(x,y)
    RHS: x'::int_star<value_14_1529'>@L
  ]

# Why such a push? Where did HP_1695(y,x) came from? 
  base-case-fold for HP

push_list(es_infer_hp_rel):1[ (1;1;0)unknown HP_1695(y,x) |#|  --> emp&y=x]

!!! **inferHP.ml#267:args12:[]
!!! **inferHP.ml#281:niu_svl_ni_total:[(x,@NI)]
push_list(es_infer_hp_rel):1[ (1;1;0)unknown HP_1695(y,x) |#|  --> y::int_star<value_21_1712>@M]

(==solver.ml#13547==)
infer_collect_hp_rel#1@21@20
infer_collect_hp_rel#1 inp1 :lhs_node: HP_1695(y,x)
infer_collect_hp_rel#1 inp2 :rhs_node: y'::int_star<value_21_1707>@M
infer_collect_hp_rel#1 inp3 :lhs:
 HP_1695(y,x) * x::int_star<value_14_1694>@M&
v_bool_14_1536' & x'=x & y'=y & v_bool_14_1583' & 0<value_14_1694&
{FLOW,(4,5)=__norm#E}[]
infer_collect_hp_rel#1 inp4 :rhs: y'::int_star<value_21_1707>@M&{FLOW,(4,5)=__norm#E}[]
infer_collect_hp_rel#1 inp5 :es:
  HP_1695(y,x) * x::int_star<value_14_1694>@M&
v_bool_14_1536' & x'=x & y'=y & v_bool_14_1583' & 0<value_14_1694&
{FLOW,(4,5)=__norm#E}[]
 es_infer_hp_rel: [(1;0)unknown HP_1687(x,y) |#|  --> x::int_star<value_14_1694>@M * 
                                                      HP_1695(y,x)]
 es_evars: [value_21_1707]
 es_gen_impl_vars(E): []
 es_infer_obj: [@shape_pre]
 es_evars: [value_21_1707]
 es_cond_path: [1; 1; 0]
 es_var_measures 1: Some(MayLoop[]{})
 es_trace:  SEARCH ==>  InferUnfold  ==>  InferHeap
 es_infer_vars_hp_rel: [HP_1687; HP_1695]
infer_collect_hp_rel#1 inp6 :classic:false
infer_collect_hp_rel#1@21 EXIT:(true,2:  x::int_star<value_14_1694>@M&
v_bool_14_1536' & x'=x & y'=y & v_bool_14_1583' & 0<value_14_1694&
{FLOW,(4,5)=__norm#E}[]
 es_infer_hp_rel: [(1;1;0)unknown HP_1695(y,x) |#|  --> y::int_star<value_21_1712>@M; 
                   (1;0)unknown HP_1687(x,y) |#|  --> x::int_star<value_14_1694>@M * 
                                                      HP_1695(y,x)]
 es_evars: [value_21_1707]
 es_gen_impl_vars(E): []
 es_infer_obj: [@shape_pre]
 es_evars: [value_21_1707]
 es_cond_path: [1; 1; 0]
 es_var_measures 1: Some(MayLoop[]{})
 es_trace:  SEARCH ==>  InferUnfold  ==>  InferHeap
 es_infer_vars_hp_rel: [HP_1687; HP_1695],3:abd heap: y::int_star<value_21_1712>@M,4:None,5:None,6:new rest:None)
==========================================================================
# norm2/ex1a3.c --pcp 

# Why isn't char_star printed by --pcp

data __Exc {
;
}is_rec:false

data __Error {
;
}is_rec:false

data __MayError {
;
}is_rec:false

data __Fail {
;
}is_rec:false

data int_star {
  int value@;
}is_rec:false

**data_table** reset
**data_table** Add tag of:(__Exc,[])
**data_table** Add fields of:(__Exc,[])
**data_table** Add tag of:(__Error,[])
**data_table** Add fields of:(__Error,[])
**data_table** Add tag of:(__MayError,[])
**data_table** Add fields of:(__MayError,[])
**data_table** Add tag of:(__Fail,[])
**data_table** Add fields of:(__Fail,[])
**data_table** Add tag of:(Object,[])
**data_table** Add fields of:(Object,[])
**data_table** Add tag of:(String,[])
**data_table** Add fields of:(String,[])
**data_table** Add tag of:(char_star,[[],[]])
**data_table** Add fields of:(char_star,[(int,val),(char_star,next)])
**data_table** Add tag of:(int_ptr_ptr,[[]])
**data_table** Add fields of:(int_ptr_ptr,[(int_ptr,val)])
**data_table** Add tag of:(int_ptr,[[]])
**data_table** Add fields of:(int_ptr,[(int,val)])
**data_table** Add tag of:(lock,[])
**data_table** Add fields of:(lock,[])
**data_table** Add tag of:(barrier,[[]])
**data_table** Add fields of:(barrier,[(int,phase)])
**data_table** Add tag of:(thrd,[])
**data_table** Add fields of:(thrd,[])
**data_table** Add tag of:(__RET,[])
**data_table** Add fields of:(__RET,[])
**data_table** Add tag of:(__ArrBoundErr,[])
**data_table** Add fields of:(__ArrBoundErr,[])
**data_table** Add tag of:(__DivByZeroErr,[])
**data_table** Add fields of:(__DivByZeroErr,[])
**data_table** Add tag of:(int_star,[[]])
**data_table** Add fields of:(int_star,[(int,value)])

==========================================================================
# norm/ex4b4.slk

HeapPred HP(cell a,cell@NI b).
infer[HP,@classic] HP(x,y) |- x::cell<_>.
print residue.

 infer[HP,@classic] HP(x,y) |- x::cell<_>.

# Can this be improved?

(==solver.ml#11313==)
compute_actions@1
compute_actions inp1 :EQ ptr:[]
compute_actions inp2 :LHS heap: HP(x,y)
compute_actions inp3 :LHS pure: true
compute_actions inp4 :RHS cand:[ x::cell<Anon_11>@M]
compute_actions inp5 :RHS pure: true
compute_actions inp6 :right alias:[Anon_11]
compute_actions@1 EXIT: SEARCH =>[
  Prio:2
  BaseCaseUnfold =>
    LHS: HP(x,y)
    RHS: x::cell<Anon_11>@M;
  Prio:2
  InferUnfold =>
    LHS: HP(x,y)
    RHS: x::cell<Anon_11>@M
  ]

*/
==========================================================================
# ex1a3.c

[ // BIND
(1;0)HP_1687(x,y)&true --> x::int_star<value_14_1691>@M * HP_1692(y,x@NI)&
true,
 // PRE
(1;1;0)HP_1692(y,x@NI)&true --> y::int_star<value_21_1705>@M&
true,
 // PRE_REC
(1;1;0)y'::int_star<value_21_1711>@M * GP_1728(y',x'@NI)&
y'!=null --> HP_1687(x',y')&
true,
 // PRE_REC
(1;1;0)emp&y'!=null |#| x'::int_star<v_int_30_1727>@M&
true --> GP_1728(y',x'@NI)&
true]

!!! **syn.ml#671:other hprels of HP_1687: [(1;1;0)fold y'::int_star<value_21_1711>@M&y'!=null |#|  --> HP_1687(x',y')]
ExceptionFailure("**syn.ml#678:Cannot transform the hprels of HP_1687 into view declarations.")Occurred!

Error1(s) detected at main 
Stop z3... 110 invocations 
Stop Omega... 99 invocations caught

Exception occurred: Failure("**syn.ml#678:Cannot transform the hprels of HP_1687 into view declarations.")
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
==========================================================================
