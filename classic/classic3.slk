data cell {
    int val; 
}.

// do not allow residue heap 
checkentail x::cell<a> |- x::cell<n>.
print residue.
// valid with pure residue n=a & x!=null

// allow residue heap
checkentail x::cell<a> * y::cell<a> |- x::cell<n> * htrue .
print residue.
// valid with residue y::cell<a> & n=a

// do not allow residue heap
checkentail x::cell<a> * y::cell<a> |- x::cell<n> .
print residue.
// invalid since y::cell<a> is unconsumed.


checkentail x::cell<a> * htrue |- x::cell<n> * emp .
// invalid since htrue does not match emp


checkentail x::cell<a> * emp |- x::cell<n> * htrue .
// valid with emp residue

checkentail x::cell<a> * htrue |- x::cell<n> * htrue .
// valid with htrue residue

checkentail x::cell<a> * y::cell<b> * htrue |- x::cell<n> * htrue .
// valid with y::cell<b> * htrue residue


checkentail emp |- emp.
print residue.

checkentail emp |- htrue.
print residue.

checkentail htrue |- emp.
print residue.

checkentail htrue |- htrue.
print residue.

checkentail x::cell<_> |-  x::cell<_>.
print residue.

checkentail htrue |-  x::cell<_>.
print residue.

checkentail x::cell<_> |- htrue.
print residue.

checkentail emp & true |-  x::cell<_>.
print residue.

checkentail y::cell<_> |-  x::cell<_>.
print residue.

checkentail x::cell<_> * y::cell<_> & n>2 |-  y::cell<_> * x::cell<_> & n>0.
print residue.

checkentail x::cell<_> * y::cell<_> & n>2 |-  x::cell<_> & n>0.
print residue.

checkentail emp |- emp.              
print residue.

checkentail x::cell<_> |- htrue.          
print residue.

checkentail x::cell<_> |- emp.              
print residue.

checkentail emp |- x::cell<_>.              
print residue.

checkentail htrue * x::cell<_> |- htrue.  
print residue.

checkentail htrue |- x::cell<_>.          
print residue.

checkentail htrue |- emp.                 
print residue.

checkentail emp |- htrue.                 
print residue.

checkentail emp * x::cell<_> |- emp * x::cell<_>.   
print residue.                                       // residue should be emp

