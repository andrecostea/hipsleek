Problems:

1. Z3 is too weak to handle multiplicative arithmetic!

In particular, the application of division theorems i.e. automatic inference of constraints like x = y * z + t & 0 <= t <= |z| leads to y = x div z & t = x mod z.
Pattern matching for division and modulo. When? How?   
Why should Z3 fail in transitivity of divides?
The formula can simply be skolemized and the induced higher-order unification seems to be trivial if the system do the basic algebra.

2. Instantiation of quantification without explicit patterns.

Should we follow the method of Skolemization as described in literature? Though remove the existential quantification, this will introduce the difficult problem of higher-order unification.
What about non-constructive existential proofs? Or dependent constructive proof like in induction?
 
3. How to make use of the definitions and guide the solver?

What kind of things we want to store about a definition?
Should we make more primitives?
Should we have rewrite rules or proof tactics?

4. Programming aspect

5. Improvements