// extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/*
 * Implementation the Ackermann function.
 * http://en.wikipedia.org/wiki/Ackermann_function
 * 
 * Author: Matthias Heizmann
 * Date: 2013-07-13
 * 
 */

// extern int __VERIFIER_nondet_int(void);

/*
int ackermann(int m, int n) {
    if (m==0) {
        return n+1;
    }
    if (n==0) {
        return ackermann(m-1,1);
    }
    return ackermann(m-1,ackermann(m,n-1));
}
*/

pred ackermann_v<m,n,r,e> == m=0 & r=n+1 & e=1
     or _::ackermann_v<m-1,1,r1,e1> & m!=0 & n=0 & r=r1 & e=e1
     or _::ackermann_v<m,n-1,r1,e1> * _::ackermann_v<m-1,r1,r2,e2> & m!=0 & n!=0 & r=r2 & e1=0 & e=0
     or _::ackermann_v<m,n-1,r1,e1> * _::ackermann_v<m-1,r1,r2,e2> & m!=0 & n!=0 & r=r2 & e2=0 & e=0
     _::ackermann_v<m,n-1,r1,e1> * _::ackermann_v<m-1,r1,r2,e2> & m!=0 & n!=0 & r=r2 & e1=1 & e2=1 & e=1.

/*
int main() {
    int m = __VERIFIER_nondet_int();
    int n = __VERIFIER_nondet_int();
    int result = ackermann(m,n);
    if (m < 2 || result >= 4) {
        return 0;
    } else {
        ERROR: __VERIFIER_error();
    }
}
*/

pred main_v<m,n,r,e> ==
      _::ackermann_v<m,n,r1,e1> & m<2 & r=0 & e=e1
     or _::ackermann_v<m,n,r1,e1> & r1>=4 & r=0 & e=e1
     or _::ackermann_v<m,n,r1,e1> & m>=2 & r1<4 & e=0.


checksat _::main_v<m,n,r,e> & e=0.

expect Sat.