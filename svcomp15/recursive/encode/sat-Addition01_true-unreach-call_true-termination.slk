// extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/*
 * Recursive implementation integer addition.
 * 
 * Author: Matthias Heizmann
 * Date: 2013-07-13
 * 
 */

// extern int __VERIFIER_nondet_int(void);

/*
int addition(int m, int n) {
    if (n == 0) {
        return m;
    }
    if (n > 0) {
        return addition(m+1, n-1);
    }
    if (n < 0) {
        return addition(m-1, n+1);
    }
}
*/

pred addition_v<m,n,r,e> == n=0 & r=m & e=0
     or _::addition_v<m+1,n-1,r1,e1> & n>0 & r=r1 & e=e1
     or _::addition_v<m-1,n+1,r1,e1> & n<0 & r=r1 & e=e1.

/*
int main() {
    int m = __VERIFIER_nondet_int();
    if (m < 0 || m > 2147483647) { //  2^31 âˆ’ 1
        return 0;
    }
    int n = __VERIFIER_nondet_int();
    if (n < 0 || n > 2147483647) {
        return 0;
    }
    int result = addition(m,n);
    if (result == m + n) {
        return 0;
    } else {
        ERROR: __VERIFIER_error();
    }
}
*/

pred main_v<m,n,r,e> == m<0 & r=0 & e=0
     or m>2147483647 & r=0 & e=0
     or n<0 & r=0 & e=0
     or n>2147483647 & r=0 & e=0
     or _::addition_v<m,n,r1,e1> & m>=0 & m<=2147483647 & n>=0 & n<=2147483647 & r1=m+n & r=0 & e=e1
     or _::addition_v<m,n,r1,e1> & m>=0 & m<=2147483647 & n>=0 & n<=2147483647 & r1!=m+n & e=1.


checksat _::main_v<m,n,r,e> & e=1.

expect Unsat.