// extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/*
 * Recursive implementation of the greatest common denominator
 * using Euclid's algorithm
 * 
 * Author: Jan Leike
 * Date: 2013-07-17
 * 
 */

// extern int __VERIFIER_nondet_int(void);

/*
// Compute the greatest common denominator using Euclid's algorithm
int gcd(int y1, int y2) {
    if (y1 <= 0 || y2 <= 0) {
        return 0;
    }
    if (y1 == y2) {
        return y1;
    }
    if (y1 > y2) {
        return gcd(y1 - y2, y2);
    }
    return gcd(y1, y2 - y1);
}
*/

pred gcd_v<y1,y2,r,e> == y1<=0 & r=0 & e=0
     or y2<=0 & r=0 & e=0
     or y1=y2 & r=y1 & e=0
     or _::gcd_v<y1-y2,y2,r1,e1> & y1>y2 & r=r1 & e=e1
     or _::gcd_v<y1,y2-y1,r1,e1> & y2>=y1 & r=r1 & e=e1.

/*
int main() {
    int m = __VERIFIER_nondet_int();
    if (m <= 0 || m > 2147483647) {
        return 0;
    }
    int n = __VERIFIER_nondet_int();
    if (n <= 0 || n > 2147483647) {
        return 0;
    }
    int z = gcd(m, n);
    if (z < 1 && m > 0 && n > 0) {
        ERROR: __VERIFIER_error();
    } else {
        return 0;
    }
}
*/

pred main_v<m,n,r,e> == m<=0 & r=0 & e=0
     or m>2147483647 & r=0 & e=0
     or n<=0 & r=0 & e=0
     or n>2147483647 & r=0 & e=0
     or _::gcd_v<m,n,z,e1> & z<1 & m>0 & n>0 & e=1
     or _::gcd_v<m,n,z,e1> & z>=1 & e=e1
     or _::gcd_v<m,n,z,e1> & m<=0 & e=e1
     or _::gcd_v<m,n,z,e1> & n<=0 & e=e1.


checksat _::main<m,n,r,e> & e=1.

expect Unsat.