// extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/*
 * Recursive implementation multiplication by repeated addition
 * Check that this multiplication is commutative
 * 
 * Author: Jan Leike
 * Date: 2013-07-17
 * 
 */

// extern int __VERIFIER_nondet_int(void);

/*
// Multiplies two integers n and m
int mult(int n, int m) {
    if (m < 0) {
        return mult(n, -m);
    }
    if (m == 0) {
        return 0;
    }
    return n + mult(n, m - 1);
}
*/

pred mult_v<n,m,r,e> == _::mult_v<n,-m,r1,e1> & m<0 & r=r1 & e=e1
     or m=0 & r=0 & e=0
     or _::mult_v<n,m-1,r1,e1> & m>0 & r=n+r1 & e=e1.

/*
int main() {
    int m = __VERIFIER_nondet_int();
    if (m < 0 || m > 46340) {
        return 0;
    }
    int n = __VERIFIER_nondet_int();
    if (n < 0 || n > 46340) {
        return 0;
    }
    int res1 = mult(m, n);
    int res2 = mult(n, m);
    if (res1 != res2 && m > 0 && n > 0) {
        ERROR: __VERIFIER_error();
    } else {
        return 0;
    }
}
*/

pred main_v<m,n,r,e> == m<0 & r=0 & e=0
     or m>46340 & r=0 & e=0
     or n<0 & r=0 & e=0
     or n>46340 & r=0 & e=0
     or _::mult_v<m,n,r1,e1> * _::mult_v<n,m,r2,e2> & m>=0 & m<=46340 & n>=0 & n<=46340 & r1=r2 & r=0 & e1=0 & e2=0 & e=0
     or _::mult_v<m,n,r1,e1> * _::mult_v<n,m,r2,e2> & m>=0 & m<=46340 & n>=0 & n<=46340 & r1!=r2 & e=1.


checksat _::main_v<m,n,r,e> & e=1.

expect Unsat.