# nondet/ex1a-loop.ss
Adding true in post led to the following..

Termination checking result: 
(0) (ERR: unexpected unsound Loop at return)

There is no sleek checking here.
Can we convert this into a sleek proof!

I guess "false" & Loop are two different things..
==================================================================
# nondet/ex1.ss

# why is there an Loop{8:0} ??

Instead of false in post, can we have Loop as
its post-condition test?

  MayLoop |- Loop

  Loop    |- Loop

id: 6; caller: []; line: 16; classic: false; kind: PRE_REC; hec_num: 1; evars: []; infer_vars: [ ]; c_heap: emp
 checkentail i'::nondet{}<>&0<=i' & i_1436=i & 0<=i & 0<=i_1436 & v_bool_14_1402' & 
Loop[]&{FLOW,(4,5)=__norm#E}[]
 |-  emp&Loop{ 8:0}[]&{FLOW,(4,5)=__norm#E}[]. 
ho_vars: nothing?
res:  1[
   i'::nondet{}<>&0<=i' & i_1436=i & 0<=i & 0<=i_1436 & v_bool_14_1402'&{FLOW,(4,5)=__norm#E}[]
   ]

# why is Loop not present in LHS?
 
id: 7; caller: []; line: 0; classic: false; kind: POST; hec_num: 1; evars: []; infer_vars: [ ]; c_heap: emp
 checkentail i'::nondet{}<> * (htrue)&i'<0 & v_bool_14_1402' & 0<=i_1436 & 0<=i & 
i_1436=i&{FLOW,(4,5)=__norm#E}[]
 |-  hfalse&false&{FLOW,(4,5)=__norm#E}[]. 
==================================================================
# nondet/ex2.ss

void foo(int i) 
  case {
    i < 0 -> requires Term[] ensures true;
    i >=0 -> requires Loop ensures true;
  }
{ 
  if (i>=0) {
    foo(i-1);
  }
}

What are we really checking here?
Are we checking the reachability of Loop?
Can we convert it into an explicit sleek test
at the post-condition?

Termination checking result: 
(0) (ERR: unexpected unsound Loop at return)
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
