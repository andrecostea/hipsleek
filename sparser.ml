type token =
  | AND
  | ANDAND
  | ASSERT
  | ASSUME
  | AT
  | BIND
  | BOOL
  | BREAK
  | BY
  | CASE
  | CBRACE
  | CHECKENTAIL
  | CAPTURERESIDUE
  | CLASS
  | COERCION
  | COLON
  | COLONCOLON
  | COMMA
  | COMPOSE
  | CONSEQ
  | CONST
  | CONTINUE
  | CPAREN
  | CSQUARE
  | DATA
  | DDEBUG
  | DIFF
  | DISTR
  | DIV
  | DOLLAR
  | DOT
  | DOUBLEQUOTE
  | DERIVE
  | DYNAMIC
  | ELSE
  | ENSURES
  | ENUM
  | EOF
  | EQ
  | EQEQ
  | EQUIV
  | EXISTS
  | EXTENDS
  | FALSE
  | FLOAT
  | FORALL
  | GT
  | GTE
  | HASH
  | IDENTIFIER of (string)
  | IF
  | IMPLIES
  | IMPLY
  | IMPORT
  | IN
  | JAVA of (string)
  | LEFTARROW
  | LEMMA
  | LET
  | LITERAL_FLOAT of (float)
  | LITERAL_INTEGER of (int)
  | NOTIN
  | BAGMAX
  | BAGMIN
  | FOLD
  | INT
  | INTERR
  | INTERSECT
  | INV
  | LT
  | LTE
  | MAX
  | MINUS
  | MIN
  | NEQ
  | NEW
  | NOT
  | NULL
  | OBRACE
  | OFF
  | OPAREN
  | ON
  | OP_ADD_ASSIGN
  | OP_DEC
  | OP_DIV_ASSIGN
  | OP_INC
  | OP_MOD_ASSIGN
  | OP_MULT_ASSIGN
  | OP_SUB_ASSIGN
  | OR
  | OROR
  | ORWORD
  | OSQUARE
  | PERCENT
  | PLUS
  | PRED
  | PRIME
  | PRINT
  | REF
  | REQUIRES
  | RES of (string)
  | RETURN
  | RIGHTARROW
  | SELF of (string)
  | SEMICOLON
  | SPLIT
  | STAR
  | STATIC
  | SUBSET
  | THEN
  | THIS of (string)
  | TO
  | TRUE
  | VIEW
  | VOID
  | UNFOLD
  | UNION
  | WHERE
  | WHILE

open Parsing;;
# 2 "sparser.mly"
  (* Parser for a more expressive language *)

  open Globals
  open Iast
  open Sleekcommons

  module F = Iformula
  module P = Ipure

  type type_decl =
	| Data of data_decl
	| Enum of enum_decl
	| View of view_decl
		
  type decl = 
    | Type of type_decl
    | Proc of proc_decl
	| Coercion of coercion_decl
		
  type member = 
	| Field of (typed_ident * loc)
	| Inv of F.formula
	| Method of proc_decl
		
  type spec_qualifier =
	| Static
	| Dynamic 

  type ann =
	| AnnMode of mode
	| AnnType of typ
		
  let get_pos (i : int) = Parsing.rhs_start_pos i

  let rec get_mode (anns : ann list) : mode = match anns with
	| ann :: rest -> begin
		match ann with
		  | AnnMode m -> m
		  | _ -> get_mode rest
	  end
	| [] -> ModeOut (* default to ModeOut if there is no annotation. *)

  let rec get_modes (anns : ann list list) : mode list = 
	match anns with
	  | alist :: rest ->
		  let m_rest = get_modes rest in
		  let m = get_mode alist in
			m :: m_rest
	| [] -> []

	
  let expand_exp_list mk l r pos =
	let b, oe = l in
	  match oe with
		| Some e ->
			let tmp = P.build_relation mk e r pos in
			let res = P.mkAnd b tmp pos in
			  (res, Some r)
		| None -> report_error pos ("parse error in lhs of relational operator")

  let rec split_members mbrs = match mbrs with
	| mbr :: rest -> begin
		let fields, invs, meths = split_members rest in
		  match mbr with
			| Field f -> (f :: fields, invs, meths)
			| Inv i -> (fields, i :: invs, meths)
			| Method m ->
				(fields, invs, m :: meths)
	  end
	| [] -> ([], [], [])

  let rec split_specs specs = match specs with
	| sp :: rest -> begin
		let sspecs, dspecs = split_specs rest in
		  match sp with
			| (Static, pre, post) -> ((pre, post) :: sspecs, dspecs)
			| (Dynamic, pre, post) -> (sspecs, (pre, post) :: dspecs)
	  end
	| [] -> ([], [])

  let rec remove_spec_qualifier (_, pre, post) = (pre, post)
# 206 "sparser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* ANDAND *);
  259 (* ASSERT *);
  260 (* ASSUME *);
  261 (* AT *);
  262 (* BIND *);
  263 (* BOOL *);
  264 (* BREAK *);
  265 (* BY *);
  266 (* CASE *);
  267 (* CBRACE *);
  268 (* CHECKENTAIL *);
  269 (* CAPTURERESIDUE *);
  270 (* CLASS *);
  271 (* COERCION *);
  272 (* COLON *);
  273 (* COLONCOLON *);
  274 (* COMMA *);
  275 (* COMPOSE *);
  276 (* CONSEQ *);
  277 (* CONST *);
  278 (* CONTINUE *);
  279 (* CPAREN *);
  280 (* CSQUARE *);
  281 (* DATA *);
  282 (* DDEBUG *);
  283 (* DIFF *);
  284 (* DISTR *);
  285 (* DIV *);
  286 (* DOLLAR *);
  287 (* DOT *);
  288 (* DOUBLEQUOTE *);
  289 (* DERIVE *);
  290 (* DYNAMIC *);
  291 (* ELSE *);
  292 (* ENSURES *);
  293 (* ENUM *);
    0 (* EOF *);
  294 (* EQ *);
  295 (* EQEQ *);
  296 (* EQUIV *);
  297 (* EXISTS *);
  298 (* EXTENDS *);
  299 (* FALSE *);
  300 (* FLOAT *);
  301 (* FORALL *);
  302 (* GT *);
  303 (* GTE *);
  304 (* HASH *);
  306 (* IF *);
  307 (* IMPLIES *);
  308 (* IMPLY *);
  309 (* IMPORT *);
  310 (* IN *);
  312 (* LEFTARROW *);
  313 (* LEMMA *);
  314 (* LET *);
  317 (* NOTIN *);
  318 (* BAGMAX *);
  319 (* BAGMIN *);
  320 (* FOLD *);
  321 (* INT *);
  322 (* INTERR *);
  323 (* INTERSECT *);
  324 (* INV *);
  325 (* LT *);
  326 (* LTE *);
  327 (* MAX *);
  328 (* MINUS *);
  329 (* MIN *);
  330 (* NEQ *);
  331 (* NEW *);
  332 (* NOT *);
  333 (* NULL *);
  334 (* OBRACE *);
  335 (* OFF *);
  336 (* OPAREN *);
  337 (* ON *);
  338 (* OP_ADD_ASSIGN *);
  339 (* OP_DEC *);
  340 (* OP_DIV_ASSIGN *);
  341 (* OP_INC *);
  342 (* OP_MOD_ASSIGN *);
  343 (* OP_MULT_ASSIGN *);
  344 (* OP_SUB_ASSIGN *);
  345 (* OR *);
  346 (* OROR *);
  347 (* ORWORD *);
  348 (* OSQUARE *);
  349 (* PERCENT *);
  350 (* PLUS *);
  351 (* PRED *);
  352 (* PRIME *);
  353 (* PRINT *);
  354 (* REF *);
  355 (* REQUIRES *);
  357 (* RETURN *);
  358 (* RIGHTARROW *);
  360 (* SEMICOLON *);
  361 (* SPLIT *);
  362 (* STAR *);
  363 (* STATIC *);
  364 (* SUBSET *);
  365 (* THEN *);
  367 (* TO *);
  368 (* TRUE *);
  369 (* VIEW *);
  370 (* VOID *);
  371 (* UNFOLD *);
  372 (* UNION *);
  373 (* WHERE *);
  374 (* WHILE *);
    0|]

let yytransl_block = [|
  305 (* IDENTIFIER *);
  311 (* JAVA *);
  315 (* LITERAL_FLOAT *);
  316 (* LITERAL_INTEGER *);
  356 (* RES *);
  359 (* SELF *);
  366 (* THIS *);
    0|]

let yylhs = "\255\255\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\001\000\011\000\011\000\012\000\012\000\013\000\013\000\014\000\
\014\000\014\000\014\000\015\000\017\000\017\000\018\000\018\000\
\019\000\019\000\020\000\020\000\020\000\020\000\002\000\024\000\
\025\000\026\000\026\000\028\000\028\000\027\000\027\000\016\000\
\029\000\030\000\031\000\031\000\032\000\032\000\003\000\003\000\
\035\000\035\000\033\000\038\000\038\000\038\000\038\000\038\000\
\034\000\039\000\040\000\040\000\041\000\043\000\043\000\044\000\
\044\000\045\000\046\000\046\000\047\000\047\000\037\000\037\000\
\048\000\048\000\049\000\050\000\050\000\051\000\051\000\052\000\
\052\000\005\000\053\000\053\000\053\000\054\000\054\000\055\000\
\055\000\055\000\056\000\056\000\057\000\057\000\036\000\036\000\
\059\000\059\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\063\000\063\000\062\000\064\000\064\000\022\000\022\000\
\065\000\065\000\023\000\023\000\069\000\008\000\009\000\071\000\
\071\000\010\000\010\000\007\000\070\000\070\000\070\000\004\000\
\074\000\074\000\074\000\073\000\073\000\068\000\068\000\075\000\
\075\000\076\000\076\000\076\000\077\000\077\000\077\000\067\000\
\067\000\078\000\078\000\079\000\080\000\081\000\081\000\066\000\
\021\000\021\000\083\000\083\000\083\000\083\000\084\000\084\000\
\085\000\086\000\086\000\087\000\087\000\082\000\088\000\088\000\
\089\000\089\000\089\000\090\000\090\000\091\000\091\000\095\000\
\093\000\094\000\096\000\096\000\098\000\098\000\099\000\097\000\
\097\000\101\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\113\000\109\000\
\109\000\109\000\111\000\111\000\110\000\110\000\103\000\112\000\
\114\000\114\000\072\000\072\000\107\000\104\000\115\000\115\000\
\115\000\115\000\115\000\115\000\115\000\105\000\124\000\123\000\
\123\000\106\000\126\000\126\000\108\000\108\000\108\000\128\000\
\129\000\127\000\130\000\130\000\117\000\131\000\133\000\132\000\
\132\000\134\000\134\000\135\000\100\000\100\000\102\000\125\000\
\118\000\118\000\118\000\118\000\118\000\118\000\136\000\136\000\
\138\000\138\000\139\000\139\000\140\000\141\000\142\000\143\000\
\143\000\143\000\144\000\144\000\144\000\144\000\144\000\145\000\
\146\000\146\000\146\000\147\000\147\000\147\000\147\000\137\000\
\121\000\122\000\119\000\120\000\148\000\148\000\148\000\148\000\
\148\000\150\000\150\000\150\000\151\000\151\000\151\000\152\000\
\152\000\152\000\152\000\116\000\116\000\153\000\154\000\155\000\
\155\000\155\000\155\000\158\000\157\000\156\000\156\000\149\000\
\149\000\159\000\160\000\160\000\160\000\160\000\160\000\161\000\
\161\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\000\000\000\000\001\000\001\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\006\000\000\000\002\000\000\000\001\000\
\001\000\002\000\003\000\003\000\001\000\001\000\002\000\002\000\
\003\000\000\000\002\000\000\000\001\000\002\000\004\000\002\000\
\002\000\003\000\001\000\003\000\001\000\003\000\004\000\003\000\
\000\000\002\000\005\000\001\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\001\000\000\000\001\000\001\000\
\003\000\003\000\000\000\001\000\001\000\003\000\000\000\001\000\
\001\000\003\000\002\000\000\000\001\000\001\000\002\000\002\000\
\002\000\001\000\001\000\003\000\001\000\001\000\006\000\001\000\
\001\000\003\000\001\000\003\000\006\000\006\000\001\000\003\000\
\003\000\003\000\001\000\003\000\006\000\006\000\001\000\001\000\
\001\000\002\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\006\000\001\000\001\000\002\000\003\000\
\003\000\002\000\006\000\006\000\001\000\003\000\004\000\004\000\
\006\000\000\000\001\000\001\000\001\000\003\000\002\000\001\000\
\006\000\006\000\002\000\001\000\005\000\004\000\003\000\009\000\
\006\000\002\000\003\000\005\000\002\000\001\000\001\000\005\000\
\001\000\001\000\001\000\000\000\003\000\000\000\001\000\001\000\
\002\000\006\000\004\000\004\000\000\000\001\000\001\000\000\000\
\001\000\001\000\003\000\001\000\003\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\002\000\
\003\000\000\000\001\000\001\000\002\000\003\000\000\000\001\000\
\001\000\002\000\001\000\001\000\001\000\002\000\002\000\001\000\
\002\000\003\000\001\000\003\000\003\000\001\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\004\000\003\000\002\000\002\000\002\000\003\000\001\000\008\000\
\000\000\001\000\001\000\003\000\001\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\005\000\
\007\000\001\000\005\000\008\000\001\000\001\000\001\000\002\000\
\002\000\003\000\000\000\001\000\001\000\005\000\001\000\000\000\
\001\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\005\000\
\001\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\003\000\003\000\001\000\003\000\003\000\003\000\003\000\001\000\
\001\000\003\000\003\000\001\000\003\000\003\000\003\000\001\000\
\002\000\002\000\002\000\002\000\001\000\002\000\002\000\001\000\
\001\000\001\000\002\000\001\000\001\000\001\000\001\000\004\000\
\004\000\004\000\004\000\004\000\004\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\098\001\
\000\000\099\001\000\000\000\000\100\001\000\000\000\000\101\001\
\085\000\000\000\000\000\104\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\000\000\
\000\000\054\000\055\000\056\000\103\000\000\000\102\001\000\000\
\000\000\000\000\000\000\083\000\086\000\000\000\091\000\095\000\
\000\000\107\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\002\000\003\000\103\001\004\000\005\000\006\000\007\000\
\032\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\127\000\000\000\000\000\000\000\
\000\000\125\000\130\000\000\000\106\000\000\000\139\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\158\000\
\000\000\159\000\000\000\000\000\000\000\154\000\189\000\188\000\
\190\000\187\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\057\000\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\
\000\000\000\000\100\000\000\000\000\000\096\000\000\000\000\000\
\000\000\129\000\128\000\000\000\084\000\000\000\000\000\092\000\
\109\000\112\000\113\000\110\000\111\000\108\000\118\000\116\000\
\117\000\114\000\115\000\119\000\000\000\000\000\000\000\157\000\
\000\000\151\000\000\000\155\000\038\000\033\000\000\000\035\000\
\000\000\192\000\191\000\000\000\000\000\000\000\073\000\000\000\
\047\000\165\000\162\000\161\000\163\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\
\000\000\000\000\135\000\000\000\000\000\243\000\000\000\150\000\
\000\000\000\000\196\000\000\000\000\000\051\000\000\000\075\000\
\000\000\078\000\000\000\000\000\160\000\000\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\064\000\000\000\000\000\
\000\000\156\000\039\000\193\000\197\000\081\000\080\000\079\000\
\074\000\137\000\101\000\102\000\123\000\124\000\131\000\132\000\
\087\000\000\000\093\000\000\000\094\000\000\000\000\000\244\000\
\000\000\000\000\060\000\000\000\065\000\153\000\000\000\000\000\
\000\000\152\000"

let yydgoto = "\007\000\
\008\000\010\000\013\000\016\000\120\000\060\000\061\000\062\000\
\063\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\000\000\000\000\011\000\
\067\000\132\000\133\000\192\000\000\000\000\000\000\000\000\000\
\014\000\139\000\201\000\040\000\196\000\082\000\248\000\249\000\
\250\000\042\000\252\000\253\000\254\000\144\000\145\000\198\000\
\199\000\232\000\233\000\234\000\043\000\044\000\045\000\046\000\
\047\000\048\000\093\000\049\000\050\000\051\000\088\000\052\000\
\000\000\000\000\000\000\000\000\000\000\121\000\122\000\223\000\
\072\000\206\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\134\000\135\000\194\000\228\000\229\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yysindex = "\081\002\
\000\000\251\254\180\254\228\254\114\002\255\254\000\000\000\000\
\243\254\000\000\002\255\061\255\000\000\001\255\107\255\000\000\
\000\000\062\255\063\255\000\000\065\255\053\255\075\255\070\255\
\071\255\073\255\076\255\237\254\077\255\075\255\000\000\237\254\
\119\255\000\000\000\000\000\000\000\000\078\255\000\000\154\255\
\052\255\209\254\068\255\000\000\000\000\003\255\000\000\000\000\
\050\000\000\000\234\000\143\255\050\002\135\255\136\255\241\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\255\000\000\100\255\171\255\114\002\124\255\114\002\
\237\254\075\255\075\255\000\000\000\000\075\255\075\255\237\254\
\237\254\000\000\000\000\237\254\000\000\046\255\000\000\165\255\
\067\255\198\002\006\255\069\255\250\254\237\254\198\002\125\255\
\237\254\237\254\237\254\237\254\237\254\240\002\198\002\075\255\
\237\254\237\254\237\254\237\254\237\254\237\254\237\254\237\254\
\237\254\237\254\237\254\237\254\237\254\049\255\138\255\000\000\
\155\255\000\000\140\255\144\255\145\255\000\000\000\000\000\000\
\000\000\000\000\151\255\191\255\101\255\120\255\120\255\075\255\
\000\000\000\000\147\255\181\255\232\254\017\255\000\000\200\255\
\199\255\202\255\203\255\206\255\197\255\026\255\027\255\000\000\
\210\255\198\002\000\000\198\002\205\255\000\000\161\255\046\255\
\046\255\000\000\000\000\046\255\000\000\154\255\215\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\255\050\002\185\255\000\000\
\050\002\000\000\211\255\000\000\000\000\000\000\083\255\000\000\
\230\255\000\000\000\000\204\255\246\255\234\255\000\000\198\002\
\000\000\000\000\000\000\000\000\000\000\114\002\237\254\198\002\
\075\255\198\002\075\255\075\255\000\000\237\254\237\254\198\002\
\154\255\154\255\000\000\255\002\150\255\000\000\113\255\000\000\
\050\002\207\255\000\000\231\255\239\255\000\000\084\255\000\000\
\246\255\000\000\075\255\154\255\000\000\247\254\236\255\000\000\
\237\255\238\255\240\255\010\255\020\255\243\255\231\254\218\255\
\249\255\000\000\046\255\223\255\252\255\000\000\050\002\222\255\
\192\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\237\254\000\000\237\254\000\000\227\255\255\255\000\000\
\050\002\046\255\000\000\244\255\000\000\000\000\173\255\050\002\
\002\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\028\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\156\002\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\184\000\247\255\203\000\000\000\000\000\119\000\000\000\000\000\
\026\000\000\000\000\000\058\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\227\000\000\000\000\000\
\019\000\000\000\000\000\125\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\250\255\140\255\004\000\
\000\000\000\000\042\001\000\000\000\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\108\001\
\162\001\000\000\000\000\188\001\000\000\144\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
\027\000\000\000\000\000\000\000\000\255\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\255\019\255\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
\004\255\000\000\000\000\064\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\248\254\000\000\
\032\000\000\000\009\255\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\089\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\062\001\066\001\068\001\251\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\141\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\228\255\000\000\254\255\000\000\000\000\
\060\000\188\002\000\000\000\000\061\000\241\255\000\000\000\000\
\106\000\000\000\000\000\109\000\000\000\241\000\133\000\000\000\
\250\000\163\255\000\000\000\000\000\000\131\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\080\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\221\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yytablesize = 1139
let yytable = "\039\000\
\052\000\158\000\041\000\103\000\091\000\221\000\095\000\018\000\
\224\000\052\000\053\000\054\000\018\001\010\001\125\000\203\000\
\155\000\076\000\012\000\009\000\077\000\077\000\089\000\009\000\
\099\000\099\000\061\000\085\000\015\000\022\000\092\000\204\000\
\015\001\126\000\207\000\065\000\097\000\052\000\069\000\070\000\
\023\000\098\000\016\001\214\000\215\000\076\000\100\000\026\000\
\002\001\077\000\041\000\027\000\028\000\029\000\061\000\015\000\
\055\000\031\000\032\000\146\000\101\000\091\000\099\000\052\000\
\138\000\126\000\141\000\041\000\096\000\041\000\076\000\143\000\
\143\000\153\000\166\000\147\000\148\000\205\000\023\001\066\000\
\034\000\099\000\156\000\035\000\100\000\052\000\143\000\092\000\
\099\000\127\000\036\000\099\000\092\000\012\000\154\000\056\000\
\038\000\099\000\099\000\041\000\092\000\167\000\097\000\100\000\
\031\001\097\000\066\000\098\000\104\000\068\000\100\000\033\001\
\098\000\100\000\239\000\022\000\241\000\099\000\088\000\100\000\
\100\000\149\000\097\000\022\000\105\000\217\000\128\000\218\000\
\182\000\098\000\000\001\129\000\006\001\197\000\066\000\157\000\
\001\001\007\001\071\000\100\000\183\000\073\000\074\000\090\000\
\075\000\018\000\074\000\130\000\076\000\078\000\079\000\092\000\
\080\000\092\000\095\000\081\000\084\000\094\000\102\000\089\000\
\117\000\020\000\087\000\021\000\123\000\124\000\034\000\022\000\
\136\000\035\000\137\000\236\000\140\000\159\000\034\000\152\000\
\036\000\035\000\023\000\041\000\024\000\025\000\041\000\105\000\
\036\000\026\000\184\000\185\000\186\000\027\000\028\000\029\000\
\187\000\188\000\030\000\031\000\032\000\092\000\090\000\189\000\
\237\000\190\000\082\000\041\000\191\000\092\000\240\000\092\000\
\242\000\243\000\087\000\193\000\202\000\041\000\200\000\208\000\
\209\000\210\000\034\000\213\000\211\000\035\000\041\000\212\000\
\087\000\216\000\141\000\219\000\036\000\220\000\037\000\096\000\
\197\000\222\000\038\000\169\000\170\000\171\000\172\000\173\000\
\174\000\175\000\176\000\177\000\178\000\179\000\180\000\227\000\
\225\000\230\000\231\000\235\000\041\000\255\000\004\001\003\001\
\005\001\052\000\011\001\012\001\013\001\052\000\014\001\019\001\
\141\000\017\001\020\001\052\000\021\001\022\001\024\001\025\001\
\052\000\052\000\052\000\028\001\032\001\030\001\041\000\052\000\
\034\001\018\001\099\000\008\000\141\000\041\000\138\000\142\000\
\034\000\052\000\067\000\138\000\141\000\141\000\052\000\036\000\
\052\000\049\000\185\000\068\000\037\000\089\000\052\000\052\000\
\099\000\071\000\194\000\072\000\062\000\195\000\052\000\089\000\
\052\000\140\000\099\000\141\000\141\000\052\000\089\000\050\000\
\141\000\099\000\126\000\057\000\052\000\052\000\052\000\058\000\
\052\000\059\000\052\000\226\000\126\000\058\000\089\000\027\001\
\063\000\099\000\029\001\126\000\009\001\008\001\165\000\105\000\
\126\000\052\000\089\000\052\000\246\000\099\000\052\000\106\000\
\107\000\168\000\126\000\195\000\000\000\000\000\052\000\126\000\
\052\000\126\000\000\000\120\000\052\000\000\000\000\000\126\000\
\126\000\089\000\099\000\000\000\099\000\000\000\108\000\109\000\
\000\000\126\000\000\000\110\000\089\000\105\000\089\000\099\000\
\000\000\099\000\000\000\000\000\000\000\126\000\126\000\126\000\
\000\000\126\000\000\000\126\000\000\000\088\000\125\000\000\000\
\000\000\000\000\000\000\105\000\000\000\000\000\000\000\088\000\
\000\000\000\000\126\000\000\000\126\000\105\000\088\000\126\000\
\000\000\121\000\125\000\000\000\105\000\000\000\090\000\126\000\
\000\000\126\000\125\000\125\000\000\000\126\000\088\000\000\000\
\090\000\000\000\000\000\000\000\105\000\000\000\000\000\090\000\
\105\000\000\000\088\000\122\000\000\000\000\000\000\000\000\000\
\105\000\125\000\125\000\000\000\125\000\000\000\125\000\090\000\
\000\000\125\000\000\000\000\000\000\000\000\000\105\000\000\000\
\000\000\088\000\000\000\090\000\000\000\105\000\000\000\105\000\
\105\000\000\000\125\000\000\000\088\000\125\000\088\000\105\000\
\000\000\082\000\105\000\141\000\105\000\125\000\125\000\000\000\
\125\000\000\000\090\000\082\000\000\000\141\000\000\000\105\000\
\000\000\000\000\082\000\000\000\141\000\090\000\000\000\090\000\
\000\000\141\000\000\000\105\000\125\000\125\000\000\000\125\000\
\000\000\125\000\082\000\141\000\000\000\000\000\000\000\000\000\
\141\000\000\000\141\000\000\000\000\000\000\000\082\000\111\000\
\141\000\141\000\105\000\000\000\000\000\125\000\000\000\112\000\
\113\000\000\000\141\000\000\000\000\000\105\000\000\000\105\000\
\142\000\000\000\000\000\125\000\000\000\000\000\141\000\141\000\
\141\000\000\000\142\000\000\000\141\000\000\000\114\000\115\000\
\082\000\142\000\082\000\116\000\000\000\000\000\142\000\000\000\
\000\000\000\000\140\000\141\000\000\000\141\000\000\000\000\000\
\142\000\000\000\000\000\000\000\140\000\142\000\000\000\142\000\
\141\000\000\000\141\000\000\000\000\000\142\000\142\000\000\000\
\140\000\001\000\002\000\003\000\004\000\005\000\006\000\142\000\
\000\000\000\000\140\000\000\000\000\000\000\000\000\000\140\000\
\000\000\140\000\000\000\142\000\142\000\142\000\000\000\140\000\
\140\000\142\000\000\000\000\000\120\000\000\000\000\000\000\000\
\000\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\
\142\000\000\000\142\000\000\000\000\000\140\000\140\000\140\000\
\000\000\000\000\120\000\140\000\000\000\142\000\000\000\142\000\
\000\000\000\000\000\000\000\000\120\000\000\000\000\000\000\000\
\000\000\120\000\140\000\120\000\140\000\000\000\000\000\000\000\
\000\000\120\000\120\000\000\000\000\000\000\000\000\000\140\000\
\000\000\140\000\121\000\120\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\120\000\
\120\000\120\000\000\000\000\000\000\000\120\000\000\000\000\000\
\121\000\000\000\000\000\000\000\122\000\000\000\000\000\000\000\
\000\000\000\000\121\000\000\000\120\000\000\000\120\000\121\000\
\000\000\121\000\000\000\000\000\000\000\000\000\000\000\121\000\
\121\000\120\000\122\000\120\000\000\000\000\000\000\000\083\000\
\000\000\121\000\000\000\086\000\122\000\000\000\000\000\000\000\
\000\000\122\000\000\000\122\000\000\000\121\000\121\000\121\000\
\000\000\122\000\122\000\121\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\122\000\000\000\000\000\000\000\000\000\
\000\000\000\000\121\000\000\000\121\000\000\000\000\000\122\000\
\122\000\122\000\000\000\000\000\142\000\122\000\000\000\121\000\
\000\000\121\000\000\000\086\000\150\000\000\000\000\000\151\000\
\000\000\000\000\000\000\000\000\122\000\000\000\122\000\000\000\
\000\000\086\000\000\000\000\000\160\000\161\000\162\000\163\000\
\164\000\122\000\000\000\122\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\181\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\118\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\119\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\020\000\000\000\021\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\024\000\
\025\000\017\000\000\000\000\000\026\000\000\000\000\000\000\000\
\027\000\028\000\029\000\000\000\000\000\030\000\031\000\032\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\238\000\000\000\018\000\000\000\000\000\000\000\
\000\000\244\000\245\000\000\000\000\000\034\000\000\000\251\000\
\035\000\000\000\019\000\164\000\020\000\000\000\021\000\036\000\
\000\000\037\000\022\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\024\000\
\025\000\000\000\000\000\000\000\026\000\000\000\164\000\000\000\
\027\000\028\000\029\000\000\000\000\000\030\000\031\000\032\000\
\000\000\033\000\000\000\000\000\164\000\000\000\164\000\000\000\
\164\000\000\000\000\000\000\000\164\000\026\001\000\000\251\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\164\000\
\035\000\164\000\164\000\000\000\000\000\000\000\164\000\036\000\
\018\000\037\000\164\000\164\000\164\000\038\000\000\000\164\000\
\164\000\164\000\000\000\164\000\000\000\000\000\019\000\000\000\
\020\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\000\
\000\000\023\000\164\000\024\000\025\000\000\000\000\000\000\000\
\026\000\164\000\018\000\164\000\027\000\028\000\029\000\164\000\
\000\000\030\000\031\000\032\000\000\000\090\000\000\000\000\000\
\019\000\018\000\020\000\000\000\021\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\000\000\023\000\035\000\024\000\025\000\247\000\
\000\000\000\000\026\000\036\000\000\000\037\000\027\000\028\000\
\029\000\038\000\023\000\030\000\031\000\032\000\000\000\033\000\
\000\000\026\000\000\000\000\000\000\000\027\000\028\000\029\000\
\000\000\000\000\000\000\031\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\037\000\
\000\000\000\000\034\000\038\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\038\000"

let yycheck = "\005\000\
\000\000\095\000\005\000\001\001\033\000\182\000\001\001\027\001\
\185\000\018\001\012\001\013\001\038\001\023\001\030\001\040\001\
\023\001\018\001\095\001\025\001\023\000\018\001\000\000\025\001\
\072\001\000\000\018\001\030\000\057\001\049\001\033\000\056\001\
\023\001\049\001\018\001\049\001\023\001\046\001\038\001\039\001\
\060\001\023\001\023\001\018\001\018\001\046\001\094\001\067\001\
\225\000\046\001\053\000\071\001\072\001\073\001\046\001\057\001\
\058\001\077\001\078\001\075\000\108\001\090\000\072\001\072\001\
\070\000\000\000\072\000\070\000\017\001\072\000\096\001\074\000\
\075\000\089\000\103\000\078\000\079\000\102\001\255\000\078\001\
\100\001\072\001\089\001\103\001\094\001\094\001\089\000\090\000\
\072\001\007\001\110\001\072\001\095\000\095\001\089\001\097\001\
\116\001\072\001\072\001\102\000\103\000\104\000\089\001\094\001\
\025\001\054\001\018\001\089\001\106\001\049\001\094\001\032\001\
\061\001\094\001\208\000\049\001\210\000\072\001\000\000\094\001\
\094\001\080\000\054\001\049\001\000\000\154\000\044\001\156\000\
\080\001\061\001\018\001\049\001\049\001\136\000\046\001\094\000\
\024\001\054\001\032\001\094\001\092\001\080\001\080\001\000\000\
\080\001\027\001\080\001\065\001\096\001\080\001\080\001\154\000\
\080\001\156\000\001\001\080\001\080\001\080\001\091\001\041\001\
\018\001\043\001\032\000\045\001\030\001\030\001\100\001\049\001\
\069\001\103\001\000\001\200\000\049\001\049\001\100\001\011\001\
\110\001\103\001\060\001\182\000\062\001\063\001\185\000\000\000\
\110\001\067\001\049\001\033\001\049\001\071\001\072\001\073\001\
\049\001\049\001\076\001\077\001\078\001\200\000\080\001\049\001\
\206\000\011\001\000\000\206\000\104\001\208\000\209\000\210\000\
\211\000\212\000\080\000\092\001\032\001\216\000\068\001\016\001\
\018\001\016\001\100\001\023\001\018\001\103\001\225\000\018\001\
\094\000\016\001\000\000\023\001\110\001\069\001\112\001\017\001\
\235\000\049\001\116\001\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\018\001\
\038\001\046\001\005\001\018\001\255\000\104\001\024\001\049\001\
\018\001\001\001\023\001\023\001\023\001\005\001\023\001\046\001\
\018\001\023\001\018\001\011\001\046\001\018\001\049\001\080\001\
\016\001\017\001\018\001\049\001\104\001\023\001\025\001\023\001\
\023\001\038\001\001\001\000\000\038\001\032\001\011\001\000\000\
\011\001\033\001\016\001\023\001\046\001\047\001\038\001\011\001\
\040\001\000\000\049\001\016\001\011\001\023\001\046\001\047\001\
\023\001\046\001\024\001\046\001\046\001\024\001\054\001\033\001\
\056\001\000\000\033\001\069\001\070\001\061\001\040\001\000\000\
\074\001\040\001\001\001\006\000\068\001\069\001\070\001\006\000\
\072\001\006\000\074\001\191\000\011\001\046\001\056\001\020\001\
\046\001\056\001\022\001\018\001\235\000\233\000\102\000\038\001\
\023\001\089\001\068\001\091\001\216\000\068\001\094\001\046\001\
\047\001\104\000\033\001\135\000\255\255\255\255\102\001\038\001\
\104\001\040\001\255\255\000\000\108\001\255\255\255\255\046\001\
\047\001\091\001\089\001\255\255\091\001\255\255\069\001\070\001\
\255\255\056\001\255\255\074\001\102\001\001\001\104\001\102\001\
\255\255\104\001\255\255\255\255\255\255\068\001\069\001\070\001\
\255\255\072\001\255\255\074\001\255\255\023\001\018\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\033\001\
\255\255\255\255\089\001\255\255\091\001\033\001\040\001\094\001\
\255\255\000\000\038\001\255\255\040\001\255\255\023\001\102\001\
\255\255\104\001\046\001\047\001\255\255\108\001\056\001\255\255\
\033\001\255\255\255\255\255\255\056\001\255\255\255\255\040\001\
\001\001\255\255\068\001\000\000\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\255\255\072\001\255\255\074\001\056\001\
\255\255\018\001\255\255\255\255\255\255\255\255\023\001\255\255\
\255\255\091\001\255\255\068\001\255\255\089\001\255\255\091\001\
\033\001\255\255\094\001\255\255\102\001\038\001\104\001\040\001\
\255\255\023\001\102\001\001\001\104\001\046\001\047\001\255\255\
\108\001\255\255\091\001\033\001\255\255\011\001\255\255\056\001\
\255\255\255\255\040\001\255\255\018\001\102\001\255\255\104\001\
\255\255\023\001\255\255\068\001\069\001\070\001\255\255\072\001\
\255\255\074\001\056\001\033\001\255\255\255\255\255\255\255\255\
\038\001\255\255\040\001\255\255\255\255\255\255\068\001\038\001\
\046\001\047\001\091\001\255\255\255\255\094\001\255\255\046\001\
\047\001\255\255\056\001\255\255\255\255\102\001\255\255\104\001\
\001\001\255\255\255\255\108\001\255\255\255\255\068\001\069\001\
\070\001\255\255\011\001\255\255\074\001\255\255\069\001\070\001\
\102\001\018\001\104\001\074\001\255\255\255\255\023\001\255\255\
\255\255\255\255\001\001\089\001\255\255\091\001\255\255\255\255\
\033\001\255\255\255\255\255\255\011\001\038\001\255\255\040\001\
\102\001\255\255\104\001\255\255\255\255\046\001\047\001\255\255\
\023\001\001\000\002\000\003\000\004\000\005\000\006\000\056\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\038\001\
\255\255\040\001\255\255\068\001\069\001\070\001\255\255\046\001\
\047\001\074\001\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\056\001\255\255\255\255\255\255\255\255\255\255\255\255\
\089\001\255\255\091\001\255\255\255\255\068\001\069\001\070\001\
\255\255\255\255\023\001\074\001\255\255\102\001\255\255\104\001\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\255\255\038\001\089\001\040\001\091\001\255\255\255\255\255\255\
\255\255\046\001\047\001\255\255\255\255\255\255\255\255\102\001\
\255\255\104\001\001\001\056\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\068\001\
\069\001\070\001\255\255\255\255\255\255\074\001\255\255\255\255\
\023\001\255\255\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\089\001\255\255\091\001\038\001\
\255\255\040\001\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\102\001\023\001\104\001\255\255\255\255\255\255\028\000\
\255\255\056\001\255\255\032\000\033\001\255\255\255\255\255\255\
\255\255\038\001\255\255\040\001\255\255\068\001\069\001\070\001\
\255\255\046\001\047\001\074\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\056\001\255\255\255\255\255\255\255\255\
\255\255\255\255\089\001\255\255\091\001\255\255\255\255\068\001\
\069\001\070\001\255\255\255\255\073\000\074\001\255\255\102\001\
\255\255\104\001\255\255\080\000\081\000\255\255\255\255\084\000\
\255\255\255\255\255\255\255\255\089\001\255\255\091\001\255\255\
\255\255\094\000\255\255\255\255\097\000\098\000\099\000\100\000\
\101\000\102\001\255\255\104\001\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\255\255\255\255\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\255\255\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\062\001\
\063\001\000\001\255\255\255\255\067\001\255\255\255\255\255\255\
\071\001\072\001\073\001\255\255\255\255\076\001\077\001\078\001\
\255\255\080\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\207\000\255\255\027\001\255\255\255\255\255\255\
\255\255\214\000\215\000\255\255\255\255\100\001\255\255\220\000\
\103\001\255\255\041\001\000\001\043\001\255\255\045\001\110\001\
\255\255\112\001\049\001\255\255\255\255\116\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\255\255\027\001\255\255\
\071\001\072\001\073\001\255\255\255\255\076\001\077\001\078\001\
\255\255\080\001\255\255\255\255\041\001\255\255\043\001\255\255\
\045\001\255\255\255\255\255\255\049\001\018\001\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\100\001\255\255\060\001\
\103\001\062\001\063\001\255\255\255\255\255\255\067\001\110\001\
\027\001\112\001\071\001\072\001\073\001\116\001\255\255\076\001\
\077\001\078\001\255\255\080\001\255\255\255\255\041\001\255\255\
\043\001\255\255\045\001\255\255\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\100\001\
\255\255\060\001\103\001\062\001\063\001\255\255\255\255\255\255\
\067\001\110\001\027\001\112\001\071\001\072\001\073\001\116\001\
\255\255\076\001\077\001\078\001\255\255\080\001\255\255\255\255\
\041\001\027\001\043\001\255\255\045\001\255\255\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\100\001\255\255\060\001\103\001\062\001\063\001\049\001\
\255\255\255\255\067\001\110\001\255\255\112\001\071\001\072\001\
\073\001\116\001\060\001\076\001\077\001\078\001\255\255\080\001\
\255\255\067\001\255\255\255\255\255\255\071\001\072\001\073\001\
\255\255\255\255\255\255\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\100\001\255\255\255\255\103\001\255\255\
\255\255\255\255\255\255\255\255\255\255\110\001\255\255\112\001\
\255\255\255\255\100\001\116\001\255\255\103\001\255\255\255\255\
\255\255\255\255\255\255\255\255\110\001\255\255\255\255\255\255\
\255\255\255\255\116\001"

let yynames_const = "\
  AND\000\
  ANDAND\000\
  ASSERT\000\
  ASSUME\000\
  AT\000\
  BIND\000\
  BOOL\000\
  BREAK\000\
  BY\000\
  CASE\000\
  CBRACE\000\
  CHECKENTAIL\000\
  CAPTURERESIDUE\000\
  CLASS\000\
  COERCION\000\
  COLON\000\
  COLONCOLON\000\
  COMMA\000\
  COMPOSE\000\
  CONSEQ\000\
  CONST\000\
  CONTINUE\000\
  CPAREN\000\
  CSQUARE\000\
  DATA\000\
  DDEBUG\000\
  DIFF\000\
  DISTR\000\
  DIV\000\
  DOLLAR\000\
  DOT\000\
  DOUBLEQUOTE\000\
  DERIVE\000\
  DYNAMIC\000\
  ELSE\000\
  ENSURES\000\
  ENUM\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EQUIV\000\
  EXISTS\000\
  EXTENDS\000\
  FALSE\000\
  FLOAT\000\
  FORALL\000\
  GT\000\
  GTE\000\
  HASH\000\
  IF\000\
  IMPLIES\000\
  IMPLY\000\
  IMPORT\000\
  IN\000\
  LEFTARROW\000\
  LEMMA\000\
  LET\000\
  NOTIN\000\
  BAGMAX\000\
  BAGMIN\000\
  FOLD\000\
  INT\000\
  INTERR\000\
  INTERSECT\000\
  INV\000\
  LT\000\
  LTE\000\
  MAX\000\
  MINUS\000\
  MIN\000\
  NEQ\000\
  NEW\000\
  NOT\000\
  NULL\000\
  OBRACE\000\
  OFF\000\
  OPAREN\000\
  ON\000\
  OP_ADD_ASSIGN\000\
  OP_DEC\000\
  OP_DIV_ASSIGN\000\
  OP_INC\000\
  OP_MOD_ASSIGN\000\
  OP_MULT_ASSIGN\000\
  OP_SUB_ASSIGN\000\
  OR\000\
  OROR\000\
  ORWORD\000\
  OSQUARE\000\
  PERCENT\000\
  PLUS\000\
  PRED\000\
  PRIME\000\
  PRINT\000\
  REF\000\
  REQUIRES\000\
  RETURN\000\
  RIGHTARROW\000\
  SEMICOLON\000\
  SPLIT\000\
  STAR\000\
  STATIC\000\
  SUBSET\000\
  THEN\000\
  TO\000\
  TRUE\000\
  VIEW\000\
  VOID\000\
  UNFOLD\000\
  UNION\000\
  WHERE\000\
  WHILE\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  JAVA\000\
  LITERAL_FLOAT\000\
  LITERAL_INTEGER\000\
  RES\000\
  SELF\000\
  THIS\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : data_decl) in
    Obj.repr(
# 233 "sparser.mly"
              (
	DataDef _1
  )
# 1014 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : view_decl) in
    Obj.repr(
# 236 "sparser.mly"
              (
	  PredDef _1
	)
# 1023 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : coercion_decl) in
    Obj.repr(
# 239 "sparser.mly"
                  (
	  LemmaDef _1
	)
# 1032 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_decl) in
    Obj.repr(
# 242 "sparser.mly"
             (
	  _1
	)
# 1041 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'checkentail_cmd) in
    Obj.repr(
# 245 "sparser.mly"
                    (
	  EntailCheck _1
	)
# 1050 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'captureresidue_cmd) in
    Obj.repr(
# 248 "sparser.mly"
                      (
	  CaptureResidue _1
	)
# 1059 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'print_cmd) in
    Obj.repr(
# 251 "sparser.mly"
              (
	  PrintCmd _1
	)
# 1068 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "sparser.mly"
    ( EmptyCmd )
# 1074 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "sparser.mly"
          (
  { prog_data_decls = [];
	prog_enum_decls = [];
	prog_view_decls = [];
	prog_proc_decls = [];
	prog_coercion_decls = []; }
)
# 1086 "sparser.ml"
               : prog_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "sparser.mly"
    ( [] )
# 1092 "sparser.ml"
               : 'opt_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list) in
    Obj.repr(
# 305 "sparser.mly"
              ( List.rev _1 )
# 1099 "sparser.ml"
               : 'opt_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 309 "sparser.mly"
         ( [_1] )
# 1106 "sparser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 310 "sparser.mly"
                   ( _2 :: _1 )
# 1114 "sparser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_decl) in
    Obj.repr(
# 314 "sparser.mly"
              ( Type _1 )
# 1121 "sparser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : coercion_decl) in
    Obj.repr(
# 316 "sparser.mly"
                  ( Coercion _1 )
# 1128 "sparser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : data_decl) in
    Obj.repr(
# 320 "sparser.mly"
              ( Data _1 )
# 1135 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_decl) in
    Obj.repr(
# 321 "sparser.mly"
               ( Data _1 )
# 1142 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_decl) in
    Obj.repr(
# 322 "sparser.mly"
              ( Enum _1 )
# 1149 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : view_decl) in
    Obj.repr(
# 323 "sparser.mly"
              ( View _1 )
# 1156 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'extends_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'member_list_opt) in
    Obj.repr(
# 327 "sparser.mly"
                                                               (
	let t1, t2, t3 = split_members _5 in
	let cdef = { data_name = _2;
				 data_parent_name = _3;
				 data_fields = t1;
				 data_invs = t2; (*List.fold_left 
							   (fun f1 -> fun f2 -> F.mkAnd f1 f2 (F.pos_of_formula f2)) (F.mkTrue (get_pos 1)) *) 
				 data_methods = t3 } in
	let _ = List.map (fun d -> set_proc_data_decl d cdef) t3 in
	  cdef
  )
# 1175 "sparser.ml"
               : 'class_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "sparser.mly"
    ( "Object" )
# 1181 "sparser.ml"
               : 'extends_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 342 "sparser.mly"
                       ( _2 )
# 1188 "sparser.ml"
               : 'extends_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "sparser.mly"
    ( [] )
# 1194 "sparser.ml"
               : 'member_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member_list) in
    Obj.repr(
# 347 "sparser.mly"
                ( List.rev _1 )
# 1201 "sparser.ml"
               : 'member_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member) in
    Obj.repr(
# 351 "sparser.mly"
           ( [_1] )
# 1208 "sparser.ml"
               : 'member_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'member_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'member) in
    Obj.repr(
# 352 "sparser.mly"
                       ( _2 :: _1 )
# 1216 "sparser.ml"
               : 'member_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 356 "sparser.mly"
                             ( Field ((_1, _2), get_pos 2) )
# 1224 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 357 "sparser.mly"
                         ( Inv _2 )
# 1231 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_decl) in
    Obj.repr(
# 358 "sparser.mly"
              ( Method _1 )
# 1238 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_decl) in
    Obj.repr(
# 359 "sparser.mly"
                     ( Method _1 )
# 1245 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'data_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'data_body) in
    Obj.repr(
# 363 "sparser.mly"
                          (
	  { data_name = _1;
		data_fields = _2;
		data_parent_name = "Object";
		data_invs = []; (* F.mkTrue (get_pos 1); *)
		data_methods = [] }
	)
# 1259 "sparser.ml"
               : data_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 373 "sparser.mly"
                    ( _2 )
# 1266 "sparser.ml"
               : 'data_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_field_list) in
    Obj.repr(
# 377 "sparser.mly"
                                 ( _2 )
# 1273 "sparser.ml"
               : 'data_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 381 "sparser.mly"
    ( [] )
# 1279 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semicolon) in
    Obj.repr(
# 382 "sparser.mly"
                             ( List.rev _1 )
# 1287 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 386 "sparser.mly"
    ()
# 1293 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    Obj.repr(
# 387 "sparser.mly"
              ()
# 1299 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 391 "sparser.mly"
                   ( [((_1, _2), get_pos 1)] )
# 1307 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 392 "sparser.mly"
                                        ( 
			if List.mem _4 (List.map (fun f -> snd (fst f)) _1) then
				report_error (get_pos 4) (_4 ^ " is duplicated")
			else
				((_3, _4), get_pos 3) :: _1 
		)
# 1321 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'enum_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'enum_body) in
    Obj.repr(
# 401 "sparser.mly"
                          (
	{ enum_name = _1;
	  enum_fields = _2 }
  )
# 1332 "sparser.ml"
               : 'enum_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 408 "sparser.mly"
                    ( _2 )
# 1339 "sparser.ml"
               : 'enum_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    Obj.repr(
# 412 "sparser.mly"
                            ( List.rev _2 )
# 1346 "sparser.ml"
               : 'enum_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumerator) in
    Obj.repr(
# 416 "sparser.mly"
               ( [_1] )
# 1353 "sparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enumerator) in
    Obj.repr(
# 417 "sparser.mly"
                               ( _3 :: _1 )
# 1361 "sparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 421 "sparser.mly"
               ( (_1, None) )
# 1368 "sparser.ml"
               : 'enumerator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 422 "sparser.mly"
                                  ( (_1, Some _3) )
# 1376 "sparser.ml"
               : 'enumerator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'view_header) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'view_body) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_inv) in
    Obj.repr(
# 428 "sparser.mly"
                                       (
	{ _1 with view_formula = _3; view_invariant = _4 }
  )
# 1387 "sparser.ml"
               : view_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'view_header) in
    Obj.repr(
# 431 "sparser.mly"
                         (
	  report_error (get_pos 2) ("use == to define a view")
	)
# 1396 "sparser.ml"
               : view_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 437 "sparser.mly"
    ( P.mkTrue no_pos )
# 1402 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 438 "sparser.mly"
                    ( _2 )
# 1409 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_ann_cid_list) in
    Obj.repr(
# 442 "sparser.mly"
                                           (
	let cids, anns = List.split _4 in
	  if List.exists 
		(fun x -> match snd x with | Primed -> true | Unprimed -> false) cids 
	  then
		report_error (get_pos 1) 
		  ("variables in view header are not allowed to be primed")
	  else
		let modes = get_modes anns in
		  { view_name = _2;
			view_data_name = "";
			view_vars = List.map fst cids;
			view_modes = modes;
			view_typed_vars = [];
			view_formula = F.mkTrue (get_pos 1);
			view_invariant = P.mkTrue (get_pos 1) }
  )
# 1433 "sparser.ml"
               : 'view_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 462 "sparser.mly"
               ( (_1, Unprimed) )
# 1440 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 463 "sparser.mly"
                     ( (_1, Primed) )
# 1447 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 464 "sparser.mly"
        ( (res, Unprimed) )
# 1454 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 465 "sparser.mly"
         ( (self, Unprimed) )
# 1461 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 466 "sparser.mly"
         ( (this, Unprimed) )
# 1468 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : F.formula) in
    Obj.repr(
# 470 "sparser.mly"
           ( _1 )
# 1475 "sparser.ml"
               : 'view_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list_aux) in
    Obj.repr(
# 483 "sparser.mly"
                      ( List.rev _1 )
# 1482 "sparser.ml"
               : 'heap_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 487 "sparser.mly"
             ( [_1] )
# 1489 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 488 "sparser.mly"
                                     ( _3 :: _1)
# 1497 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 492 "sparser.mly"
         ( _1 (* including variables. to be resolved later *) )
# 1504 "sparser.ml"
               : 'heap_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 496 "sparser.mly"
    ( [] )
# 1510 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list2) in
    Obj.repr(
# 497 "sparser.mly"
                   ( List.rev _1 )
# 1517 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 501 "sparser.mly"
             ( [_1] )
# 1524 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 502 "sparser.mly"
                                  ( 
			if List.mem (fst _3) (List.map fst _1) then
				report_error (get_pos 3) ((fst _3) ^ " is duplicated")
			else 
				_3 :: _1 
		)
# 1537 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 511 "sparser.mly"
                      ( (_1, _3) )
# 1545 "sparser.ml"
               : 'heap_arg2))
; (fun __caml_parser_env ->
    Obj.repr(
# 515 "sparser.mly"
    ( 
	[] : (ident * primed) list 
  )
# 1553 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid_list) in
    Obj.repr(
# 518 "sparser.mly"
             (
	  List.rev _1 : (ident * primed) list 
	)
# 1562 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 524 "sparser.mly"
        ( 
	([_1]) : (ident * primed) list 
  )
# 1571 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 527 "sparser.mly"
                       (
	  if List.mem (fst _3) (List.map fst _1) then
		report_error (get_pos 3) ("identifier " ^ (fst _3) ^ " is duplicated")
	  else
		(_3 :: _1) : (ident * primed) list
	)
# 1584 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 538 "sparser.mly"
    ( [] )
# 1590 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid_list) in
    Obj.repr(
# 539 "sparser.mly"
                 (
	  List.rev _1
	)
# 1599 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 544 "sparser.mly"
            (
	[_1]
  )
# 1608 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ann_cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 547 "sparser.mly"
                               (
	  _3 :: _1
	)
# 1618 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ann_list) in
    Obj.repr(
# 553 "sparser.mly"
                     (
	(_1, _2)
  )
# 1628 "sparser.ml"
               : 'ann_cid))
; (fun __caml_parser_env ->
    Obj.repr(
# 559 "sparser.mly"
    ( 
	[] 
  )
# 1636 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_list) in
    Obj.repr(
# 562 "sparser.mly"
             ( 
	  List.rev _1 
	)
# 1645 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 568 "sparser.mly"
        (
	[_1]
  )
# 1654 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ann_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 571 "sparser.mly"
                 (
	  _2 :: _1
	)
# 1664 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 577 "sparser.mly"
          (
	AnnMode ModeIn
  )
# 1672 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 580 "sparser.mly"
                  (
	if _2 = "out" then AnnMode ModeOut
	else report_error (get_pos 2) ("unrecognized mode: " ^ _2)
  )
# 1682 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 587 "sparser.mly"
                       ( _1 )
# 1689 "sparser.ml"
               : F.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_constr) in
    Obj.repr(
# 591 "sparser.mly"
                ( (* each case of a view definition *)
	_1
  )
# 1698 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'case_constr) in
    Obj.repr(
# 594 "sparser.mly"
                                          (
	  F.mkOr _1 _3 (get_pos 2)
	)
# 1708 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 597 "sparser.mly"
          (
	  report_error (get_pos 1) ("parse error in constraints")
	)
# 1716 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_constr) in
    Obj.repr(
# 603 "sparser.mly"
                ( _1 )
# 1723 "sparser.ml"
               : 'case_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'core_constr) in
    Obj.repr(
# 604 "sparser.mly"
                                                         (
	  match _5 with
		| F.Base ({F.formula_base_heap = h;
				   F.formula_base_pure = p}) ->
			F.mkExists _3 h p (get_pos 1)
		| _ -> report_error (get_pos 4) ("only Base is expected here.")
	)
# 1737 "sparser.ml"
               : 'case_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_constr) in
    Obj.repr(
# 614 "sparser.mly"
                ( F.formula_of_heap _1 (get_pos 1) )
# 1744 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 615 "sparser.mly"
                ( F.formula_of_pure _1 (get_pos 1) )
# 1751 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 616 "sparser.mly"
                                ( F.mkBase _1 _3 (get_pos 2) )
# 1759 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 620 "sparser.mly"
                       ( _1 )
# 1766 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 621 "sparser.mly"
                                        ( F.mkStar _1 _3 (get_pos 2) )
# 1774 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'heap_arg_list) in
    Obj.repr(
# 625 "sparser.mly"
                                                  (
	let h = F.HeapNode { F.h_formula_heap_node = _1;
						 F.h_formula_heap_name = _3;
						 F.h_formula_heap_full = false;
						 F.h_formula_heap_with_inv = false;
						 F.h_formula_heap_pseudo_data = false;
						 F.h_formula_heap_arguments = _5;
						 F.h_formula_heap_pos = get_pos 2 } in
	  h
  )
# 1792 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_heap_arg_list2) in
    Obj.repr(
# 635 "sparser.mly"
                                                       (
	  let h = F.HeapNode2 { F.h_formula_heap2_node = _1;
							F.h_formula_heap2_name = _3;
							F.h_formula_heap2_full = false;
							F.h_formula_heap2_with_inv = false;
							F.h_formula_heap2_pseudo_data = false;
							F.h_formula_heap2_arguments = _5;
							F.h_formula_heap2_pos = get_pos 2 } in
		h
	)
# 1810 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pure_constr) in
    Obj.repr(
# 680 "sparser.mly"
                       ( _1 )
# 1817 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pure_constr) in
    Obj.repr(
# 681 "sparser.mly"
                                       ( P.mkAnd _1 _3 (get_pos 2) )
# 1825 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 685 "sparser.mly"
                               ( P.mkOr _1 _3 (get_pos 2) )
# 1833 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 686 "sparser.mly"
                                           ( P.mkOr _1 _3 (get_pos 2) )
# 1841 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbconstr) in
    Obj.repr(
# 690 "sparser.mly"
             (
	fst _1
  )
# 1850 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_pure_constr) in
    Obj.repr(
# 693 "sparser.mly"
                                          ( 
	  _2 
	)
# 1859 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pure_constr) in
    Obj.repr(
# 696 "sparser.mly"
                                                               (
	  let qf f v = P.mkExists [v] f (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 1871 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pure_constr) in
    Obj.repr(
# 701 "sparser.mly"
                                                               (
	  let qf f v = P.mkForall [v] f (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 1883 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 706 "sparser.mly"
         (
	  P.mkTrue (get_pos 1)
	)
# 1891 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 709 "sparser.mly"
          (
	  P.mkFalse (get_pos 1)
	)
# 1899 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 712 "sparser.mly"
        (
	  P.BForm (P.mkBVar _1 (get_pos 1))
	)
# 1908 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 715 "sparser.mly"
            (
	  P.mkNot (P.BForm (P.mkBVar _2 (get_pos 2))) (get_pos 1)
	)
# 1917 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bconstr) in
    Obj.repr(
# 721 "sparser.mly"
            (
	(fst _1, snd _1)
  )
# 1926 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 724 "sparser.mly"
                           (
	  expand_exp_list P.mkNeq _1 _3 (get_pos 2)
	)
# 1936 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 727 "sparser.mly"
                          (
	  expand_exp_list P.mkEq _1 _3 (get_pos 2)
	)
# 1946 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 730 "sparser.mly"
                          (
	  expand_exp_list P.mkLt _1 _3 (get_pos 2)
	)
# 1956 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 733 "sparser.mly"
                           (
	  expand_exp_list P.mkLte _1 _3 (get_pos 2)
	)
# 1966 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 736 "sparser.mly"
                          (
	  expand_exp_list P.mkGt _1 _3 (get_pos 2)
	)
# 1976 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 739 "sparser.mly"
                           (
	  expand_exp_list P.mkGte _1 _3 (get_pos 2)
	)
# 1986 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 745 "sparser.mly"
                           (
	let p = P.build_relation P.mkLt _1 _3 (get_pos 2) in
	  (p, Some _3)
  )
# 1997 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 749 "sparser.mly"
                            (
	  let p = P.build_relation P.mkLte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2008 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 753 "sparser.mly"
                           ( 
	  let p = P.build_relation P.mkGt _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2019 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 757 "sparser.mly"
                            ( 
	  let p = P.build_relation P.mkGte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2030 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 761 "sparser.mly"
                           ( 
	  let p = P.build_relation P.mkEq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2041 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 765 "sparser.mly"
                            (
	  let p = P.build_relation P.mkNeq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2052 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 770 "sparser.mly"
                (
	  (P.BForm (P.BagIn (_1, _3, get_pos 2)), None)
	)
# 2062 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 773 "sparser.mly"
                   (
	  (P.BForm (P.BagNotIn (_1, _3, get_pos 2)), None)
	)
# 2072 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 776 "sparser.mly"
                     (
	  (P.BForm (P.BagSub (_1, _3, get_pos 2)), None)
	)
# 2082 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 779 "sparser.mly"
                                       (
	  (P.BForm (P.BagMax (_3, _5, get_pos 2)), None)
	)
# 2092 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 782 "sparser.mly"
                                       (
	  (P.BForm (P.BagMin (_3, _5, get_pos 2)), None)
	)
# 2102 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 790 "sparser.mly"
        (
		P.Var (_1, get_pos 1)
  )
# 2111 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 793 "sparser.mly"
                    (
	  P.IConst (_1, get_pos 1)
	)
# 2120 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 796 "sparser.mly"
                        (
	  P.mkMult _1 (P.Var (_2, get_pos 2)) (get_pos 1)
	)
# 2130 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 799 "sparser.mly"
                   (
	  P.mkAdd _1 _3 (get_pos 2)
	)
# 2140 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 802 "sparser.mly"
                    (
	  P.mkSubtract _1 _3 (get_pos 2)
	)
# 2150 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 805 "sparser.mly"
                            (
	  P.mkSubtract (P.IConst (0, get_pos 1)) _2 (get_pos 1)
	)
# 2159 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 808 "sparser.mly"
                                      (
	  P.mkMax _3 _5 (get_pos 1)
	)
# 2169 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 811 "sparser.mly"
                                      (
	  P.mkMin _3 _5 (get_pos 1)
	)
# 2179 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 814 "sparser.mly"
         (
	  P.Null (get_pos 1)
	)
# 2187 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 818 "sparser.mly"
                                (
	  P.Bag (_2, get_pos 1)
	)
# 2196 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 821 "sparser.mly"
                                      (
	  P.BagUnion (_3, get_pos 1)
	)
# 2205 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 824 "sparser.mly"
                                          (
	  P.BagIntersect (_3, get_pos 1)
	)
# 2214 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 827 "sparser.mly"
                                       (
	  P.BagDiff (_3, _5, get_pos 1)
	)
# 2224 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 834 "sparser.mly"
    ( [] )
# 2230 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 835 "sparser.mly"
              ( _1 )
# 2237 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list_rec) in
    Obj.repr(
# 839 "sparser.mly"
                  ( 
	List.rev _1
  )
# 2246 "sparser.ml"
               : 'cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 845 "sparser.mly"
         (
	[_1]
  )
# 2255 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list_rec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 848 "sparser.mly"
                             ( 
	  _3 :: _1
	)
# 2265 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'proc_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proc_body) in
    Obj.repr(
# 856 "sparser.mly"
                          (
	{ _1 with proc_body = Some _2 }
  )
# 2275 "sparser.ml"
               : 'proc_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_header) in
    Obj.repr(
# 859 "sparser.mly"
                ( _1 )
# 2282 "sparser.ml"
               : 'proc_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opt_formal_parameter_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opt_pre_post_list) in
    Obj.repr(
# 863 "sparser.mly"
                                                                             (
	  let static_specs, dynamic_specs = split_specs _6 in
		{ proc_name = _2;
		  proc_mingled_name = ""; (* mingle_name $2 (List.map (fun p -> p.param_type) $4); *)
		  proc_data_decl = None;
		  proc_constructor = false;
		  proc_args = _4;
		  proc_return = _1;
		  proc_static_specs = static_specs;
		  proc_dynamic_specs = dynamic_specs;
		  proc_loc = get_pos 1;
		  proc_body = None }
	)
# 2304 "sparser.ml"
               : 'proc_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opt_formal_parameter_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opt_pre_post_list) in
    Obj.repr(
# 876 "sparser.mly"
                                                                              (
		let static_specs, dynamic_specs = split_specs _6 in
		  { proc_name = _2;
			proc_mingled_name = ""; (* mingle_name $2 (List.map (fun p -> p.param_type) $4); *)
			proc_data_decl = None;
			proc_constructor = false;
			proc_args = _4;
			proc_return = void_type;
			proc_static_specs = static_specs;
			proc_dynamic_specs = dynamic_specs;
			proc_loc = get_pos 1;
			proc_body = None }
  )
# 2325 "sparser.ml"
               : 'proc_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constructor_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proc_body) in
    Obj.repr(
# 892 "sparser.mly"
                                 (
	  { _1 with proc_body = Some _2 }
	)
# 2335 "sparser.ml"
               : 'constructor_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_header) in
    Obj.repr(
# 895 "sparser.mly"
                       ( _1 )
# 2342 "sparser.ml"
               : 'constructor_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_formal_parameter_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'opt_pre_post_list) in
    Obj.repr(
# 899 "sparser.mly"
                                                                         (
	  let static_specs, dynamic_specs = split_specs _5 in
		if Util.empty dynamic_specs then
		  { proc_name = _1;
			proc_mingled_name = ""; (* mingle_name $2 (List.map (fun p -> p.param_type) $4); *)
			proc_data_decl = None;
			proc_constructor = true;
			proc_args = _3;
			proc_return = Named _1;
			proc_static_specs = static_specs;
			proc_dynamic_specs = dynamic_specs;
			proc_loc = get_pos 1;
			proc_body = None }
		else
		  report_error (get_pos 1) ("constructors have only static speficiations");
	)
# 2366 "sparser.ml"
               : 'constructor_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'meta_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'meta_constr) in
    Obj.repr(
# 918 "sparser.mly"
                                               (
	(_2, _4)
  )
# 2376 "sparser.ml"
               : 'checkentail_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 924 "sparser.mly"
                                     (
	(_3)
  )
# 2385 "sparser.ml"
               : 'captureresidue_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'id_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 930 "sparser.mly"
                                                                                    (
	(_3, _6, _8)
  )
# 2396 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 933 "sparser.mly"
                                                            (
	  ([], _3, _5)
	)
# 2406 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 939 "sparser.mly"
                     (
		PCmd _2
  )
# 2415 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 942 "sparser.mly"
                            (
	  PVar _3
	)
# 2424 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'meta_constr) in
    Obj.repr(
# 948 "sparser.mly"
                                         (
	LetDef (_3, _5)
  )
# 2434 "sparser.ml"
               : 'let_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 954 "sparser.mly"
                      (
	MetaVar _2
  )
# 2443 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : F.formula) in
    Obj.repr(
# 957 "sparser.mly"
           (
	  MetaForm _1
	)
# 2452 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 960 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2461 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'opt_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : F.formula) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'coercion_direction) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : F.formula) in
    Obj.repr(
# 966 "sparser.mly"
                                                    (  
	{ coercion_type = _4;
	  coercion_name = _2;
	  coercion_head = _3;
	  coercion_body = _5;
	  coercion_proof = Return ({ exp_return_val = None;
								 exp_return_pos = get_pos 1 })
	}
  )
# 2479 "sparser.ml"
               : coercion_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 987 "sparser.mly"
              ( Left )
# 2485 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 988 "sparser.mly"
          ( Equiv )
# 2491 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 989 "sparser.mly"
               ( Right )
# 2497 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 1013 "sparser.mly"
    ( "" )
# 2503 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1014 "sparser.mly"
                                       ( _2 )
# 2510 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 1018 "sparser.mly"
    ( [] )
# 2516 "sparser.ml"
               : 'opt_pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_post_list) in
    Obj.repr(
# 1019 "sparser.mly"
                                                 ( List.rev _1 )
# 2523 "sparser.ml"
               : 'opt_pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_post_pair) in
    Obj.repr(
# 1023 "sparser.mly"
                  ( [_1] )
# 2530 "sparser.ml"
               : 'pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pre_post_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_post_pair) in
    Obj.repr(
# 1024 "sparser.mly"
                                ( _2 :: _1 )
# 2538 "sparser.ml"
               : 'pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'spec_qualifier_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : F.formula) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1028 "sparser.mly"
                                                                ( (_1, _3, _5) )
# 2547 "sparser.ml"
               : 'pre_post_pair))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'spec_qualifier_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1029 "sparser.mly"
                                                ( (_1, F.mkTrue (get_pos 1), _3) )
# 2555 "sparser.ml"
               : 'pre_post_pair))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'spec_qualifier_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1030 "sparser.mly"
                                                 ( (_1, _3, F.mkTrue (get_pos 1)) )
# 2563 "sparser.ml"
               : 'pre_post_pair))
; (fun __caml_parser_env ->
    Obj.repr(
# 1034 "sparser.mly"
    ( Static )
# 2569 "sparser.ml"
               : 'spec_qualifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1035 "sparser.mly"
           ( Static )
# 2575 "sparser.ml"
               : 'spec_qualifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1036 "sparser.mly"
            ( Dynamic )
# 2581 "sparser.ml"
               : 'spec_qualifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1040 "sparser.mly"
    ( [] )
# 2587 "sparser.ml"
               : 'opt_formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameter_list) in
    Obj.repr(
# 1041 "sparser.mly"
                          ( List.rev _1 )
# 2594 "sparser.ml"
               : 'opt_formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameter) in
    Obj.repr(
# 1045 "sparser.mly"
                     ( [_1] )
# 2601 "sparser.ml"
               : 'formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameter) in
    Obj.repr(
# 1046 "sparser.mly"
                                                 ( _3 :: _1 )
# 2609 "sparser.ml"
               : 'formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_parameter) in
    Obj.repr(
# 1050 "sparser.mly"
                    ( _1 )
# 2616 "sparser.ml"
               : 'formal_parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_parameter_modifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1054 "sparser.mly"
                                          (
	{ param_mod = _1;
	  param_type = _2;
	  param_loc = get_pos 3;
	  param_name = _3 }
  )
# 2630 "sparser.ml"
               : 'fixed_parameter))
; (fun __caml_parser_env ->
    Obj.repr(
# 1063 "sparser.mly"
    ( NoMod )
# 2636 "sparser.ml"
               : 'opt_parameter_modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1064 "sparser.mly"
        ( RefMod )
# 2642 "sparser.ml"
               : 'opt_parameter_modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1068 "sparser.mly"
          ( _1 )
# 2649 "sparser.ml"
               : 'proc_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_array_type) in
    Obj.repr(
# 1081 "sparser.mly"
                   ( _1 )
# 2656 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 1082 "sparser.mly"
               ( _1 )
# 2663 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 1086 "sparser.mly"
        ( int_type )
# 2669 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1087 "sparser.mly"
          ( float_type )
# 2675 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1088 "sparser.mly"
         ( bool_type )
# 2681 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1089 "sparser.mly"
               ( Named _1 )
# 2688 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 1093 "sparser.mly"
                              ( Array (int_type, None) )
# 2696 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 1094 "sparser.mly"
                                  ( Array (int_type, None) )
# 2704 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list_opt) in
    Obj.repr(
# 1098 "sparser.mly"
                                   ()
# 2711 "sparser.ml"
               : 'rank_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1102 "sparser.mly"
    ()
# 2717 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comma_list) in
    Obj.repr(
# 1103 "sparser.mly"
               ()
# 2724 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1107 "sparser.mly"
          ()
# 2730 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list) in
    Obj.repr(
# 1108 "sparser.mly"
                     ()
# 2737 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_statement_list) in
    Obj.repr(
# 1114 "sparser.mly"
                                     (
	match _2 with
	  | Empty _ -> Block { exp_block_body = Empty (get_pos 1);
						   exp_block_pos = get_pos 1 }
	  | _ -> Block { exp_block_body = _2;
					 exp_block_pos = get_pos 1 }
  )
# 2750 "sparser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 1124 "sparser.mly"
    ( Empty no_pos )
# 2756 "sparser.ml"
               : 'opt_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 1125 "sparser.mly"
                   ( _1 )
# 2763 "sparser.ml"
               : 'opt_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 1129 "sparser.mly"
              ( _1 )
# 2770 "sparser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 1130 "sparser.mly"
                             ( Seq { exp_seq_exp1 = _1;
									 exp_seq_exp2 = _2;
									 exp_seq_pos = get_pos 1 } )
# 2780 "sparser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1133 "sparser.mly"
          ( report_error (get_pos 1) ("parse error") )
# 2786 "sparser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration_statement) in
    Obj.repr(
# 1137 "sparser.mly"
                          ( _1 )
# 2793 "sparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'valid_declaration_statement) in
    Obj.repr(
# 1138 "sparser.mly"
                                ( _1 )
# 2800 "sparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'local_variable_declaration) in
    Obj.repr(
# 1142 "sparser.mly"
                                         ( _1 )
# 2807 "sparser.ml"
               : 'declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'local_constant_declaration) in
    Obj.repr(
# 1143 "sparser.mly"
                                         ( _1 )
# 2814 "sparser.ml"
               : 'declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 1147 "sparser.mly"
        ( _1 )
# 2821 "sparser.ml"
               : 'local_variable_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'local_variable_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declarators) in
    Obj.repr(
# 1151 "sparser.mly"
                                             (
	let var_decls = List.rev _2 in
	  mkVarDecl _1 var_decls (get_pos 1)
  )
# 2832 "sparser.ml"
               : 'local_variable_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'local_variable_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant_declarators) in
    Obj.repr(
# 1158 "sparser.mly"
                                                   (
	let const_decls = List.rev _3  in
	  mkConstDecl _2 const_decls (get_pos 1)
  )
# 2843 "sparser.ml"
               : 'local_constant_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declarator) in
    Obj.repr(
# 1165 "sparser.mly"
                        ( [_1] )
# 2850 "sparser.ml"
               : 'variable_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable_declarators) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declarator) in
    Obj.repr(
# 1166 "sparser.mly"
                                                   ( _3 :: _1 )
# 2858 "sparser.ml"
               : 'variable_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable_initializer) in
    Obj.repr(
# 1170 "sparser.mly"
                                       ( (_1, Some _3, get_pos 1) )
# 2866 "sparser.ml"
               : 'variable_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1171 "sparser.mly"
               ( (_1, None, get_pos 1) )
# 2873 "sparser.ml"
               : 'variable_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1175 "sparser.mly"
               ( _1 )
# 2880 "sparser.ml"
               : 'variable_initializer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant_declarator) in
    Obj.repr(
# 1179 "sparser.mly"
                        ( [_1] )
# 2887 "sparser.ml"
               : 'constant_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constant_declarators) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant_declarator) in
    Obj.repr(
# 1180 "sparser.mly"
                                                   ( _3 :: _1 )
# 2895 "sparser.ml"
               : 'constant_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant_expression) in
    Obj.repr(
# 1184 "sparser.mly"
                                      ( (_1, _3, get_pos 1) )
# 2903 "sparser.ml"
               : 'constant_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1188 "sparser.mly"
          ( _1 )
# 2910 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'empty_statement) in
    Obj.repr(
# 1189 "sparser.mly"
                    ( _1 )
# 2917 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression_statement) in
    Obj.repr(
# 1190 "sparser.mly"
                         ( _1 )
# 2924 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'selection_statement) in
    Obj.repr(
# 1191 "sparser.mly"
                        ( _1 )
# 2931 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iteration_statement) in
    Obj.repr(
# 1192 "sparser.mly"
                        ( _1 )
# 2938 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'java_statement) in
    Obj.repr(
# 1193 "sparser.mly"
                   ( _1 )
# 2945 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'jump_statement) in
    Obj.repr(
# 1194 "sparser.mly"
                   ( _1 )
# 2952 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assert_statement) in
    Obj.repr(
# 1195 "sparser.mly"
                     ( _1 )
# 2959 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dprint_statement) in
    Obj.repr(
# 1196 "sparser.mly"
                     ( _1 )
# 2966 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'debug_statement) in
    Obj.repr(
# 1197 "sparser.mly"
                    ( _1 )
# 2973 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_statement) in
    Obj.repr(
# 1198 "sparser.mly"
                   ( _1 )
# 2980 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unfold_statement) in
    Obj.repr(
# 1199 "sparser.mly"
                     ( _1 )
# 2987 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 1215 "sparser.mly"
                         ( 
	Unfold { exp_unfold_var = _2;
			 exp_unfold_pos = get_pos 1 } )
# 2996 "sparser.ml"
               : 'unfold_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1232 "sparser.mly"
                            (
	Assert { exp_assert_asserted_formula = Some _2;
			 exp_assert_assumed_formula = None;
			 exp_assert_pos = get_pos 1 }
  )
# 3007 "sparser.ml"
               : 'assert_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : F.formula) in
    Obj.repr(
# 1237 "sparser.mly"
                                   (
	  Assert { exp_assert_asserted_formula = Some _2;
			   exp_assert_assumed_formula = Some _2;
			   exp_assert_pos = get_pos 1 }
	)
# 3018 "sparser.ml"
               : 'assert_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1242 "sparser.mly"
                            (
	  Assert { exp_assert_asserted_formula = None;
			   exp_assert_assumed_formula = Some _2;
			   exp_assert_pos = get_pos 1 }
	)
# 3029 "sparser.ml"
               : 'assert_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1250 "sparser.mly"
              (
	Debug { exp_debug_flag = true;
			exp_debug_pos = get_pos 2 }
  )
# 3038 "sparser.ml"
               : 'debug_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1254 "sparser.mly"
               (
	  Debug { exp_debug_flag = false;
			  exp_debug_pos = get_pos 2 }
	)
# 3047 "sparser.ml"
               : 'debug_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1261 "sparser.mly"
                    ( Dprint ({exp_dprint_string = "";
							   exp_dprint_pos = (get_pos 1)}) )
# 3054 "sparser.ml"
               : 'dprint_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1263 "sparser.mly"
                               ( Dprint ({exp_dprint_string = _2;
							   exp_dprint_pos = (get_pos 1)}) )
# 3062 "sparser.ml"
               : 'dprint_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1268 "sparser.mly"
              ( Empty (get_pos 1) )
# 3068 "sparser.ml"
               : 'empty_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'id_list_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1272 "sparser.mly"
                                                          ( 
	Bind { exp_bind_bound_var = _2;
		   exp_bind_fields = _5;
		   exp_bind_body = _8;
		   exp_bind_pos = get_pos 1 }
  )
# 3082 "sparser.ml"
               : 'bind_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1281 "sparser.mly"
    ( [] )
# 3088 "sparser.ml"
               : 'id_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 1282 "sparser.mly"
            ( List.rev _1 )
# 3095 "sparser.ml"
               : 'id_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1286 "sparser.mly"
               ( [_1] )
# 3102 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1287 "sparser.mly"
                             ( _3 :: _1 )
# 3110 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1291 "sparser.mly"
         (
	Java { exp_java_code = _1;
		   exp_java_pos = get_pos 1 }
  )
# 3120 "sparser.ml"
               : 'java_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_expression) in
    Obj.repr(
# 1297 "sparser.mly"
                                   ( _1 )
# 3127 "sparser.ml"
               : 'expression_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'invocation_expression) in
    Obj.repr(
# 1301 "sparser.mly"
                          ( _1 )
# 3134 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'object_creation_expression) in
    Obj.repr(
# 1302 "sparser.mly"
                               ( _1 )
# 3141 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 1303 "sparser.mly"
                          ( _1 )
# 3148 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_increment_expression) in
    Obj.repr(
# 1304 "sparser.mly"
                              ( _1 )
# 3155 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_decrement_expression) in
    Obj.repr(
# 1305 "sparser.mly"
                              ( _1 )
# 3162 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_increment_expression) in
    Obj.repr(
# 1306 "sparser.mly"
                             ( _1 )
# 3169 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_decrement_expression) in
    Obj.repr(
# 1307 "sparser.mly"
                             ( _1 )
# 3176 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_statement) in
    Obj.repr(
# 1311 "sparser.mly"
                 ( _1 )
# 3183 "sparser.ml"
               : 'selection_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'valid_declaration_statement) in
    Obj.repr(
# 1315 "sparser.mly"
                                ( _1 )
# 3190 "sparser.ml"
               : 'embedded_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'boolean_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1319 "sparser.mly"
                                                                                 (
	  Cond { exp_cond_condition = _3;
			 exp_cond_then_arm = _5;
			 exp_cond_else_arm = Empty (get_pos 1);
			 exp_cond_pos = get_pos 1 }
	)
# 3203 "sparser.ml"
               : 'if_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'boolean_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'embedded_statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1325 "sparser.mly"
                                                                                   (
		Cond { exp_cond_condition = _3;
			   exp_cond_then_arm = _5;
			   exp_cond_else_arm = _7;
			   exp_cond_pos = get_pos 1 }
	  )
# 3217 "sparser.ml"
               : 'if_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_statement) in
    Obj.repr(
# 1334 "sparser.mly"
                    ( _1 )
# 3224 "sparser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'boolean_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1338 "sparser.mly"
                                                              (
	  While { exp_while_condition = _3;
			  exp_while_body = _5;
			  exp_while_specs = [(F.mkTrue no_pos, F.mkTrue no_pos)];
			  exp_while_pos = get_pos 1 }
	)
# 3237 "sparser.ml"
               : 'while_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'boolean_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pre_post_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1344 "sparser.mly"
                                                                                            (
		While { exp_while_condition = _3;
				exp_while_body = _8;
				exp_while_specs = List.map remove_spec_qualifier _6;
				exp_while_pos = get_pos 1 }
	  )
# 3251 "sparser.ml"
               : 'while_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return_statement) in
    Obj.repr(
# 1353 "sparser.mly"
                     ( _1 )
# 3258 "sparser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'break_statement) in
    Obj.repr(
# 1354 "sparser.mly"
                    ( _1 )
# 3265 "sparser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'continue_statement) in
    Obj.repr(
# 1355 "sparser.mly"
                       ( _1 )
# 3272 "sparser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1359 "sparser.mly"
                    ( Break (get_pos 1) )
# 3278 "sparser.ml"
               : 'break_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1363 "sparser.mly"
                       ( Continue (get_pos 1) )
# 3284 "sparser.ml"
               : 'continue_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_expression) in
    Obj.repr(
# 1367 "sparser.mly"
                                    ( Return { exp_return_val = _2;
											   exp_return_pos = get_pos 1 } )
# 3292 "sparser.ml"
               : 'return_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1372 "sparser.mly"
    ( None )
# 3298 "sparser.ml"
               : 'opt_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1373 "sparser.mly"
               ( Some _1 )
# 3305 "sparser.ml"
               : 'opt_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'object_or_delegate_creation_expression) in
    Obj.repr(
# 1379 "sparser.mly"
                                           ( _1 )
# 3312 "sparser.ml"
               : 'object_creation_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_argument_list) in
    Obj.repr(
# 1383 "sparser.mly"
                                                   (
	New { exp_new_class_name = _2;
		  exp_new_arguments = _4;
		  exp_new_pos = get_pos 1 }
  )
# 3324 "sparser.ml"
               : 'object_or_delegate_creation_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'object_or_delegate_creation_expression) in
    Obj.repr(
# 1391 "sparser.mly"
                                           ( _1 )
# 3331 "sparser.ml"
               : 'new_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 1395 "sparser.mly"
    ( [] )
# 3337 "sparser.ml"
               : 'opt_argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument_list) in
    Obj.repr(
# 1396 "sparser.mly"
                  ( List.rev _1 )
# 3344 "sparser.ml"
               : 'opt_argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument) in
    Obj.repr(
# 1400 "sparser.mly"
             ( [_1] )
# 3351 "sparser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argument_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argument) in
    Obj.repr(
# 1401 "sparser.mly"
                                 ( _3 :: _1 )
# 3359 "sparser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1405 "sparser.mly"
               ( _1 )
# 3366 "sparser.ml"
               : 'argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 1409 "sparser.mly"
                           ( _1 )
# 3373 "sparser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 1410 "sparser.mly"
                          ( _1 )
# 3380 "sparser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1414 "sparser.mly"
               (
	_1
  )
# 3389 "sparser.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1420 "sparser.mly"
               (
	(* check type *)
	_1
  )
# 3399 "sparser.ml"
               : 'boolean_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1427 "sparser.mly"
                                            (
	  mkAssign OpAssign _1 _3 (get_pos 2)
	)
# 3409 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1430 "sparser.mly"
                                                        (
		mkAssign OpMultAssign _1 _3 (get_pos 2)
	  )
# 3419 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1433 "sparser.mly"
                                                       (
		mkAssign OpDivAssign _1 _3 (get_pos 2)
	  )
# 3429 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1436 "sparser.mly"
                                                       (
		mkAssign OpModAssign _1 _3 (get_pos 2)
	  )
# 3439 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1439 "sparser.mly"
                                                       (
		mkAssign OpPlusAssign _1 _3 (get_pos 2)
	  )
# 3449 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1442 "sparser.mly"
                                                       (
		mkAssign OpMinusAssign _1 _3 (get_pos 2)
	  )
# 3459 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_or_expression) in
    Obj.repr(
# 1448 "sparser.mly"
                              ( _1 )
# 3466 "sparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'conditional_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1449 "sparser.mly"
                                                                 (
	  Cond { exp_cond_condition = _1;
			 exp_cond_then_arm = _3;
			 exp_cond_else_arm = _5;
			 exp_cond_pos = get_pos 2 }
	)
# 3480 "sparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_and_expression) in
    Obj.repr(
# 1458 "sparser.mly"
                               ( _1 )
# 3487 "sparser.ml"
               : 'conditional_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_and_expression) in
    Obj.repr(
# 1459 "sparser.mly"
                                                              (
	  mkBinary OpLogicalOr _1 _3 (get_pos 2)
	)
# 3497 "sparser.ml"
               : 'conditional_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inclusive_or_expression) in
    Obj.repr(
# 1465 "sparser.mly"
                            ( _1 )
# 3504 "sparser.ml"
               : 'conditional_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_and_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inclusive_or_expression) in
    Obj.repr(
# 1466 "sparser.mly"
                                                              (
		mkBinary OpLogicalAnd _1 _3 (get_pos 2)
	  )
# 3514 "sparser.ml"
               : 'conditional_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exclusive_or_expression) in
    Obj.repr(
# 1472 "sparser.mly"
                            ( _1 )
# 3521 "sparser.ml"
               : 'inclusive_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 1476 "sparser.mly"
                   ( _1 )
# 3528 "sparser.ml"
               : 'exclusive_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 1480 "sparser.mly"
                        ( _1 )
# 3535 "sparser.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 1484 "sparser.mly"
                          ( _1 )
# 3542 "sparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 1485 "sparser.mly"
                                                   (
		mkBinary OpEq _1 _3 (get_pos 2)
	  )
# 3552 "sparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 1488 "sparser.mly"
                                                  (
		mkBinary OpNeq _1 _3 (get_pos 2)
	  )
# 3562 "sparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1494 "sparser.mly"
                     ( _1 )
# 3569 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1495 "sparser.mly"
                                              (
		mkBinary OpLt _1 _3 (get_pos 2)
	  )
# 3579 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1498 "sparser.mly"
                                              (
		mkBinary OpGt _1 _3 (get_pos 2)
	  )
# 3589 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1501 "sparser.mly"
                                               (
		mkBinary OpLte _1 _3 (get_pos 2)
	  )
# 3599 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1504 "sparser.mly"
                                               (
		mkBinary OpGte _1 _3 (get_pos 2)
	  )
# 3609 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 1510 "sparser.mly"
                        ( _1 )
# 3616 "sparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 1514 "sparser.mly"
                              ( _1 )
# 3623 "sparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 1515 "sparser.mly"
                                                       (
	  mkBinary OpPlus _1 _3 (get_pos 2)
	)
# 3633 "sparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 1518 "sparser.mly"
                                                        (
	  mkBinary OpMinus _1 _3 (get_pos 2)
	)
# 3643 "sparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1524 "sparser.mly"
                     ( _1 )
# 3650 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1525 "sparser.mly"
                                                             (
	  mkBinary OpMult _1 _3 (get_pos 2)
	)
# 3660 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1528 "sparser.mly"
                                                            (
	  mkBinary OpDiv _1 _3 (get_pos 2)
	)
# 3670 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1531 "sparser.mly"
                                                                (
	  mkBinary OpMod _1 _3 (get_pos 2)
	)
# 3680 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1537 "sparser.mly"
                     ( _1 )
# 3687 "sparser.ml"
               : 'prefixed_unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1547 "sparser.mly"
                                     (
	  mkUnary OpPreInc _2 (get_pos 1)
	)
# 3696 "sparser.ml"
               : 'pre_increment_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1553 "sparser.mly"
                                     (
	  mkUnary OpPreDec _2 (get_pos 1)
	)
# 3705 "sparser.ml"
               : 'pre_decrement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primary_expression) in
    Obj.repr(
# 1559 "sparser.mly"
                              (
	  mkUnary OpPostInc _1 (get_pos 2)
	)
# 3714 "sparser.ml"
               : 'post_increment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primary_expression) in
    Obj.repr(
# 1565 "sparser.mly"
                              (
	  mkUnary OpPostDec _1 (get_pos 2)
	)
# 3723 "sparser.ml"
               : 'post_decrement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression_not_plusminus) in
    Obj.repr(
# 1571 "sparser.mly"
                                   ( _1 )
# 3730 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1572 "sparser.mly"
                          ( 
		let zero = IntLit { exp_int_lit_val = 0;
							exp_int_lit_pos = get_pos 1 }
		in
		  mkBinary OpPlus zero _2 (get_pos 1)
	  
	  )
# 3743 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1579 "sparser.mly"
                           (
		let zero = IntLit { exp_int_lit_val = 0;
							exp_int_lit_pos = get_pos 1 }
		in
		  mkBinary OpMinus zero _2 (get_pos 1)
	  )
# 3755 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_increment_expression) in
    Obj.repr(
# 1585 "sparser.mly"
                             ( _1 )
# 3762 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_decrement_expression) in
    Obj.repr(
# 1586 "sparser.mly"
                             ( _1 )
# 3769 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 1590 "sparser.mly"
                       ( _1 )
# 3776 "sparser.ml"
               : 'unary_expression_not_plusminus))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1591 "sparser.mly"
                                  (
		mkUnary OpNot _2 (get_pos 1)
	  )
# 3785 "sparser.ml"
               : 'unary_expression_not_plusminus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 1594 "sparser.mly"
                    ( _1 )
# 3792 "sparser.ml"
               : 'unary_expression_not_plusminus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 1598 "sparser.mly"
                       ( _1 )
# 3799 "sparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_increment_expression) in
    Obj.repr(
# 1599 "sparser.mly"
                              ( _1 )
# 3806 "sparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_decrement_expression) in
    Obj.repr(
# 1600 "sparser.mly"
                              ( _1)
# 3813 "sparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression_not_plusminus) in
    Obj.repr(
# 1604 "sparser.mly"
                                                            ( 
	  match _2 with
		| Var v -> Cast { exp_cast_target_type = Named v.exp_var_name; (*TODO: fix this *)
						  exp_cast_body = _4;
						  exp_cast_pos = get_pos 1 }
		| _ -> report_error (get_pos 2) ("Expecting a type")
	)
# 3827 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1611 "sparser.mly"
                                       ( 
		Cast { exp_cast_target_type = Prim Int;
			   exp_cast_body = _4;
			   exp_cast_pos = get_pos 1 }
	  )
# 3838 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1616 "sparser.mly"
                                        ( 
		Cast { exp_cast_target_type = Prim Bool;
			   exp_cast_body = _4;
			   exp_cast_pos = get_pos 1 }
	  )
# 3849 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1621 "sparser.mly"
                                         ( 
		Cast { exp_cast_target_type = Prim Float;
			   exp_cast_body = _4;
			   exp_cast_pos = get_pos 1 }
	  )
# 3860 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'qualified_identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_argument_list) in
    Obj.repr(
# 1629 "sparser.mly"
                                                         (
	  CallRecv { exp_call_recv_receiver = fst _1;
				 exp_call_recv_method = snd _1;
				 exp_call_recv_arguments = _3;
				 exp_call_recv_pos = get_pos 1 }
	)
# 3873 "sparser.ml"
               : 'invocation_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_argument_list) in
    Obj.repr(
# 1635 "sparser.mly"
                                               (
		CallNRecv { exp_call_nrecv_method = _1;
					exp_call_nrecv_arguments = _3;
					exp_call_nrecv_pos = get_pos 1 }
	  )
# 3885 "sparser.ml"
               : 'invocation_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1643 "sparser.mly"
                                      ( (_1, _3) )
# 3893 "sparser.ml"
               : 'qualified_identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1647 "sparser.mly"
                                      (
	Member { exp_member_base = _1;
			 exp_member_fields = [_3];
			 exp_member_pos = get_pos 3 }
  )
# 3905 "sparser.ml"
               : 'member_access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'boolean_literal) in
    Obj.repr(
# 1655 "sparser.mly"
                    ( BoolLit { exp_bool_lit_val = _1;
								exp_bool_lit_pos = get_pos 1 } )
# 3913 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'integer_literal) in
    Obj.repr(
# 1657 "sparser.mly"
                    ( IntLit { exp_int_lit_val = _1;
							   exp_int_lit_pos = get_pos 1 } )
# 3921 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'real_literal) in
    Obj.repr(
# 1659 "sparser.mly"
                 ( FloatLit { exp_float_lit_val = _1;
							  exp_float_lit_pos = get_pos 1 } )
# 3929 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 1661 "sparser.mly"
         ( Null (get_pos 1) )
# 3935 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 1665 "sparser.mly"
                  ( _1 )
# 3942 "sparser.ml"
               : 'real_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1669 "sparser.mly"
                    ( _1 )
# 3949 "sparser.ml"
               : 'integer_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 1673 "sparser.mly"
         ( true )
# 3955 "sparser.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 1674 "sparser.mly"
          ( false )
# 3961 "sparser.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesized_expression) in
    Obj.repr(
# 1678 "sparser.mly"
                             ( _1 )
# 3968 "sparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression_no_parenthesis) in
    Obj.repr(
# 1679 "sparser.mly"
                                      ( _1 )
# 3975 "sparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 1683 "sparser.mly"
                             ( _2 )
# 3982 "sparser.ml"
               : 'parenthesized_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 1687 "sparser.mly"
            ( _1 )
# 3989 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member_name) in
    Obj.repr(
# 1688 "sparser.mly"
                ( _1 )
# 3996 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member_access) in
    Obj.repr(
# 1689 "sparser.mly"
                  ( _1 )
# 4003 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'invocation_expression) in
    Obj.repr(
# 1690 "sparser.mly"
                          ( _1 )
# 4010 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'new_expression) in
    Obj.repr(
# 1691 "sparser.mly"
                   ( _1)
# 4017 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1695 "sparser.mly"
               ( Var { exp_var_name = _1;
					   exp_var_pos = get_pos 1 } )
# 4025 "sparser.ml"
               : 'member_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1697 "sparser.mly"
         ( This ({exp_this_pos = get_pos 1}) )
# 4032 "sparser.ml"
               : 'member_name))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry data_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry view_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry coercion_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry constr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : prog_decl)
let data_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : data_decl)
let view_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : view_decl)
let coercion_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : coercion_decl)
let constr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : F.formula)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : command)
;;
