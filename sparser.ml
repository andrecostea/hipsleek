type token =
  | AND
  | ANDAND
  | ASSERT
  | ASSUME
  | AT
  | BIND
  | BOOL
  | BREAK
  | BY
  | CASE
  | CBRACE
  | CHECKENTAIL
  | CLASS
  | COERCION
  | COLON
  | COLONCOLON
  | COMMA
  | COMPOSE
  | CONSEQ
  | CONST
  | CONTINUE
  | CPAREN
  | CSQUARE
  | DATA
  | DDEBUG
  | DIFF
  | DISTR
  | DIV
  | DOLLAR
  | DOT
  | DOUBLEQUOTE
  | DERIVE
  | DYNAMIC
  | ELSE
  | ENSURES
  | ENUM
  | EOF
  | EQ
  | EQEQ
  | EQUIV
  | EXISTS
  | EXTENDS
  | FALSE
  | FLOAT
  | FORALL
  | GT
  | GTE
  | HASH
  | IDENTIFIER of (string)
  | IF
  | IMPLIES
  | IMPLY
  | IMPORT
  | IN
  | JAVA of (string)
  | LEFTARROW
  | LEMMA
  | LET
  | LITERAL_FLOAT of (float)
  | LITERAL_INTEGER of (int)
  | NOTIN
  | BAGMAX
  | BAGMIN
  | FOLD
  | INT
  | INTERR
  | INTERSECT
  | INV
  | LT
  | LTE
  | MAX
  | MINUS
  | MIN
  | NEQ
  | NEW
  | NOT
  | NULL
  | OBRACE
  | OFF
  | OPAREN
  | ON
  | OP_ADD_ASSIGN
  | OP_DEC
  | OP_DIV_ASSIGN
  | OP_INC
  | OP_MOD_ASSIGN
  | OP_MULT_ASSIGN
  | OP_SUB_ASSIGN
  | OR
  | OROR
  | ORWORD
  | OSQUARE
  | PERCENT
  | PLUS
  | PRED
  | PRIME
  | PRINT
  | REF
  | REQUIRES
  | RES of (string)
  | RETURN
  | RIGHTARROW
  | SELF of (string)
  | SEMICOLON
  | SPLIT
  | STAR
  | STATIC
  | SUBSET
  | THEN
  | THIS of (string)
  | TO
  | TRUE
  | VIEW
  | VOID
  | UNFOLD
  | UNION
  | WHERE
  | WHILE

open Parsing;;
# 2 "sparser.mly"
  (* Parser for a more expressive language *)

  open Globals
  open Iast
  open Sleekcommons

  module F = Iformula
  module P = Ipure

  type type_decl =
	| Data of data_decl
	| Enum of enum_decl
	| View of view_decl
		
  type decl = 
    | Type of type_decl
    | Proc of proc_decl
	| Coercion of coercion_decl
		
  type member = 
	| Field of (typed_ident * loc)
	| Inv of F.formula
	| Method of proc_decl
		
  type spec_qualifier =
	| Static
	| Dynamic 

  type ann =
	| AnnMode of mode
	| AnnType of typ
		
  let get_pos (i : int) = Parsing.rhs_start_pos i

  let rec get_mode (anns : ann list) : mode = match anns with
	| ann :: rest -> begin
		match ann with
		  | AnnMode m -> m
		  | _ -> get_mode rest
	  end
	| [] -> ModeOut (* default to ModeOut if there is no annotation. *)

  let rec get_modes (anns : ann list list) : mode list = 
	match anns with
	  | alist :: rest ->
		  let m_rest = get_modes rest in
		  let m = get_mode alist in
			m :: m_rest
	| [] -> []

	
  let expand_exp_list mk l r pos =
	let b, oe = l in
	  match oe with
		| Some e ->
			let tmp = P.build_relation mk e r pos in
			let res = P.mkAnd b tmp pos in
			  (res, Some r)
		| None -> report_error pos ("parse error in lhs of relational operator")

  let rec split_members mbrs = match mbrs with
	| mbr :: rest -> begin
		let fields, invs, meths = split_members rest in
		  match mbr with
			| Field f -> (f :: fields, invs, meths)
			| Inv i -> (fields, i :: invs, meths)
			| Method m ->
				(fields, invs, m :: meths)
	  end
	| [] -> ([], [], [])

  let rec split_specs specs = match specs with
	| sp :: rest -> begin
		let sspecs, dspecs = split_specs rest in
		  match sp with
			| (Static, pre, post) -> ((pre, post) :: sspecs, dspecs)
			| (Dynamic, pre, post) -> (sspecs, (pre, post) :: dspecs)
	  end
	| [] -> ([], [])

  let rec remove_spec_qualifier (_, pre, post) = (pre, post)
# 205 "sparser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* ANDAND *);
  259 (* ASSERT *);
  260 (* ASSUME *);
  261 (* AT *);
  262 (* BIND *);
  263 (* BOOL *);
  264 (* BREAK *);
  265 (* BY *);
  266 (* CASE *);
  267 (* CBRACE *);
  268 (* CHECKENTAIL *);
  269 (* CLASS *);
  270 (* COERCION *);
  271 (* COLON *);
  272 (* COLONCOLON *);
  273 (* COMMA *);
  274 (* COMPOSE *);
  275 (* CONSEQ *);
  276 (* CONST *);
  277 (* CONTINUE *);
  278 (* CPAREN *);
  279 (* CSQUARE *);
  280 (* DATA *);
  281 (* DDEBUG *);
  282 (* DIFF *);
  283 (* DISTR *);
  284 (* DIV *);
  285 (* DOLLAR *);
  286 (* DOT *);
  287 (* DOUBLEQUOTE *);
  288 (* DERIVE *);
  289 (* DYNAMIC *);
  290 (* ELSE *);
  291 (* ENSURES *);
  292 (* ENUM *);
    0 (* EOF *);
  293 (* EQ *);
  294 (* EQEQ *);
  295 (* EQUIV *);
  296 (* EXISTS *);
  297 (* EXTENDS *);
  298 (* FALSE *);
  299 (* FLOAT *);
  300 (* FORALL *);
  301 (* GT *);
  302 (* GTE *);
  303 (* HASH *);
  305 (* IF *);
  306 (* IMPLIES *);
  307 (* IMPLY *);
  308 (* IMPORT *);
  309 (* IN *);
  311 (* LEFTARROW *);
  312 (* LEMMA *);
  313 (* LET *);
  316 (* NOTIN *);
  317 (* BAGMAX *);
  318 (* BAGMIN *);
  319 (* FOLD *);
  320 (* INT *);
  321 (* INTERR *);
  322 (* INTERSECT *);
  323 (* INV *);
  324 (* LT *);
  325 (* LTE *);
  326 (* MAX *);
  327 (* MINUS *);
  328 (* MIN *);
  329 (* NEQ *);
  330 (* NEW *);
  331 (* NOT *);
  332 (* NULL *);
  333 (* OBRACE *);
  334 (* OFF *);
  335 (* OPAREN *);
  336 (* ON *);
  337 (* OP_ADD_ASSIGN *);
  338 (* OP_DEC *);
  339 (* OP_DIV_ASSIGN *);
  340 (* OP_INC *);
  341 (* OP_MOD_ASSIGN *);
  342 (* OP_MULT_ASSIGN *);
  343 (* OP_SUB_ASSIGN *);
  344 (* OR *);
  345 (* OROR *);
  346 (* ORWORD *);
  347 (* OSQUARE *);
  348 (* PERCENT *);
  349 (* PLUS *);
  350 (* PRED *);
  351 (* PRIME *);
  352 (* PRINT *);
  353 (* REF *);
  354 (* REQUIRES *);
  356 (* RETURN *);
  357 (* RIGHTARROW *);
  359 (* SEMICOLON *);
  360 (* SPLIT *);
  361 (* STAR *);
  362 (* STATIC *);
  363 (* SUBSET *);
  364 (* THEN *);
  366 (* TO *);
  367 (* TRUE *);
  368 (* VIEW *);
  369 (* VOID *);
  370 (* UNFOLD *);
  371 (* UNION *);
  372 (* WHERE *);
  373 (* WHILE *);
    0|]

let yytransl_block = [|
  304 (* IDENTIFIER *);
  310 (* JAVA *);
  314 (* LITERAL_FLOAT *);
  315 (* LITERAL_INTEGER *);
  355 (* RES *);
  358 (* SELF *);
  365 (* THIS *);
    0|]

let yylhs = "\255\255\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\001\000\
\010\000\010\000\011\000\011\000\012\000\012\000\013\000\013\000\
\013\000\013\000\014\000\016\000\016\000\017\000\017\000\018\000\
\018\000\019\000\019\000\019\000\019\000\002\000\023\000\024\000\
\025\000\025\000\027\000\027\000\026\000\026\000\015\000\028\000\
\029\000\030\000\030\000\031\000\031\000\003\000\003\000\034\000\
\034\000\032\000\037\000\037\000\037\000\037\000\037\000\033\000\
\038\000\039\000\039\000\040\000\042\000\042\000\043\000\043\000\
\044\000\045\000\045\000\046\000\046\000\036\000\036\000\047\000\
\047\000\048\000\049\000\049\000\050\000\050\000\051\000\051\000\
\005\000\052\000\052\000\052\000\053\000\053\000\054\000\054\000\
\054\000\055\000\055\000\056\000\056\000\035\000\035\000\058\000\
\058\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\062\000\062\000\061\000\063\000\063\000\021\000\021\000\064\000\
\064\000\022\000\022\000\068\000\008\000\070\000\070\000\009\000\
\009\000\007\000\069\000\069\000\069\000\004\000\073\000\073\000\
\073\000\072\000\072\000\067\000\067\000\074\000\074\000\075\000\
\075\000\075\000\076\000\076\000\076\000\066\000\066\000\077\000\
\077\000\078\000\079\000\080\000\080\000\065\000\020\000\020\000\
\082\000\082\000\082\000\082\000\083\000\083\000\084\000\085\000\
\085\000\086\000\086\000\081\000\087\000\087\000\088\000\088\000\
\088\000\089\000\089\000\090\000\090\000\094\000\092\000\093\000\
\095\000\095\000\097\000\097\000\098\000\096\000\096\000\100\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\091\000\091\000\091\000\091\000\112\000\108\000\108\000\108\000\
\110\000\110\000\109\000\109\000\102\000\111\000\113\000\113\000\
\071\000\071\000\106\000\103\000\114\000\114\000\114\000\114\000\
\114\000\114\000\114\000\104\000\123\000\122\000\122\000\105\000\
\125\000\125\000\107\000\107\000\107\000\127\000\128\000\126\000\
\129\000\129\000\116\000\130\000\132\000\131\000\131\000\133\000\
\133\000\134\000\099\000\099\000\101\000\124\000\117\000\117\000\
\117\000\117\000\117\000\117\000\135\000\135\000\137\000\137\000\
\138\000\138\000\139\000\140\000\141\000\142\000\142\000\142\000\
\143\000\143\000\143\000\143\000\143\000\144\000\145\000\145\000\
\145\000\146\000\146\000\146\000\146\000\136\000\120\000\121\000\
\118\000\119\000\147\000\147\000\147\000\147\000\147\000\149\000\
\149\000\149\000\150\000\150\000\150\000\151\000\151\000\151\000\
\151\000\115\000\115\000\152\000\153\000\154\000\154\000\154\000\
\154\000\157\000\156\000\155\000\155\000\148\000\148\000\158\000\
\159\000\159\000\159\000\159\000\159\000\160\000\160\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\
\000\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\006\000\000\000\002\000\000\000\001\000\001\000\
\002\000\003\000\003\000\001\000\001\000\002\000\002\000\003\000\
\000\000\002\000\000\000\001\000\002\000\004\000\002\000\002\000\
\003\000\001\000\003\000\001\000\003\000\004\000\003\000\000\000\
\002\000\005\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\001\000\000\000\001\000\001\000\003\000\
\003\000\000\000\001\000\001\000\003\000\000\000\001\000\001\000\
\003\000\002\000\000\000\001\000\001\000\002\000\002\000\002\000\
\001\000\001\000\003\000\001\000\001\000\006\000\001\000\001\000\
\003\000\001\000\003\000\006\000\006\000\001\000\003\000\003\000\
\003\000\001\000\003\000\006\000\006\000\001\000\001\000\001\000\
\002\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\006\000\001\000\001\000\002\000\003\000\003\000\
\002\000\006\000\006\000\001\000\003\000\004\000\004\000\006\000\
\000\000\001\000\001\000\001\000\003\000\002\000\001\000\006\000\
\006\000\002\000\001\000\005\000\004\000\009\000\006\000\002\000\
\003\000\005\000\002\000\001\000\001\000\005\000\001\000\001\000\
\001\000\000\000\003\000\000\000\001\000\001\000\002\000\006\000\
\004\000\004\000\000\000\001\000\001\000\000\000\001\000\001\000\
\003\000\001\000\003\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\003\000\000\000\
\001\000\001\000\002\000\003\000\000\000\001\000\001\000\002\000\
\001\000\001\000\001\000\002\000\002\000\001\000\002\000\003\000\
\001\000\003\000\003\000\001\000\001\000\001\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\004\000\003\000\
\002\000\002\000\002\000\003\000\001\000\008\000\000\000\001\000\
\001\000\003\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\005\000\007\000\001\000\
\005\000\008\000\001\000\001\000\001\000\002\000\002\000\003\000\
\000\000\001\000\001\000\005\000\001\000\000\000\001\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\005\000\001\000\003\000\
\001\000\003\000\001\000\001\000\001\000\001\000\003\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\001\000\003\000\
\003\000\001\000\003\000\003\000\003\000\001\000\002\000\002\000\
\002\000\002\000\001\000\002\000\002\000\001\000\001\000\001\000\
\002\000\001\000\001\000\001\000\001\000\004\000\004\000\004\000\
\004\000\004\000\004\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\096\001\
\000\000\097\001\000\000\000\000\098\001\000\000\000\000\099\001\
\084\000\000\000\000\000\103\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\
\000\000\053\000\054\000\055\000\102\000\000\000\100\001\000\000\
\000\000\000\000\000\000\082\000\085\000\000\000\090\000\094\000\
\000\000\106\000\000\000\000\000\000\000\000\000\000\000\001\000\
\002\000\003\000\101\001\004\000\005\000\006\000\031\000\000\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\126\000\000\000\000\000\000\000\000\000\124\000\
\129\000\000\000\105\000\000\000\138\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\156\000\000\000\157\000\
\000\000\000\000\152\000\187\000\186\000\188\000\185\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\056\000\000\000\
\000\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\133\000\000\000\000\000\099\000\
\000\000\000\000\095\000\000\000\000\000\000\000\128\000\127\000\
\000\000\083\000\000\000\000\000\091\000\108\000\111\000\112\000\
\109\000\110\000\107\000\117\000\115\000\116\000\113\000\114\000\
\118\000\000\000\000\000\000\000\155\000\000\000\000\000\153\000\
\037\000\032\000\000\000\034\000\000\000\190\000\189\000\000\000\
\000\000\000\000\072\000\000\000\046\000\163\000\160\000\159\000\
\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\135\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\
\000\000\241\000\000\000\149\000\000\000\000\000\194\000\000\000\
\000\000\050\000\000\000\074\000\000\000\077\000\000\000\000\000\
\158\000\000\000\000\000\069\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\000\000\063\000\000\000\000\000\000\000\154\000\038\000\191\000\
\195\000\080\000\079\000\078\000\073\000\136\000\100\000\101\000\
\122\000\123\000\130\000\131\000\086\000\000\000\092\000\000\000\
\093\000\000\000\000\000\242\000\000\000\000\000\059\000\000\000\
\064\000\151\000\000\000\000\000\000\000\150\000"

let yydgoto = "\007\000\
\008\000\010\000\013\000\016\000\118\000\059\000\060\000\061\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\000\000\000\000\000\011\000\065\000\
\129\000\130\000\188\000\000\000\000\000\000\000\000\000\014\000\
\136\000\197\000\040\000\192\000\080\000\244\000\245\000\246\000\
\042\000\248\000\249\000\250\000\141\000\142\000\194\000\195\000\
\228\000\229\000\230\000\043\000\044\000\045\000\046\000\047\000\
\048\000\091\000\049\000\050\000\051\000\086\000\052\000\000\000\
\000\000\000\000\000\000\000\000\119\000\120\000\219\000\070\000\
\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\131\000\132\000\190\000\224\000\225\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yysindex = "\204\001\
\000\000\254\254\206\254\253\254\067\002\000\255\000\000\000\000\
\021\255\000\000\027\255\058\255\000\000\089\255\098\255\000\000\
\000\000\051\255\054\255\000\000\062\255\052\255\070\255\067\255\
\074\255\075\255\076\255\066\255\080\255\070\255\000\000\066\255\
\177\002\000\000\000\000\000\000\000\000\085\255\000\000\149\255\
\001\255\199\254\083\255\000\000\000\000\006\255\000\000\000\000\
\162\255\000\000\218\255\144\255\003\002\141\255\250\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\255\
\000\000\106\255\178\255\067\002\135\255\067\002\066\255\070\255\
\070\255\000\000\000\000\070\255\070\255\066\255\066\255\000\000\
\000\000\066\255\000\000\203\254\000\000\173\255\112\255\219\002\
\005\255\068\255\244\254\066\255\219\002\138\255\066\255\066\255\
\066\255\066\255\066\255\005\003\219\002\070\255\066\255\066\255\
\066\255\066\255\066\255\066\255\066\255\066\255\066\255\066\255\
\066\255\066\255\066\255\210\254\139\255\000\000\157\255\000\000\
\142\255\145\255\000\000\000\000\000\000\000\000\000\000\148\255\
\187\255\110\255\118\255\118\255\070\255\000\000\000\000\150\255\
\184\255\233\254\002\255\000\000\201\255\205\255\208\255\210\255\
\211\255\196\255\008\255\009\255\000\000\219\255\219\002\000\000\
\219\002\198\255\000\000\168\255\203\254\203\254\000\000\000\000\
\203\254\000\000\149\255\209\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\203\254\003\002\185\255\000\000\003\002\213\255\000\000\
\000\000\000\000\128\255\000\000\234\255\000\000\000\000\212\255\
\247\255\236\255\000\000\219\002\000\000\000\000\000\000\000\000\
\000\000\067\002\066\255\219\002\070\255\219\002\070\255\070\255\
\000\000\066\255\066\255\219\002\149\255\149\255\000\000\086\255\
\151\255\000\000\029\255\000\000\003\002\217\255\000\000\237\255\
\242\255\000\000\238\254\000\000\247\255\000\000\070\255\149\255\
\000\000\245\254\239\255\000\000\244\255\245\255\248\255\016\255\
\026\255\249\255\012\255\224\255\003\000\000\000\203\254\232\255\
\005\000\000\000\003\002\233\255\206\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\255\000\000\066\255\
\000\000\240\255\002\000\000\000\003\002\203\254\000\000\253\255\
\000\000\000\000\181\255\003\002\014\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\037\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\135\002\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\182\000\071\255\232\000\000\000\000\000\084\000\000\000\000\000\
\058\000\000\000\000\000\052\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\224\000\000\000\000\000\027\000\000\000\
\000\000\123\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\142\255\145\255\004\000\000\000\000\000\045\001\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\001\117\001\000\000\000\000\
\142\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\032\000\000\000\000\000\000\000\
\248\254\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\249\254\017\255\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\000\000\010\255\000\000\000\000\058\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\252\254\000\000\015\000\000\000\045\255\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\103\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\057\001\060\001\061\001\251\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\133\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\227\255\000\000\254\255\000\000\000\000\055\000\
\143\002\000\000\000\000\060\000\203\255\000\000\000\000\098\000\
\000\000\000\000\103\000\000\000\235\000\126\000\000\000\237\000\
\165\255\000\000\000\000\000\000\134\000\207\255\000\000\000\000\
\000\000\000\000\000\000\000\000\082\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\208\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1144
let yytable = "\039\000\
\051\000\155\000\041\000\089\000\217\000\093\000\101\000\220\000\
\075\000\152\000\006\001\053\000\051\000\097\000\096\000\199\000\
\094\000\097\000\203\000\143\000\075\000\009\000\122\000\009\000\
\210\000\211\000\076\000\083\000\146\000\002\001\090\000\200\000\
\179\000\150\000\003\001\098\000\075\000\011\001\097\000\098\000\
\051\000\123\000\154\000\012\000\180\000\252\000\254\000\012\001\
\014\001\099\000\041\000\253\000\015\000\095\000\076\000\015\000\
\054\000\098\000\089\000\097\000\096\000\060\000\135\000\125\000\
\138\000\041\000\051\000\041\000\063\000\140\000\140\000\163\000\
\097\000\144\000\145\000\153\000\019\001\201\000\097\000\097\000\
\096\000\098\000\088\000\087\000\140\000\090\000\097\000\140\000\
\051\000\060\000\090\000\018\000\151\000\012\000\098\000\055\000\
\097\000\041\000\090\000\164\000\098\000\098\000\027\001\064\000\
\097\000\066\000\074\000\140\000\098\000\029\001\102\000\018\000\
\235\000\022\000\237\000\140\000\140\000\022\000\098\000\065\000\
\095\000\213\000\104\000\214\000\023\000\067\000\068\000\096\000\
\069\000\071\000\193\000\026\000\072\000\243\000\124\000\027\000\
\028\000\029\000\140\000\140\000\073\000\031\000\032\000\140\000\
\023\000\076\000\074\000\065\000\090\000\093\000\090\000\026\000\
\077\000\078\000\079\000\027\000\028\000\029\000\082\000\022\000\
\115\000\031\000\032\000\092\000\034\000\085\000\232\000\035\000\
\034\000\121\000\125\000\035\000\100\000\133\000\036\000\126\000\
\041\000\134\000\036\000\041\000\038\000\104\000\137\000\149\000\
\034\000\156\000\181\000\035\000\182\000\183\000\072\000\127\000\
\184\000\090\000\036\000\185\000\233\000\186\000\103\000\041\000\
\038\000\090\000\236\000\090\000\238\000\239\000\104\000\105\000\
\189\000\041\000\034\000\085\000\187\000\035\000\198\000\204\000\
\196\000\209\000\041\000\215\000\036\000\205\000\206\000\140\000\
\094\000\085\000\207\000\208\000\193\000\106\000\107\000\081\000\
\218\000\212\000\108\000\216\000\166\000\167\000\168\000\169\000\
\170\000\171\000\172\000\173\000\174\000\175\000\176\000\177\000\
\041\000\221\000\223\000\227\000\231\000\251\000\109\000\089\000\
\226\000\051\000\001\001\000\001\007\001\051\000\110\000\111\000\
\255\000\008\001\009\001\051\000\015\001\010\001\013\001\051\000\
\051\000\051\000\041\000\016\001\017\001\018\001\051\000\026\001\
\020\001\041\000\141\000\028\001\021\001\112\000\113\000\024\001\
\051\000\014\001\114\000\030\001\007\000\051\000\137\000\051\000\
\033\000\066\000\137\000\035\000\048\000\051\000\051\000\036\000\
\070\000\067\000\071\000\139\000\061\000\051\000\192\000\051\000\
\193\000\049\000\098\000\057\000\051\000\062\000\056\000\222\000\
\125\000\057\000\058\000\051\000\051\000\051\000\023\001\051\000\
\005\001\051\000\125\000\004\001\119\000\025\001\162\000\098\000\
\125\000\242\000\165\000\191\000\000\000\125\000\000\000\000\000\
\051\000\098\000\051\000\000\000\000\000\051\000\000\000\125\000\
\098\000\000\000\000\000\000\000\125\000\051\000\125\000\051\000\
\088\000\087\000\000\000\051\000\125\000\125\000\000\000\000\000\
\098\000\000\000\088\000\087\000\120\000\000\000\125\000\000\000\
\000\000\088\000\087\000\104\000\098\000\000\000\000\000\000\000\
\000\000\000\000\125\000\125\000\125\000\000\000\125\000\000\000\
\125\000\088\000\087\000\124\000\000\000\121\000\000\000\000\000\
\104\000\098\000\000\000\098\000\000\000\088\000\087\000\125\000\
\000\000\125\000\104\000\000\000\125\000\000\000\098\000\124\000\
\098\000\104\000\000\000\000\000\125\000\000\000\125\000\124\000\
\124\000\000\000\125\000\000\000\088\000\087\000\000\000\000\000\
\000\000\104\000\000\000\000\000\000\000\000\000\104\000\088\000\
\087\000\088\000\087\000\000\000\000\000\104\000\124\000\124\000\
\000\000\124\000\000\000\124\000\000\000\000\000\124\000\000\000\
\000\000\000\000\000\000\104\000\001\000\002\000\003\000\004\000\
\005\000\006\000\104\000\000\000\104\000\104\000\000\000\124\000\
\000\000\000\000\124\000\000\000\104\000\000\000\000\000\104\000\
\140\000\104\000\124\000\124\000\000\000\124\000\000\000\000\000\
\000\000\000\000\140\000\000\000\104\000\000\000\000\000\000\000\
\140\000\000\000\000\000\000\000\000\000\140\000\000\000\000\000\
\104\000\124\000\124\000\000\000\124\000\081\000\124\000\140\000\
\000\000\000\000\000\000\000\000\140\000\000\000\140\000\081\000\
\000\000\000\000\000\000\000\000\140\000\140\000\081\000\104\000\
\000\000\000\000\124\000\000\000\000\000\089\000\140\000\000\000\
\000\000\000\000\104\000\141\000\104\000\000\000\081\000\089\000\
\124\000\000\000\140\000\140\000\140\000\141\000\089\000\000\000\
\140\000\000\000\081\000\141\000\000\000\000\000\000\000\000\000\
\141\000\000\000\000\000\000\000\139\000\000\000\089\000\140\000\
\000\000\140\000\141\000\000\000\000\000\000\000\139\000\141\000\
\000\000\141\000\089\000\000\000\140\000\000\000\140\000\141\000\
\141\000\139\000\000\000\000\000\081\000\119\000\081\000\000\000\
\000\000\141\000\000\000\139\000\000\000\000\000\000\000\000\000\
\139\000\089\000\139\000\000\000\000\000\141\000\141\000\141\000\
\139\000\139\000\119\000\141\000\089\000\000\000\089\000\000\000\
\000\000\000\000\139\000\000\000\119\000\000\000\000\000\000\000\
\000\000\119\000\141\000\119\000\141\000\120\000\139\000\139\000\
\139\000\119\000\119\000\000\000\139\000\000\000\000\000\141\000\
\000\000\141\000\000\000\119\000\000\000\000\000\000\000\000\000\
\000\000\000\000\120\000\139\000\000\000\139\000\121\000\119\000\
\119\000\119\000\000\000\000\000\120\000\119\000\000\000\000\000\
\139\000\120\000\139\000\120\000\000\000\000\000\000\000\000\000\
\000\000\120\000\120\000\121\000\119\000\000\000\119\000\000\000\
\000\000\000\000\081\000\120\000\000\000\121\000\084\000\000\000\
\000\000\119\000\121\000\119\000\121\000\000\000\000\000\120\000\
\120\000\120\000\121\000\121\000\000\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\121\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\120\000\000\000\120\000\000\000\
\121\000\121\000\121\000\000\000\000\000\139\000\121\000\000\000\
\000\000\120\000\000\000\120\000\084\000\147\000\000\000\000\000\
\148\000\000\000\000\000\000\000\000\000\121\000\000\000\121\000\
\000\000\000\000\084\000\000\000\000\000\157\000\158\000\159\000\
\160\000\161\000\121\000\000\000\121\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\178\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\116\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\117\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\020\000\000\000\021\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\024\000\
\025\000\000\000\017\000\000\000\026\000\000\000\000\000\000\000\
\027\000\028\000\029\000\000\000\000\000\030\000\031\000\032\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\234\000\000\000\000\000\018\000\000\000\000\000\000\000\
\240\000\241\000\000\000\000\000\000\000\034\000\247\000\000\000\
\035\000\000\000\019\000\000\000\020\000\000\000\021\000\036\000\
\000\000\037\000\022\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\024\000\
\025\000\000\000\000\000\000\000\026\000\000\000\162\000\000\000\
\027\000\028\000\029\000\000\000\000\000\030\000\031\000\032\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\001\000\000\247\000\000\000\
\162\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\162\000\036\000\
\162\000\037\000\162\000\000\000\000\000\038\000\162\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\162\000\000\000\162\000\162\000\000\000\000\000\000\000\
\162\000\000\000\018\000\000\000\162\000\162\000\162\000\000\000\
\000\000\162\000\162\000\162\000\000\000\162\000\000\000\000\000\
\087\000\000\000\020\000\000\000\021\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\162\000\000\000\023\000\162\000\024\000\025\000\000\000\
\000\000\000\000\026\000\162\000\018\000\162\000\027\000\028\000\
\029\000\162\000\000\000\030\000\031\000\032\000\000\000\088\000\
\000\000\000\000\019\000\000\000\020\000\000\000\021\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\023\000\035\000\024\000\
\025\000\000\000\000\000\000\000\026\000\036\000\018\000\037\000\
\027\000\028\000\029\000\038\000\000\000\030\000\031\000\032\000\
\000\000\088\000\000\000\000\000\019\000\000\000\020\000\000\000\
\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\023\000\
\035\000\024\000\025\000\000\000\000\000\000\000\026\000\036\000\
\000\000\037\000\027\000\028\000\029\000\038\000\000\000\030\000\
\031\000\032\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\037\000\000\000\000\000\000\000\038\000"

let yycheck = "\005\000\
\000\000\093\000\005\000\033\000\179\000\001\001\001\001\182\000\
\017\001\022\001\022\001\012\001\017\001\071\001\022\001\039\001\
\016\001\071\001\017\001\073\000\023\000\024\001\029\001\024\001\
\017\001\017\001\017\001\030\000\078\000\048\001\033\000\055\001\
\079\001\087\000\053\001\093\001\045\001\022\001\022\001\093\001\
\045\001\048\001\092\000\094\001\091\001\017\001\221\000\022\001\
\037\001\107\001\053\000\023\001\056\001\053\001\045\001\056\001\
\057\001\000\000\088\000\071\001\060\001\017\001\068\000\000\000\
\070\000\068\000\071\001\070\000\048\001\072\000\073\000\101\000\
\071\001\076\000\077\000\088\001\251\000\101\001\071\001\071\001\
\088\001\093\001\000\000\000\000\087\000\088\000\071\001\017\001\
\093\001\045\001\093\000\026\001\088\001\094\001\093\001\096\001\
\071\001\100\000\101\000\102\000\093\001\093\001\021\001\077\001\
\088\001\048\001\095\001\037\001\093\001\028\001\105\001\026\001\
\204\000\048\001\206\000\045\001\046\001\048\001\093\001\017\001\
\053\001\151\000\000\000\153\000\059\001\037\001\038\001\060\001\
\031\001\079\001\133\000\066\001\079\001\048\001\007\001\070\001\
\071\001\072\001\068\001\069\001\079\001\076\001\077\001\073\001\
\059\001\079\001\095\001\045\001\151\000\001\001\153\000\066\001\
\079\001\079\001\079\001\070\001\071\001\072\001\079\001\048\001\
\017\001\076\001\077\001\079\001\099\001\032\000\196\000\102\001\
\099\001\029\001\043\001\102\001\090\001\068\001\109\001\048\001\
\179\000\000\001\109\001\182\000\115\001\000\000\048\001\011\001\
\099\001\048\001\048\001\102\001\032\001\048\001\079\001\064\001\
\048\001\196\000\109\001\048\001\202\000\011\001\037\001\202\000\
\115\001\204\000\205\000\206\000\207\000\208\000\045\001\046\001\
\091\001\212\000\099\001\078\000\103\001\102\001\031\001\015\001\
\067\001\022\001\221\000\022\001\109\001\017\001\015\001\000\000\
\016\001\092\000\017\001\017\001\231\000\068\001\069\001\000\000\
\048\001\015\001\073\001\068\001\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\251\000\037\001\017\001\005\001\017\001\103\001\037\001\000\000\
\045\001\001\001\017\001\023\001\022\001\005\001\045\001\046\001\
\048\001\022\001\022\001\011\001\045\001\022\001\022\001\015\001\
\016\001\017\001\021\001\017\001\045\001\017\001\022\001\022\001\
\048\001\028\001\000\000\103\001\079\001\068\001\069\001\048\001\
\032\001\037\001\073\001\022\001\000\000\037\001\011\001\039\001\
\011\001\015\001\022\001\011\001\000\000\045\001\046\001\011\001\
\045\001\015\001\045\001\000\000\045\001\053\001\023\001\055\001\
\023\001\000\000\001\001\045\001\060\001\045\001\006\000\187\000\
\001\001\006\000\006\000\067\001\068\001\069\001\016\001\071\001\
\231\000\073\001\011\001\229\000\000\000\018\001\100\000\022\001\
\017\001\212\000\102\000\132\000\255\255\022\001\255\255\255\255\
\088\001\032\001\090\001\255\255\255\255\093\001\255\255\032\001\
\039\001\255\255\255\255\255\255\037\001\101\001\039\001\103\001\
\022\001\022\001\255\255\107\001\045\001\046\001\255\255\255\255\
\055\001\255\255\032\001\032\001\000\000\255\255\055\001\255\255\
\255\255\039\001\039\001\001\001\067\001\255\255\255\255\255\255\
\255\255\255\255\067\001\068\001\069\001\255\255\071\001\255\255\
\073\001\055\001\055\001\017\001\255\255\000\000\255\255\255\255\
\022\001\088\001\255\255\090\001\255\255\067\001\067\001\088\001\
\255\255\090\001\032\001\255\255\093\001\255\255\101\001\037\001\
\103\001\039\001\255\255\255\255\101\001\255\255\103\001\045\001\
\046\001\255\255\107\001\255\255\090\001\090\001\255\255\255\255\
\255\255\055\001\255\255\255\255\255\255\255\255\001\001\101\001\
\101\001\103\001\103\001\255\255\255\255\067\001\068\001\069\001\
\255\255\071\001\255\255\073\001\255\255\255\255\017\001\255\255\
\255\255\255\255\255\255\022\001\001\000\002\000\003\000\004\000\
\005\000\006\000\088\001\255\255\090\001\032\001\255\255\093\001\
\255\255\255\255\037\001\255\255\039\001\255\255\255\255\101\001\
\001\001\103\001\045\001\046\001\255\255\107\001\255\255\255\255\
\255\255\255\255\011\001\255\255\055\001\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\067\001\068\001\069\001\255\255\071\001\022\001\073\001\032\001\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\032\001\
\255\255\255\255\255\255\255\255\045\001\046\001\039\001\090\001\
\255\255\255\255\093\001\255\255\255\255\022\001\055\001\255\255\
\255\255\255\255\101\001\001\001\103\001\255\255\055\001\032\001\
\107\001\255\255\067\001\068\001\069\001\011\001\039\001\255\255\
\073\001\255\255\067\001\017\001\255\255\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\001\001\255\255\055\001\088\001\
\255\255\090\001\032\001\255\255\255\255\255\255\011\001\037\001\
\255\255\039\001\067\001\255\255\101\001\255\255\103\001\045\001\
\046\001\022\001\255\255\255\255\101\001\001\001\103\001\255\255\
\255\255\055\001\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\090\001\039\001\255\255\255\255\067\001\068\001\069\001\
\045\001\046\001\022\001\073\001\101\001\255\255\103\001\255\255\
\255\255\255\255\055\001\255\255\032\001\255\255\255\255\255\255\
\255\255\037\001\088\001\039\001\090\001\001\001\067\001\068\001\
\069\001\045\001\046\001\255\255\073\001\255\255\255\255\101\001\
\255\255\103\001\255\255\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\088\001\255\255\090\001\001\001\067\001\
\068\001\069\001\255\255\255\255\032\001\073\001\255\255\255\255\
\101\001\037\001\103\001\039\001\255\255\255\255\255\255\255\255\
\255\255\045\001\046\001\022\001\088\001\255\255\090\001\255\255\
\255\255\255\255\028\000\055\001\255\255\032\001\032\000\255\255\
\255\255\101\001\037\001\103\001\039\001\255\255\255\255\067\001\
\068\001\069\001\045\001\046\001\255\255\073\001\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\088\001\255\255\090\001\255\255\
\067\001\068\001\069\001\255\255\255\255\071\000\073\001\255\255\
\255\255\101\001\255\255\103\001\078\000\079\000\255\255\255\255\
\082\000\255\255\255\255\255\255\255\255\088\001\255\255\090\001\
\255\255\255\255\092\000\255\255\255\255\095\000\096\000\097\000\
\098\000\099\000\101\001\255\255\103\001\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\000\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\042\001\255\255\044\001\255\255\
\255\255\255\255\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\255\255\061\001\
\062\001\255\255\000\001\255\255\066\001\255\255\255\255\255\255\
\070\001\071\001\072\001\255\255\255\255\075\001\076\001\077\001\
\255\255\079\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\203\000\255\255\255\255\026\001\255\255\255\255\255\255\
\210\000\211\000\255\255\255\255\255\255\099\001\216\000\255\255\
\102\001\255\255\040\001\255\255\042\001\255\255\044\001\109\001\
\255\255\111\001\048\001\255\255\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\255\255\061\001\
\062\001\255\255\255\255\255\255\066\001\255\255\000\001\255\255\
\070\001\071\001\072\001\255\255\255\255\075\001\076\001\077\001\
\255\255\079\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\014\001\255\255\016\001\255\255\
\026\001\255\255\255\255\255\255\255\255\099\001\255\255\255\255\
\102\001\255\255\255\255\255\255\255\255\255\255\040\001\109\001\
\042\001\111\001\044\001\255\255\255\255\115\001\048\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\062\001\255\255\255\255\255\255\
\066\001\255\255\026\001\255\255\070\001\071\001\072\001\255\255\
\255\255\075\001\076\001\077\001\255\255\079\001\255\255\255\255\
\040\001\255\255\042\001\255\255\044\001\255\255\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\255\255\059\001\102\001\061\001\062\001\255\255\
\255\255\255\255\066\001\109\001\026\001\111\001\070\001\071\001\
\072\001\115\001\255\255\075\001\076\001\077\001\255\255\079\001\
\255\255\255\255\040\001\255\255\042\001\255\255\044\001\255\255\
\255\255\255\255\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\099\001\255\255\059\001\102\001\061\001\
\062\001\255\255\255\255\255\255\066\001\109\001\026\001\111\001\
\070\001\071\001\072\001\115\001\255\255\075\001\076\001\077\001\
\255\255\079\001\255\255\255\255\040\001\255\255\042\001\255\255\
\044\001\255\255\255\255\255\255\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\099\001\255\255\059\001\
\102\001\061\001\062\001\255\255\255\255\255\255\066\001\109\001\
\255\255\111\001\070\001\071\001\072\001\115\001\255\255\075\001\
\076\001\077\001\255\255\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\099\001\
\255\255\255\255\102\001\255\255\255\255\255\255\255\255\255\255\
\255\255\109\001\255\255\111\001\255\255\255\255\255\255\115\001"

let yynames_const = "\
  AND\000\
  ANDAND\000\
  ASSERT\000\
  ASSUME\000\
  AT\000\
  BIND\000\
  BOOL\000\
  BREAK\000\
  BY\000\
  CASE\000\
  CBRACE\000\
  CHECKENTAIL\000\
  CLASS\000\
  COERCION\000\
  COLON\000\
  COLONCOLON\000\
  COMMA\000\
  COMPOSE\000\
  CONSEQ\000\
  CONST\000\
  CONTINUE\000\
  CPAREN\000\
  CSQUARE\000\
  DATA\000\
  DDEBUG\000\
  DIFF\000\
  DISTR\000\
  DIV\000\
  DOLLAR\000\
  DOT\000\
  DOUBLEQUOTE\000\
  DERIVE\000\
  DYNAMIC\000\
  ELSE\000\
  ENSURES\000\
  ENUM\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EQUIV\000\
  EXISTS\000\
  EXTENDS\000\
  FALSE\000\
  FLOAT\000\
  FORALL\000\
  GT\000\
  GTE\000\
  HASH\000\
  IF\000\
  IMPLIES\000\
  IMPLY\000\
  IMPORT\000\
  IN\000\
  LEFTARROW\000\
  LEMMA\000\
  LET\000\
  NOTIN\000\
  BAGMAX\000\
  BAGMIN\000\
  FOLD\000\
  INT\000\
  INTERR\000\
  INTERSECT\000\
  INV\000\
  LT\000\
  LTE\000\
  MAX\000\
  MINUS\000\
  MIN\000\
  NEQ\000\
  NEW\000\
  NOT\000\
  NULL\000\
  OBRACE\000\
  OFF\000\
  OPAREN\000\
  ON\000\
  OP_ADD_ASSIGN\000\
  OP_DEC\000\
  OP_DIV_ASSIGN\000\
  OP_INC\000\
  OP_MOD_ASSIGN\000\
  OP_MULT_ASSIGN\000\
  OP_SUB_ASSIGN\000\
  OR\000\
  OROR\000\
  ORWORD\000\
  OSQUARE\000\
  PERCENT\000\
  PLUS\000\
  PRED\000\
  PRIME\000\
  PRINT\000\
  REF\000\
  REQUIRES\000\
  RETURN\000\
  RIGHTARROW\000\
  SEMICOLON\000\
  SPLIT\000\
  STAR\000\
  STATIC\000\
  SUBSET\000\
  THEN\000\
  TO\000\
  TRUE\000\
  VIEW\000\
  VOID\000\
  UNFOLD\000\
  UNION\000\
  WHERE\000\
  WHILE\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  JAVA\000\
  LITERAL_FLOAT\000\
  LITERAL_INTEGER\000\
  RES\000\
  SELF\000\
  THIS\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : data_decl) in
    Obj.repr(
# 232 "sparser.mly"
              (
	DataDef _1
  )
# 1006 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : view_decl) in
    Obj.repr(
# 235 "sparser.mly"
              (
	  PredDef _1
	)
# 1015 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : coercion_decl) in
    Obj.repr(
# 238 "sparser.mly"
                  (
	  LemmaDef _1
	)
# 1024 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_decl) in
    Obj.repr(
# 241 "sparser.mly"
             (
	  _1
	)
# 1033 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'checkentail_cmd) in
    Obj.repr(
# 244 "sparser.mly"
                    (
	  EntailCheck _1
	)
# 1042 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'print_cmd) in
    Obj.repr(
# 247 "sparser.mly"
              (
	  PrintCmd _1
	)
# 1051 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "sparser.mly"
    ( EmptyCmd )
# 1057 "sparser.ml"
               : command))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "sparser.mly"
          (
  { prog_data_decls = [];
	prog_enum_decls = [];
	prog_view_decls = [];
	prog_proc_decls = [];
	prog_coercion_decls = []; }
)
# 1069 "sparser.ml"
               : prog_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "sparser.mly"
    ( [] )
# 1075 "sparser.ml"
               : 'opt_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list) in
    Obj.repr(
# 301 "sparser.mly"
              ( List.rev _1 )
# 1082 "sparser.ml"
               : 'opt_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 305 "sparser.mly"
         ( [_1] )
# 1089 "sparser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 306 "sparser.mly"
                   ( _2 :: _1 )
# 1097 "sparser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_decl) in
    Obj.repr(
# 310 "sparser.mly"
              ( Type _1 )
# 1104 "sparser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : coercion_decl) in
    Obj.repr(
# 312 "sparser.mly"
                  ( Coercion _1 )
# 1111 "sparser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : data_decl) in
    Obj.repr(
# 316 "sparser.mly"
              ( Data _1 )
# 1118 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_decl) in
    Obj.repr(
# 317 "sparser.mly"
               ( Data _1 )
# 1125 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_decl) in
    Obj.repr(
# 318 "sparser.mly"
              ( Enum _1 )
# 1132 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : view_decl) in
    Obj.repr(
# 319 "sparser.mly"
              ( View _1 )
# 1139 "sparser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'extends_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'member_list_opt) in
    Obj.repr(
# 323 "sparser.mly"
                                                               (
	let t1, t2, t3 = split_members _5 in
	let cdef = { data_name = _2;
				 data_parent_name = _3;
				 data_fields = t1;
				 data_invs = t2; (*List.fold_left 
							   (fun f1 -> fun f2 -> F.mkAnd f1 f2 (F.pos_of_formula f2)) (F.mkTrue (get_pos 1)) *) 
				 data_methods = t3 } in
	let _ = List.map (fun d -> set_proc_data_decl d cdef) t3 in
	  cdef
  )
# 1158 "sparser.ml"
               : 'class_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 337 "sparser.mly"
    ( "Object" )
# 1164 "sparser.ml"
               : 'extends_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 338 "sparser.mly"
                       ( _2 )
# 1171 "sparser.ml"
               : 'extends_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "sparser.mly"
    ( [] )
# 1177 "sparser.ml"
               : 'member_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member_list) in
    Obj.repr(
# 343 "sparser.mly"
                ( List.rev _1 )
# 1184 "sparser.ml"
               : 'member_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member) in
    Obj.repr(
# 347 "sparser.mly"
           ( [_1] )
# 1191 "sparser.ml"
               : 'member_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'member_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'member) in
    Obj.repr(
# 348 "sparser.mly"
                       ( _2 :: _1 )
# 1199 "sparser.ml"
               : 'member_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 352 "sparser.mly"
                             ( Field ((_1, _2), get_pos 2) )
# 1207 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 353 "sparser.mly"
                         ( Inv _2 )
# 1214 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_decl) in
    Obj.repr(
# 354 "sparser.mly"
              ( Method _1 )
# 1221 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_decl) in
    Obj.repr(
# 355 "sparser.mly"
                     ( Method _1 )
# 1228 "sparser.ml"
               : 'member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'data_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'data_body) in
    Obj.repr(
# 359 "sparser.mly"
                          (
	  { data_name = _1;
		data_fields = _2;
		data_parent_name = "Object";
		data_invs = []; (* F.mkTrue (get_pos 1); *)
		data_methods = [] }
	)
# 1242 "sparser.ml"
               : data_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 369 "sparser.mly"
                    ( _2 )
# 1249 "sparser.ml"
               : 'data_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_field_list) in
    Obj.repr(
# 373 "sparser.mly"
                                 ( _2 )
# 1256 "sparser.ml"
               : 'data_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 377 "sparser.mly"
    ( [] )
# 1262 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semicolon) in
    Obj.repr(
# 378 "sparser.mly"
                             ( List.rev _1 )
# 1270 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 382 "sparser.mly"
    ()
# 1276 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    Obj.repr(
# 383 "sparser.mly"
              ()
# 1282 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 387 "sparser.mly"
                   ( [((_1, _2), get_pos 1)] )
# 1290 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 388 "sparser.mly"
                                        ( 
			if List.mem _4 (List.map (fun f -> snd (fst f)) _1) then
				report_error (get_pos 4) (_4 ^ " is duplicated")
			else
				((_3, _4), get_pos 3) :: _1 
		)
# 1304 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'enum_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'enum_body) in
    Obj.repr(
# 397 "sparser.mly"
                          (
	{ enum_name = _1;
	  enum_fields = _2 }
  )
# 1315 "sparser.ml"
               : 'enum_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 404 "sparser.mly"
                    ( _2 )
# 1322 "sparser.ml"
               : 'enum_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    Obj.repr(
# 408 "sparser.mly"
                            ( List.rev _2 )
# 1329 "sparser.ml"
               : 'enum_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumerator) in
    Obj.repr(
# 412 "sparser.mly"
               ( [_1] )
# 1336 "sparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enumerator) in
    Obj.repr(
# 413 "sparser.mly"
                               ( _3 :: _1 )
# 1344 "sparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 417 "sparser.mly"
               ( (_1, None) )
# 1351 "sparser.ml"
               : 'enumerator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 418 "sparser.mly"
                                  ( (_1, Some _3) )
# 1359 "sparser.ml"
               : 'enumerator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'view_header) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'view_body) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_inv) in
    Obj.repr(
# 424 "sparser.mly"
                                       (
	{ _1 with view_formula = _3; view_invariant = _4 }
  )
# 1370 "sparser.ml"
               : view_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'view_header) in
    Obj.repr(
# 427 "sparser.mly"
                         (
	  report_error (get_pos 2) ("use == to define a view")
	)
# 1379 "sparser.ml"
               : view_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 433 "sparser.mly"
    ( P.mkTrue no_pos )
# 1385 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 434 "sparser.mly"
                    ( _2 )
# 1392 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_ann_cid_list) in
    Obj.repr(
# 438 "sparser.mly"
                                           (
	let cids, anns = List.split _4 in
	  if List.exists 
		(fun x -> match snd x with | Primed -> true | Unprimed -> false) cids 
	  then
		report_error (get_pos 1) 
		  ("variables in view header are not allowed to be primed")
	  else
		let modes = get_modes anns in
		  { view_name = _2;
			view_data_name = "";
			view_vars = List.map fst cids;
			view_modes = modes;
			view_typed_vars = [];
			view_formula = F.mkTrue (get_pos 1);
			view_invariant = P.mkTrue (get_pos 1) }
  )
# 1416 "sparser.ml"
               : 'view_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 458 "sparser.mly"
               ( (_1, Unprimed) )
# 1423 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 459 "sparser.mly"
                     ( (_1, Primed) )
# 1430 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 460 "sparser.mly"
        ( (res, Unprimed) )
# 1437 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 461 "sparser.mly"
         ( (self, Unprimed) )
# 1444 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 462 "sparser.mly"
         ( (this, Unprimed) )
# 1451 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : F.formula) in
    Obj.repr(
# 466 "sparser.mly"
           ( _1 )
# 1458 "sparser.ml"
               : 'view_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list_aux) in
    Obj.repr(
# 479 "sparser.mly"
                      ( List.rev _1 )
# 1465 "sparser.ml"
               : 'heap_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 483 "sparser.mly"
             ( [_1] )
# 1472 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 484 "sparser.mly"
                                     ( _3 :: _1)
# 1480 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 488 "sparser.mly"
         ( _1 (* including variables. to be resolved later *) )
# 1487 "sparser.ml"
               : 'heap_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 492 "sparser.mly"
    ( [] )
# 1493 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list2) in
    Obj.repr(
# 493 "sparser.mly"
                   ( List.rev _1 )
# 1500 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 497 "sparser.mly"
             ( [_1] )
# 1507 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 498 "sparser.mly"
                                  ( 
			if List.mem (fst _3) (List.map fst _1) then
				report_error (get_pos 3) ((fst _3) ^ " is duplicated")
			else 
				_3 :: _1 
		)
# 1520 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 507 "sparser.mly"
                      ( (_1, _3) )
# 1528 "sparser.ml"
               : 'heap_arg2))
; (fun __caml_parser_env ->
    Obj.repr(
# 511 "sparser.mly"
    ( 
	[] : (ident * primed) list 
  )
# 1536 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid_list) in
    Obj.repr(
# 514 "sparser.mly"
             (
	  List.rev _1 : (ident * primed) list 
	)
# 1545 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 520 "sparser.mly"
        ( 
	([_1]) : (ident * primed) list 
  )
# 1554 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 523 "sparser.mly"
                       (
	  if List.mem (fst _3) (List.map fst _1) then
		report_error (get_pos 3) ("identifier " ^ (fst _3) ^ " is duplicated")
	  else
		(_3 :: _1) : (ident * primed) list
	)
# 1567 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 534 "sparser.mly"
    ( [] )
# 1573 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid_list) in
    Obj.repr(
# 535 "sparser.mly"
                 (
	  List.rev _1
	)
# 1582 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 540 "sparser.mly"
            (
	[_1]
  )
# 1591 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ann_cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 543 "sparser.mly"
                               (
	  _3 :: _1
	)
# 1601 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ann_list) in
    Obj.repr(
# 549 "sparser.mly"
                     (
	(_1, _2)
  )
# 1611 "sparser.ml"
               : 'ann_cid))
; (fun __caml_parser_env ->
    Obj.repr(
# 555 "sparser.mly"
    ( 
	[] 
  )
# 1619 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_list) in
    Obj.repr(
# 558 "sparser.mly"
             ( 
	  List.rev _1 
	)
# 1628 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 564 "sparser.mly"
        (
	[_1]
  )
# 1637 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ann_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 567 "sparser.mly"
                 (
	  _2 :: _1
	)
# 1647 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 573 "sparser.mly"
          (
	AnnMode ModeIn
  )
# 1655 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 576 "sparser.mly"
                  (
	if _2 = "out" then AnnMode ModeOut
	else report_error (get_pos 2) ("unrecognized mode: " ^ _2)
  )
# 1665 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 583 "sparser.mly"
                       ( _1 )
# 1672 "sparser.ml"
               : F.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_constr) in
    Obj.repr(
# 587 "sparser.mly"
                ( (* each case of a view definition *)
	_1
  )
# 1681 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'case_constr) in
    Obj.repr(
# 590 "sparser.mly"
                                          (
	  F.mkOr _1 _3 (get_pos 2)
	)
# 1691 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 593 "sparser.mly"
          (
	  report_error (get_pos 1) ("parse error in constraints")
	)
# 1699 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_constr) in
    Obj.repr(
# 599 "sparser.mly"
                ( _1 )
# 1706 "sparser.ml"
               : 'case_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'core_constr) in
    Obj.repr(
# 600 "sparser.mly"
                                                         (
	  match _5 with
		| F.Base ({F.formula_base_heap = h;
				   F.formula_base_pure = p}) ->
			F.mkExists _3 h p (get_pos 1)
		| _ -> report_error (get_pos 4) ("only Base is expected here.")
	)
# 1720 "sparser.ml"
               : 'case_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_constr) in
    Obj.repr(
# 610 "sparser.mly"
                ( F.formula_of_heap _1 (get_pos 1) )
# 1727 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 611 "sparser.mly"
                ( F.formula_of_pure _1 (get_pos 1) )
# 1734 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 612 "sparser.mly"
                                ( F.mkBase _1 _3 (get_pos 2) )
# 1742 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 616 "sparser.mly"
                       ( _1 )
# 1749 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 617 "sparser.mly"
                                        ( F.mkStar _1 _3 (get_pos 2) )
# 1757 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'heap_arg_list) in
    Obj.repr(
# 621 "sparser.mly"
                                                  (
	let h = F.HeapNode { F.h_formula_heap_node = _1;
						 F.h_formula_heap_name = _3;
						 F.h_formula_heap_full = false;
						 F.h_formula_heap_with_inv = false;
						 F.h_formula_heap_pseudo_data = false;
						 F.h_formula_heap_arguments = _5;
						 F.h_formula_heap_pos = get_pos 2 } in
	  h
  )
# 1775 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_heap_arg_list2) in
    Obj.repr(
# 631 "sparser.mly"
                                                       (
	  let h = F.HeapNode2 { F.h_formula_heap2_node = _1;
							F.h_formula_heap2_name = _3;
							F.h_formula_heap2_full = false;
							F.h_formula_heap2_with_inv = false;
							F.h_formula_heap2_pseudo_data = false;
							F.h_formula_heap2_arguments = _5;
							F.h_formula_heap2_pos = get_pos 2 } in
		h
	)
# 1793 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pure_constr) in
    Obj.repr(
# 676 "sparser.mly"
                       ( _1 )
# 1800 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pure_constr) in
    Obj.repr(
# 677 "sparser.mly"
                                       ( P.mkAnd _1 _3 (get_pos 2) )
# 1808 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 681 "sparser.mly"
                               ( P.mkOr _1 _3 (get_pos 2) )
# 1816 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 682 "sparser.mly"
                                           ( P.mkOr _1 _3 (get_pos 2) )
# 1824 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbconstr) in
    Obj.repr(
# 686 "sparser.mly"
             (
	fst _1
  )
# 1833 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_pure_constr) in
    Obj.repr(
# 689 "sparser.mly"
                                          ( 
	  _2 
	)
# 1842 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pure_constr) in
    Obj.repr(
# 692 "sparser.mly"
                                                               (
	  let qf f v = P.mkExists [v] f (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 1854 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pure_constr) in
    Obj.repr(
# 697 "sparser.mly"
                                                               (
	  let qf f v = P.mkForall [v] f (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 1866 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 702 "sparser.mly"
         (
	  P.mkTrue (get_pos 1)
	)
# 1874 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 705 "sparser.mly"
          (
	  P.mkFalse (get_pos 1)
	)
# 1882 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 708 "sparser.mly"
        (
	  P.BForm (P.mkBVar _1 (get_pos 1))
	)
# 1891 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 711 "sparser.mly"
            (
	  P.mkNot (P.BForm (P.mkBVar _2 (get_pos 2))) (get_pos 1)
	)
# 1900 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bconstr) in
    Obj.repr(
# 717 "sparser.mly"
            (
	(fst _1, snd _1)
  )
# 1909 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 720 "sparser.mly"
                           (
	  expand_exp_list P.mkNeq _1 _3 (get_pos 2)
	)
# 1919 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 723 "sparser.mly"
                          (
	  expand_exp_list P.mkEq _1 _3 (get_pos 2)
	)
# 1929 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 726 "sparser.mly"
                          (
	  expand_exp_list P.mkLt _1 _3 (get_pos 2)
	)
# 1939 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 729 "sparser.mly"
                           (
	  expand_exp_list P.mkLte _1 _3 (get_pos 2)
	)
# 1949 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 732 "sparser.mly"
                          (
	  expand_exp_list P.mkGt _1 _3 (get_pos 2)
	)
# 1959 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 735 "sparser.mly"
                           (
	  expand_exp_list P.mkGte _1 _3 (get_pos 2)
	)
# 1969 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 741 "sparser.mly"
                           (
	let p = P.build_relation P.mkLt _1 _3 (get_pos 2) in
	  (p, Some _3)
  )
# 1980 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 745 "sparser.mly"
                            (
	  let p = P.build_relation P.mkLte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 1991 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 749 "sparser.mly"
                           ( 
	  let p = P.build_relation P.mkGt _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2002 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 753 "sparser.mly"
                            ( 
	  let p = P.build_relation P.mkGte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2013 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 757 "sparser.mly"
                           ( 
	  let p = P.build_relation P.mkEq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2024 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 761 "sparser.mly"
                            (
	  let p = P.build_relation P.mkNeq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2035 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 766 "sparser.mly"
                (
	  (P.BForm (P.BagIn (_1, _3, get_pos 2)), None)
	)
# 2045 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 769 "sparser.mly"
                   (
	  (P.BForm (P.BagNotIn (_1, _3, get_pos 2)), None)
	)
# 2055 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 772 "sparser.mly"
                     (
	  (P.BForm (P.BagSub (_1, _3, get_pos 2)), None)
	)
# 2065 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 775 "sparser.mly"
                                       (
	  (P.BForm (P.BagMax (_3, _5, get_pos 2)), None)
	)
# 2075 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 778 "sparser.mly"
                                       (
	  (P.BForm (P.BagMin (_3, _5, get_pos 2)), None)
	)
# 2085 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 786 "sparser.mly"
        (
		P.Var (_1, get_pos 1)
  )
# 2094 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 789 "sparser.mly"
                    (
	  P.IConst (_1, get_pos 1)
	)
# 2103 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 792 "sparser.mly"
                        (
	  P.mkMult _1 (P.Var (_2, get_pos 2)) (get_pos 1)
	)
# 2113 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 795 "sparser.mly"
                   (
	  P.mkAdd _1 _3 (get_pos 2)
	)
# 2123 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 798 "sparser.mly"
                    (
	  P.mkSubtract _1 _3 (get_pos 2)
	)
# 2133 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 801 "sparser.mly"
                            (
	  P.mkSubtract (P.IConst (0, get_pos 1)) _2 (get_pos 1)
	)
# 2142 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 804 "sparser.mly"
                                      (
	  P.mkMax _3 _5 (get_pos 1)
	)
# 2152 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 807 "sparser.mly"
                                      (
	  P.mkMin _3 _5 (get_pos 1)
	)
# 2162 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 810 "sparser.mly"
         (
	  P.Null (get_pos 1)
	)
# 2170 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 814 "sparser.mly"
                                (
	  P.Bag (_2, get_pos 1)
	)
# 2179 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 817 "sparser.mly"
                                      (
	  P.BagUnion (_3, get_pos 1)
	)
# 2188 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 820 "sparser.mly"
                                          (
	  P.BagIntersect (_3, get_pos 1)
	)
# 2197 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 823 "sparser.mly"
                                       (
	  P.BagDiff (_3, _5, get_pos 1)
	)
# 2207 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 830 "sparser.mly"
    ( [] )
# 2213 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 831 "sparser.mly"
              ( _1 )
# 2220 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list_rec) in
    Obj.repr(
# 835 "sparser.mly"
                  ( 
	List.rev _1
  )
# 2229 "sparser.ml"
               : 'cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 841 "sparser.mly"
         (
	[_1]
  )
# 2238 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list_rec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 844 "sparser.mly"
                             ( 
	  _3 :: _1
	)
# 2248 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'proc_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proc_body) in
    Obj.repr(
# 852 "sparser.mly"
                          (
	{ _1 with proc_body = Some _2 }
  )
# 2258 "sparser.ml"
               : 'proc_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_header) in
    Obj.repr(
# 855 "sparser.mly"
                ( _1 )
# 2265 "sparser.ml"
               : 'proc_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opt_formal_parameter_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opt_pre_post_list) in
    Obj.repr(
# 859 "sparser.mly"
                                                                             (
	  let static_specs, dynamic_specs = split_specs _6 in
		{ proc_name = _2;
		  proc_mingled_name = ""; (* mingle_name $2 (List.map (fun p -> p.param_type) $4); *)
		  proc_data_decl = None;
		  proc_constructor = false;
		  proc_args = _4;
		  proc_return = _1;
		  proc_static_specs = static_specs;
		  proc_dynamic_specs = dynamic_specs;
		  proc_loc = get_pos 1;
		  proc_body = None }
	)
# 2287 "sparser.ml"
               : 'proc_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opt_formal_parameter_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opt_pre_post_list) in
    Obj.repr(
# 872 "sparser.mly"
                                                                              (
		let static_specs, dynamic_specs = split_specs _6 in
		  { proc_name = _2;
			proc_mingled_name = ""; (* mingle_name $2 (List.map (fun p -> p.param_type) $4); *)
			proc_data_decl = None;
			proc_constructor = false;
			proc_args = _4;
			proc_return = void_type;
			proc_static_specs = static_specs;
			proc_dynamic_specs = dynamic_specs;
			proc_loc = get_pos 1;
			proc_body = None }
  )
# 2308 "sparser.ml"
               : 'proc_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constructor_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proc_body) in
    Obj.repr(
# 888 "sparser.mly"
                                 (
	  { _1 with proc_body = Some _2 }
	)
# 2318 "sparser.ml"
               : 'constructor_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_header) in
    Obj.repr(
# 891 "sparser.mly"
                       ( _1 )
# 2325 "sparser.ml"
               : 'constructor_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_formal_parameter_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'opt_pre_post_list) in
    Obj.repr(
# 895 "sparser.mly"
                                                                         (
	  let static_specs, dynamic_specs = split_specs _5 in
		if Util.empty dynamic_specs then
		  { proc_name = _1;
			proc_mingled_name = ""; (* mingle_name $2 (List.map (fun p -> p.param_type) $4); *)
			proc_data_decl = None;
			proc_constructor = true;
			proc_args = _3;
			proc_return = Named _1;
			proc_static_specs = static_specs;
			proc_dynamic_specs = dynamic_specs;
			proc_loc = get_pos 1;
			proc_body = None }
		else
		  report_error (get_pos 1) ("constructors have only static speficiations");
	)
# 2349 "sparser.ml"
               : 'constructor_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'meta_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'meta_constr) in
    Obj.repr(
# 914 "sparser.mly"
                                               (
	(_2, _4)
  )
# 2359 "sparser.ml"
               : 'checkentail_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'id_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 920 "sparser.mly"
                                                                                    (
	(_3, _6, _8)
  )
# 2370 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 923 "sparser.mly"
                                                            (
	  ([], _3, _5)
	)
# 2380 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 929 "sparser.mly"
                     (
	PCmd _2
  )
# 2389 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 932 "sparser.mly"
                            (
	  PVar _3
	)
# 2398 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'meta_constr) in
    Obj.repr(
# 938 "sparser.mly"
                                         (
	LetDef (_3, _5)
  )
# 2408 "sparser.ml"
               : 'let_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 944 "sparser.mly"
                      (
	MetaVar _2
  )
# 2417 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : F.formula) in
    Obj.repr(
# 947 "sparser.mly"
           (
	  MetaForm _1
	)
# 2426 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 950 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2435 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'opt_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : F.formula) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'coercion_direction) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : F.formula) in
    Obj.repr(
# 956 "sparser.mly"
                                                    (  
	{ coercion_type = _4;
	  coercion_name = _2;
	  coercion_head = _3;
	  coercion_body = _5;
	  coercion_proof = Return ({ exp_return_val = None;
								 exp_return_pos = get_pos 1 })
	}
  )
# 2453 "sparser.ml"
               : coercion_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 977 "sparser.mly"
              ( Left )
# 2459 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 978 "sparser.mly"
          ( Equiv )
# 2465 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 979 "sparser.mly"
               ( Right )
# 2471 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 1003 "sparser.mly"
    ( "" )
# 2477 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1004 "sparser.mly"
                                       ( _2 )
# 2484 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 1008 "sparser.mly"
    ( [] )
# 2490 "sparser.ml"
               : 'opt_pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_post_list) in
    Obj.repr(
# 1009 "sparser.mly"
                                                 ( List.rev _1 )
# 2497 "sparser.ml"
               : 'opt_pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_post_pair) in
    Obj.repr(
# 1013 "sparser.mly"
                  ( [_1] )
# 2504 "sparser.ml"
               : 'pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pre_post_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_post_pair) in
    Obj.repr(
# 1014 "sparser.mly"
                                ( _2 :: _1 )
# 2512 "sparser.ml"
               : 'pre_post_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'spec_qualifier_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : F.formula) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1018 "sparser.mly"
                                                                ( (_1, _3, _5) )
# 2521 "sparser.ml"
               : 'pre_post_pair))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'spec_qualifier_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1019 "sparser.mly"
                                                ( (_1, F.mkTrue (get_pos 1), _3) )
# 2529 "sparser.ml"
               : 'pre_post_pair))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'spec_qualifier_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1020 "sparser.mly"
                                                 ( (_1, _3, F.mkTrue (get_pos 1)) )
# 2537 "sparser.ml"
               : 'pre_post_pair))
; (fun __caml_parser_env ->
    Obj.repr(
# 1024 "sparser.mly"
    ( Static )
# 2543 "sparser.ml"
               : 'spec_qualifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1025 "sparser.mly"
           ( Static )
# 2549 "sparser.ml"
               : 'spec_qualifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1026 "sparser.mly"
            ( Dynamic )
# 2555 "sparser.ml"
               : 'spec_qualifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1030 "sparser.mly"
    ( [] )
# 2561 "sparser.ml"
               : 'opt_formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameter_list) in
    Obj.repr(
# 1031 "sparser.mly"
                          ( List.rev _1 )
# 2568 "sparser.ml"
               : 'opt_formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameter) in
    Obj.repr(
# 1035 "sparser.mly"
                     ( [_1] )
# 2575 "sparser.ml"
               : 'formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameter) in
    Obj.repr(
# 1036 "sparser.mly"
                                                 ( _3 :: _1 )
# 2583 "sparser.ml"
               : 'formal_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_parameter) in
    Obj.repr(
# 1040 "sparser.mly"
                    ( _1 )
# 2590 "sparser.ml"
               : 'formal_parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_parameter_modifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1044 "sparser.mly"
                                          (
	{ param_mod = _1;
	  param_type = _2;
	  param_loc = get_pos 3;
	  param_name = _3 }
  )
# 2604 "sparser.ml"
               : 'fixed_parameter))
; (fun __caml_parser_env ->
    Obj.repr(
# 1053 "sparser.mly"
    ( NoMod )
# 2610 "sparser.ml"
               : 'opt_parameter_modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1054 "sparser.mly"
        ( RefMod )
# 2616 "sparser.ml"
               : 'opt_parameter_modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1058 "sparser.mly"
          ( _1 )
# 2623 "sparser.ml"
               : 'proc_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_array_type) in
    Obj.repr(
# 1071 "sparser.mly"
                   ( _1 )
# 2630 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 1072 "sparser.mly"
               ( _1 )
# 2637 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 1076 "sparser.mly"
        ( int_type )
# 2643 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1077 "sparser.mly"
          ( float_type )
# 2649 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1078 "sparser.mly"
         ( bool_type )
# 2655 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1079 "sparser.mly"
               ( Named _1 )
# 2662 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 1083 "sparser.mly"
                              ( Array (int_type, None) )
# 2670 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 1084 "sparser.mly"
                                  ( Array (int_type, None) )
# 2678 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list_opt) in
    Obj.repr(
# 1088 "sparser.mly"
                                   ()
# 2685 "sparser.ml"
               : 'rank_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1092 "sparser.mly"
    ()
# 2691 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comma_list) in
    Obj.repr(
# 1093 "sparser.mly"
               ()
# 2698 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1097 "sparser.mly"
          ()
# 2704 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list) in
    Obj.repr(
# 1098 "sparser.mly"
                     ()
# 2711 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_statement_list) in
    Obj.repr(
# 1104 "sparser.mly"
                                     (
	match _2 with
	  | Empty _ -> Block { exp_block_body = Empty (get_pos 1);
						   exp_block_pos = get_pos 1 }
	  | _ -> Block { exp_block_body = _2;
					 exp_block_pos = get_pos 1 }
  )
# 2724 "sparser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 1114 "sparser.mly"
    ( Empty no_pos )
# 2730 "sparser.ml"
               : 'opt_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 1115 "sparser.mly"
                   ( _1 )
# 2737 "sparser.ml"
               : 'opt_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 1119 "sparser.mly"
              ( _1 )
# 2744 "sparser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 1120 "sparser.mly"
                             ( Seq { exp_seq_exp1 = _1;
									 exp_seq_exp2 = _2;
									 exp_seq_pos = get_pos 1 } )
# 2754 "sparser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1123 "sparser.mly"
          ( report_error (get_pos 1) ("parse error") )
# 2760 "sparser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration_statement) in
    Obj.repr(
# 1127 "sparser.mly"
                          ( _1 )
# 2767 "sparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'valid_declaration_statement) in
    Obj.repr(
# 1128 "sparser.mly"
                                ( _1 )
# 2774 "sparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'local_variable_declaration) in
    Obj.repr(
# 1132 "sparser.mly"
                                         ( _1 )
# 2781 "sparser.ml"
               : 'declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'local_constant_declaration) in
    Obj.repr(
# 1133 "sparser.mly"
                                         ( _1 )
# 2788 "sparser.ml"
               : 'declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 1137 "sparser.mly"
        ( _1 )
# 2795 "sparser.ml"
               : 'local_variable_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'local_variable_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declarators) in
    Obj.repr(
# 1141 "sparser.mly"
                                             (
	let var_decls = List.rev _2 in
	  mkVarDecl _1 var_decls (get_pos 1)
  )
# 2806 "sparser.ml"
               : 'local_variable_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'local_variable_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant_declarators) in
    Obj.repr(
# 1148 "sparser.mly"
                                                   (
	let const_decls = List.rev _3  in
	  mkConstDecl _2 const_decls (get_pos 1)
  )
# 2817 "sparser.ml"
               : 'local_constant_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declarator) in
    Obj.repr(
# 1155 "sparser.mly"
                        ( [_1] )
# 2824 "sparser.ml"
               : 'variable_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable_declarators) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declarator) in
    Obj.repr(
# 1156 "sparser.mly"
                                                   ( _3 :: _1 )
# 2832 "sparser.ml"
               : 'variable_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable_initializer) in
    Obj.repr(
# 1160 "sparser.mly"
                                       ( (_1, Some _3, get_pos 1) )
# 2840 "sparser.ml"
               : 'variable_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1161 "sparser.mly"
               ( (_1, None, get_pos 1) )
# 2847 "sparser.ml"
               : 'variable_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1165 "sparser.mly"
               ( _1 )
# 2854 "sparser.ml"
               : 'variable_initializer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant_declarator) in
    Obj.repr(
# 1169 "sparser.mly"
                        ( [_1] )
# 2861 "sparser.ml"
               : 'constant_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constant_declarators) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant_declarator) in
    Obj.repr(
# 1170 "sparser.mly"
                                                   ( _3 :: _1 )
# 2869 "sparser.ml"
               : 'constant_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant_expression) in
    Obj.repr(
# 1174 "sparser.mly"
                                      ( (_1, _3, get_pos 1) )
# 2877 "sparser.ml"
               : 'constant_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1178 "sparser.mly"
          ( _1 )
# 2884 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'empty_statement) in
    Obj.repr(
# 1179 "sparser.mly"
                    ( _1 )
# 2891 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression_statement) in
    Obj.repr(
# 1180 "sparser.mly"
                         ( _1 )
# 2898 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'selection_statement) in
    Obj.repr(
# 1181 "sparser.mly"
                        ( _1 )
# 2905 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iteration_statement) in
    Obj.repr(
# 1182 "sparser.mly"
                        ( _1 )
# 2912 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'java_statement) in
    Obj.repr(
# 1183 "sparser.mly"
                   ( _1 )
# 2919 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'jump_statement) in
    Obj.repr(
# 1184 "sparser.mly"
                   ( _1 )
# 2926 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assert_statement) in
    Obj.repr(
# 1185 "sparser.mly"
                     ( _1 )
# 2933 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dprint_statement) in
    Obj.repr(
# 1186 "sparser.mly"
                     ( _1 )
# 2940 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'debug_statement) in
    Obj.repr(
# 1187 "sparser.mly"
                    ( _1 )
# 2947 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_statement) in
    Obj.repr(
# 1188 "sparser.mly"
                   ( _1 )
# 2954 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unfold_statement) in
    Obj.repr(
# 1189 "sparser.mly"
                     ( _1 )
# 2961 "sparser.ml"
               : 'valid_declaration_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 1205 "sparser.mly"
                         ( 
	Unfold { exp_unfold_var = _2;
			 exp_unfold_pos = get_pos 1 } )
# 2970 "sparser.ml"
               : 'unfold_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1222 "sparser.mly"
                            (
	Assert { exp_assert_asserted_formula = Some _2;
			 exp_assert_assumed_formula = None;
			 exp_assert_pos = get_pos 1 }
  )
# 2981 "sparser.ml"
               : 'assert_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : F.formula) in
    Obj.repr(
# 1227 "sparser.mly"
                                   (
	  Assert { exp_assert_asserted_formula = Some _2;
			   exp_assert_assumed_formula = Some _2;
			   exp_assert_pos = get_pos 1 }
	)
# 2992 "sparser.ml"
               : 'assert_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : F.formula) in
    Obj.repr(
# 1232 "sparser.mly"
                            (
	  Assert { exp_assert_asserted_formula = None;
			   exp_assert_assumed_formula = Some _2;
			   exp_assert_pos = get_pos 1 }
	)
# 3003 "sparser.ml"
               : 'assert_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1240 "sparser.mly"
              (
	Debug { exp_debug_flag = true;
			exp_debug_pos = get_pos 2 }
  )
# 3012 "sparser.ml"
               : 'debug_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1244 "sparser.mly"
               (
	  Debug { exp_debug_flag = false;
			  exp_debug_pos = get_pos 2 }
	)
# 3021 "sparser.ml"
               : 'debug_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1251 "sparser.mly"
                    ( Dprint ({exp_dprint_string = "";
							   exp_dprint_pos = (get_pos 1)}) )
# 3028 "sparser.ml"
               : 'dprint_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1253 "sparser.mly"
                               ( Dprint ({exp_dprint_string = _2;
							   exp_dprint_pos = (get_pos 1)}) )
# 3036 "sparser.ml"
               : 'dprint_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1258 "sparser.mly"
              ( Empty (get_pos 1) )
# 3042 "sparser.ml"
               : 'empty_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'id_list_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1262 "sparser.mly"
                                                          ( 
	Bind { exp_bind_bound_var = _2;
		   exp_bind_fields = _5;
		   exp_bind_body = _8;
		   exp_bind_pos = get_pos 1 }
  )
# 3056 "sparser.ml"
               : 'bind_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1271 "sparser.mly"
    ( [] )
# 3062 "sparser.ml"
               : 'id_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 1272 "sparser.mly"
            ( List.rev _1 )
# 3069 "sparser.ml"
               : 'id_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1276 "sparser.mly"
               ( [_1] )
# 3076 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1277 "sparser.mly"
                             ( _3 :: _1 )
# 3084 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1281 "sparser.mly"
         (
	Java { exp_java_code = _1;
		   exp_java_pos = get_pos 1 }
  )
# 3094 "sparser.ml"
               : 'java_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_expression) in
    Obj.repr(
# 1287 "sparser.mly"
                                   ( _1 )
# 3101 "sparser.ml"
               : 'expression_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'invocation_expression) in
    Obj.repr(
# 1291 "sparser.mly"
                          ( _1 )
# 3108 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'object_creation_expression) in
    Obj.repr(
# 1292 "sparser.mly"
                               ( _1 )
# 3115 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 1293 "sparser.mly"
                          ( _1 )
# 3122 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_increment_expression) in
    Obj.repr(
# 1294 "sparser.mly"
                              ( _1 )
# 3129 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_decrement_expression) in
    Obj.repr(
# 1295 "sparser.mly"
                              ( _1 )
# 3136 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_increment_expression) in
    Obj.repr(
# 1296 "sparser.mly"
                             ( _1 )
# 3143 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_decrement_expression) in
    Obj.repr(
# 1297 "sparser.mly"
                             ( _1 )
# 3150 "sparser.ml"
               : 'statement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_statement) in
    Obj.repr(
# 1301 "sparser.mly"
                 ( _1 )
# 3157 "sparser.ml"
               : 'selection_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'valid_declaration_statement) in
    Obj.repr(
# 1305 "sparser.mly"
                                ( _1 )
# 3164 "sparser.ml"
               : 'embedded_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'boolean_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1309 "sparser.mly"
                                                                                 (
	  Cond { exp_cond_condition = _3;
			 exp_cond_then_arm = _5;
			 exp_cond_else_arm = Empty (get_pos 1);
			 exp_cond_pos = get_pos 1 }
	)
# 3177 "sparser.ml"
               : 'if_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'boolean_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'embedded_statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1315 "sparser.mly"
                                                                                   (
		Cond { exp_cond_condition = _3;
			   exp_cond_then_arm = _5;
			   exp_cond_else_arm = _7;
			   exp_cond_pos = get_pos 1 }
	  )
# 3191 "sparser.ml"
               : 'if_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_statement) in
    Obj.repr(
# 1324 "sparser.mly"
                    ( _1 )
# 3198 "sparser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'boolean_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1328 "sparser.mly"
                                                              (
	  While { exp_while_condition = _3;
			  exp_while_body = _5;
			  exp_while_specs = [(F.mkTrue no_pos, F.mkTrue no_pos)];
			  exp_while_pos = get_pos 1 }
	)
# 3211 "sparser.ml"
               : 'while_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'boolean_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pre_post_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'embedded_statement) in
    Obj.repr(
# 1334 "sparser.mly"
                                                                                            (
		While { exp_while_condition = _3;
				exp_while_body = _8;
				exp_while_specs = List.map remove_spec_qualifier _6;
				exp_while_pos = get_pos 1 }
	  )
# 3225 "sparser.ml"
               : 'while_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return_statement) in
    Obj.repr(
# 1343 "sparser.mly"
                     ( _1 )
# 3232 "sparser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'break_statement) in
    Obj.repr(
# 1344 "sparser.mly"
                    ( _1 )
# 3239 "sparser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'continue_statement) in
    Obj.repr(
# 1345 "sparser.mly"
                       ( _1 )
# 3246 "sparser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1349 "sparser.mly"
                    ( Break (get_pos 1) )
# 3252 "sparser.ml"
               : 'break_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1353 "sparser.mly"
                       ( Continue (get_pos 1) )
# 3258 "sparser.ml"
               : 'continue_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_expression) in
    Obj.repr(
# 1357 "sparser.mly"
                                    ( Return { exp_return_val = _2;
											   exp_return_pos = get_pos 1 } )
# 3266 "sparser.ml"
               : 'return_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1362 "sparser.mly"
    ( None )
# 3272 "sparser.ml"
               : 'opt_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1363 "sparser.mly"
               ( Some _1 )
# 3279 "sparser.ml"
               : 'opt_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'object_or_delegate_creation_expression) in
    Obj.repr(
# 1369 "sparser.mly"
                                           ( _1 )
# 3286 "sparser.ml"
               : 'object_creation_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_argument_list) in
    Obj.repr(
# 1373 "sparser.mly"
                                                   (
	New { exp_new_class_name = _2;
		  exp_new_arguments = _4;
		  exp_new_pos = get_pos 1 }
  )
# 3298 "sparser.ml"
               : 'object_or_delegate_creation_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'object_or_delegate_creation_expression) in
    Obj.repr(
# 1381 "sparser.mly"
                                           ( _1 )
# 3305 "sparser.ml"
               : 'new_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 1385 "sparser.mly"
    ( [] )
# 3311 "sparser.ml"
               : 'opt_argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument_list) in
    Obj.repr(
# 1386 "sparser.mly"
                  ( List.rev _1 )
# 3318 "sparser.ml"
               : 'opt_argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument) in
    Obj.repr(
# 1390 "sparser.mly"
             ( [_1] )
# 3325 "sparser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argument_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argument) in
    Obj.repr(
# 1391 "sparser.mly"
                                 ( _3 :: _1 )
# 3333 "sparser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1395 "sparser.mly"
               ( _1 )
# 3340 "sparser.ml"
               : 'argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 1399 "sparser.mly"
                           ( _1 )
# 3347 "sparser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 1400 "sparser.mly"
                          ( _1 )
# 3354 "sparser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1404 "sparser.mly"
               (
	_1
  )
# 3363 "sparser.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1410 "sparser.mly"
               (
	(* check type *)
	_1
  )
# 3373 "sparser.ml"
               : 'boolean_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1417 "sparser.mly"
                                            (
	  mkAssign OpAssign _1 _3 (get_pos 2)
	)
# 3383 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1420 "sparser.mly"
                                                        (
		mkAssign OpMultAssign _1 _3 (get_pos 2)
	  )
# 3393 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1423 "sparser.mly"
                                                       (
		mkAssign OpDivAssign _1 _3 (get_pos 2)
	  )
# 3403 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1426 "sparser.mly"
                                                       (
		mkAssign OpModAssign _1 _3 (get_pos 2)
	  )
# 3413 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1429 "sparser.mly"
                                                       (
		mkAssign OpPlusAssign _1 _3 (get_pos 2)
	  )
# 3423 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prefixed_unary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1432 "sparser.mly"
                                                       (
		mkAssign OpMinusAssign _1 _3 (get_pos 2)
	  )
# 3433 "sparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_or_expression) in
    Obj.repr(
# 1438 "sparser.mly"
                              ( _1 )
# 3440 "sparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'conditional_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1439 "sparser.mly"
                                                                 (
	  Cond { exp_cond_condition = _1;
			 exp_cond_then_arm = _3;
			 exp_cond_else_arm = _5;
			 exp_cond_pos = get_pos 2 }
	)
# 3454 "sparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_and_expression) in
    Obj.repr(
# 1448 "sparser.mly"
                               ( _1 )
# 3461 "sparser.ml"
               : 'conditional_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_and_expression) in
    Obj.repr(
# 1449 "sparser.mly"
                                                              (
	  mkBinary OpLogicalOr _1 _3 (get_pos 2)
	)
# 3471 "sparser.ml"
               : 'conditional_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inclusive_or_expression) in
    Obj.repr(
# 1455 "sparser.mly"
                            ( _1 )
# 3478 "sparser.ml"
               : 'conditional_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_and_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inclusive_or_expression) in
    Obj.repr(
# 1456 "sparser.mly"
                                                              (
		mkBinary OpLogicalAnd _1 _3 (get_pos 2)
	  )
# 3488 "sparser.ml"
               : 'conditional_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exclusive_or_expression) in
    Obj.repr(
# 1462 "sparser.mly"
                            ( _1 )
# 3495 "sparser.ml"
               : 'inclusive_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 1466 "sparser.mly"
                   ( _1 )
# 3502 "sparser.ml"
               : 'exclusive_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 1470 "sparser.mly"
                        ( _1 )
# 3509 "sparser.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 1474 "sparser.mly"
                          ( _1 )
# 3516 "sparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 1475 "sparser.mly"
                                                   (
		mkBinary OpEq _1 _3 (get_pos 2)
	  )
# 3526 "sparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 1478 "sparser.mly"
                                                  (
		mkBinary OpNeq _1 _3 (get_pos 2)
	  )
# 3536 "sparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1484 "sparser.mly"
                     ( _1 )
# 3543 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1485 "sparser.mly"
                                              (
		mkBinary OpLt _1 _3 (get_pos 2)
	  )
# 3553 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1488 "sparser.mly"
                                              (
		mkBinary OpGt _1 _3 (get_pos 2)
	  )
# 3563 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1491 "sparser.mly"
                                               (
		mkBinary OpLte _1 _3 (get_pos 2)
	  )
# 3573 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 1494 "sparser.mly"
                                               (
		mkBinary OpGte _1 _3 (get_pos 2)
	  )
# 3583 "sparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 1500 "sparser.mly"
                        ( _1 )
# 3590 "sparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 1504 "sparser.mly"
                              ( _1 )
# 3597 "sparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 1505 "sparser.mly"
                                                       (
	  mkBinary OpPlus _1 _3 (get_pos 2)
	)
# 3607 "sparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 1508 "sparser.mly"
                                                        (
	  mkBinary OpMinus _1 _3 (get_pos 2)
	)
# 3617 "sparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1514 "sparser.mly"
                     ( _1 )
# 3624 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1515 "sparser.mly"
                                                             (
	  mkBinary OpMult _1 _3 (get_pos 2)
	)
# 3634 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1518 "sparser.mly"
                                                            (
	  mkBinary OpDiv _1 _3 (get_pos 2)
	)
# 3644 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1521 "sparser.mly"
                                                                (
	  mkBinary OpMod _1 _3 (get_pos 2)
	)
# 3654 "sparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1527 "sparser.mly"
                     ( _1 )
# 3661 "sparser.ml"
               : 'prefixed_unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1537 "sparser.mly"
                                     (
	  mkUnary OpPreInc _2 (get_pos 1)
	)
# 3670 "sparser.ml"
               : 'pre_increment_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1543 "sparser.mly"
                                     (
	  mkUnary OpPreDec _2 (get_pos 1)
	)
# 3679 "sparser.ml"
               : 'pre_decrement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primary_expression) in
    Obj.repr(
# 1549 "sparser.mly"
                              (
	  mkUnary OpPostInc _1 (get_pos 2)
	)
# 3688 "sparser.ml"
               : 'post_increment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primary_expression) in
    Obj.repr(
# 1555 "sparser.mly"
                              (
	  mkUnary OpPostDec _1 (get_pos 2)
	)
# 3697 "sparser.ml"
               : 'post_decrement_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression_not_plusminus) in
    Obj.repr(
# 1561 "sparser.mly"
                                   ( _1 )
# 3704 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1562 "sparser.mly"
                          ( 
		let zero = IntLit { exp_int_lit_val = 0;
							exp_int_lit_pos = get_pos 1 }
		in
		  mkBinary OpPlus zero _2 (get_pos 1)
	  
	  )
# 3717 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1569 "sparser.mly"
                           (
		let zero = IntLit { exp_int_lit_val = 0;
							exp_int_lit_pos = get_pos 1 }
		in
		  mkBinary OpMinus zero _2 (get_pos 1)
	  )
# 3729 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_increment_expression) in
    Obj.repr(
# 1575 "sparser.mly"
                             ( _1 )
# 3736 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pre_decrement_expression) in
    Obj.repr(
# 1576 "sparser.mly"
                             ( _1 )
# 3743 "sparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 1580 "sparser.mly"
                       ( _1 )
# 3750 "sparser.ml"
               : 'unary_expression_not_plusminus))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prefixed_unary_expression) in
    Obj.repr(
# 1581 "sparser.mly"
                                  (
		mkUnary OpNot _2 (get_pos 1)
	  )
# 3759 "sparser.ml"
               : 'unary_expression_not_plusminus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 1584 "sparser.mly"
                    ( _1 )
# 3766 "sparser.ml"
               : 'unary_expression_not_plusminus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 1588 "sparser.mly"
                       ( _1 )
# 3773 "sparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_increment_expression) in
    Obj.repr(
# 1589 "sparser.mly"
                              ( _1 )
# 3780 "sparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_decrement_expression) in
    Obj.repr(
# 1590 "sparser.mly"
                              ( _1)
# 3787 "sparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression_not_plusminus) in
    Obj.repr(
# 1594 "sparser.mly"
                                                            ( 
	  match _2 with
		| Var v -> Cast { exp_cast_target_type = Named v.exp_var_name; (*TODO: fix this *)
						  exp_cast_body = _4;
						  exp_cast_pos = get_pos 1 }
		| _ -> report_error (get_pos 2) ("Expecting a type")
	)
# 3801 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1601 "sparser.mly"
                                       ( 
		Cast { exp_cast_target_type = Prim Int;
			   exp_cast_body = _4;
			   exp_cast_pos = get_pos 1 }
	  )
# 3812 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1606 "sparser.mly"
                                        ( 
		Cast { exp_cast_target_type = Prim Bool;
			   exp_cast_body = _4;
			   exp_cast_pos = get_pos 1 }
	  )
# 3823 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1611 "sparser.mly"
                                         ( 
		Cast { exp_cast_target_type = Prim Float;
			   exp_cast_body = _4;
			   exp_cast_pos = get_pos 1 }
	  )
# 3834 "sparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'qualified_identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_argument_list) in
    Obj.repr(
# 1619 "sparser.mly"
                                                         (
	  CallRecv { exp_call_recv_receiver = fst _1;
				 exp_call_recv_method = snd _1;
				 exp_call_recv_arguments = _3;
				 exp_call_recv_pos = get_pos 1 }
	)
# 3847 "sparser.ml"
               : 'invocation_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_argument_list) in
    Obj.repr(
# 1625 "sparser.mly"
                                               (
		CallNRecv { exp_call_nrecv_method = _1;
					exp_call_nrecv_arguments = _3;
					exp_call_nrecv_pos = get_pos 1 }
	  )
# 3859 "sparser.ml"
               : 'invocation_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1633 "sparser.mly"
                                      ( (_1, _3) )
# 3867 "sparser.ml"
               : 'qualified_identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1637 "sparser.mly"
                                      (
	Member { exp_member_base = _1;
			 exp_member_fields = [_3];
			 exp_member_pos = get_pos 3 }
  )
# 3879 "sparser.ml"
               : 'member_access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'boolean_literal) in
    Obj.repr(
# 1645 "sparser.mly"
                    ( BoolLit { exp_bool_lit_val = _1;
								exp_bool_lit_pos = get_pos 1 } )
# 3887 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'integer_literal) in
    Obj.repr(
# 1647 "sparser.mly"
                    ( IntLit { exp_int_lit_val = _1;
							   exp_int_lit_pos = get_pos 1 } )
# 3895 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'real_literal) in
    Obj.repr(
# 1649 "sparser.mly"
                 ( FloatLit { exp_float_lit_val = _1;
							  exp_float_lit_pos = get_pos 1 } )
# 3903 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 1651 "sparser.mly"
         ( Null (get_pos 1) )
# 3909 "sparser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 1655 "sparser.mly"
                  ( _1 )
# 3916 "sparser.ml"
               : 'real_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1659 "sparser.mly"
                    ( _1 )
# 3923 "sparser.ml"
               : 'integer_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 1663 "sparser.mly"
         ( true )
# 3929 "sparser.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 1664 "sparser.mly"
          ( false )
# 3935 "sparser.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesized_expression) in
    Obj.repr(
# 1668 "sparser.mly"
                             ( _1 )
# 3942 "sparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression_no_parenthesis) in
    Obj.repr(
# 1669 "sparser.mly"
                                      ( _1 )
# 3949 "sparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 1673 "sparser.mly"
                             ( _2 )
# 3956 "sparser.ml"
               : 'parenthesized_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 1677 "sparser.mly"
            ( _1 )
# 3963 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member_name) in
    Obj.repr(
# 1678 "sparser.mly"
                ( _1 )
# 3970 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'member_access) in
    Obj.repr(
# 1679 "sparser.mly"
                  ( _1 )
# 3977 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'invocation_expression) in
    Obj.repr(
# 1680 "sparser.mly"
                          ( _1 )
# 3984 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'new_expression) in
    Obj.repr(
# 1681 "sparser.mly"
                   ( _1)
# 3991 "sparser.ml"
               : 'primary_expression_no_parenthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1685 "sparser.mly"
               ( Var { exp_var_name = _1;
					   exp_var_pos = get_pos 1 } )
# 3999 "sparser.ml"
               : 'member_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1687 "sparser.mly"
         ( This ({exp_this_pos = get_pos 1}) )
# 4006 "sparser.ml"
               : 'member_name))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry data_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry view_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry coercion_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry constr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : prog_decl)
let data_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : data_decl)
let view_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : view_decl)
let coercion_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : coercion_decl)
let constr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : F.formula)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : command)
;;
