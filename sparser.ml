type token =
  | AND
  | ANDAND
  | ASSERT
  | ASSUME
  | AT
  | BIND
  | BOOL
  | BREAK
  | BY
  | CASE
  | CBRACE
  | CHECKENTAIL
  | CAPTURERESIDUE
  | CLASS
  | COERCION
  | COLON
  | COLONCOLON
  | COMMA
  | COMPOSE
  | CONSEQ
  | CONST
  | CONTINUE
  | CPAREN
  | CSQUARE
  | DATA
  | DDEBUG
  | DTIME
  | DIFF
  | DISTR
  | DIV
  | DOLLAR
  | DOT
  | DOUBLEQUOTE
  | DERIVE
  | DYNAMIC
  | ELSE
  | ENSURES
  | ENUM
  | EOF
  | EQ
  | EQEQ
  | EQUIV
  | EXISTS
  | EXTENDS
  | FALSE
  | FLOAT
  | FORALL
  | GT
  | GTE
  | HASH
  | IDENTIFIER of (string)
  | IF
  | IMPLIES
  | IMPLY
  | IMPORT
  | IN
  | JAVA of (string)
  | LEFTARROW
  | LEMMA
  | LET
  | LITERAL_FLOAT of (float)
  | LITERAL_INTEGER of (int)
  | NOTIN
  | BAGMAX
  | BAGMIN
  | FOLD
  | INT
  | INTERR
  | INTERSECT
  | INV
  | LT
  | LTE
  | MAX
  | MINUS
  | MIN
  | NEQ
  | NEW
  | NOT
  | NULL
  | OBRACE
  | OFF
  | OPAREN
  | ON
  | OP_ADD_ASSIGN
  | OP_DEC
  | OP_DIV_ASSIGN
  | OP_INC
  | OP_MOD_ASSIGN
  | OP_MULT_ASSIGN
  | OP_SUB_ASSIGN
  | OR
  | OROR
  | ORWORD
  | OSQUARE
  | PERCENT
  | PLUS
  | PRED
  | PRIME
  | PRINT
  | REF
  | REQUIRES
  | RES of (string)
  | RETURN
  | RIGHTARROW
  | SELF of (string)
  | SEMICOLON
  | SPLIT
  | STAR
  | STATIC
  | SUBSET
  | THEN
  | THIS of (string)
  | TO
  | TRUE
  | VIEW
  | VOID
  | UNFOLD
  | UNION
  | WHERE
  | WHILE
  | FLOW of (string)

open Parsing;;
# 2 "sparser.mly"
  (* Parser for a more expressive language *)

  open Globals
  open Iast
  open Sleekcommons

  module F = Iformula
  module P = Ipure

  type type_decl =
	| Data of data_decl
	| Enum of enum_decl
	| View of view_decl

  type decl =
    | Type of type_decl
    | Proc of proc_decl
	| Coercion of coercion_decl

  type member =
	| Field of (typed_ident * loc)
	| Inv of F.formula
	| Method of proc_decl

  type spec_qualifier =
	| Static
	| Dynamic

  type ann =
	| AnnMode of mode
	| AnnType of typ

  let get_pos x = 
	{ start_pos = Parsing.symbol_start_pos ();
	  end_pos = Parsing. symbol_end_pos ();
	  mid_pos = Parsing.rhs_start_pos x;
	}	

  let rec get_mode (anns : ann list) : mode = match anns with
	| ann :: rest -> begin
		match ann with
		  | AnnMode m -> m
		  | _ -> get_mode rest
	  end
	| [] -> ModeOut (* default to ModeOut if there is no annotation. *)

  let rec get_modes (anns : ann list list) : mode list =
	match anns with
	  | alist :: rest ->
		  let m_rest = get_modes rest in
		  let m = get_mode alist in
			m :: m_rest
	| [] -> []


  let expand_exp_list mk l r pos =
	let b, oe = l in
	  match oe with
		| Some e ->
			let tmp = P.build_relation mk e r pos in
			let res = P.mkAnd b tmp pos in
			  (res, Some r)
		| None -> report_error pos ("parse error in lhs of relational operator")

  let rec split_members mbrs = match mbrs with
	| mbr :: rest -> begin
		let fields, invs, meths = split_members rest in
		  match mbr with
			| Field f -> (f :: fields, invs, meths)
			| Inv i -> (fields, i :: invs, meths)
			| Method m ->
				(fields, invs, m :: meths)
	  end
	| [] -> ([], [], [])

# 202 "sparser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* ANDAND *);
  259 (* ASSERT *);
  260 (* ASSUME *);
  261 (* AT *);
  262 (* BIND *);
  263 (* BOOL *);
  264 (* BREAK *);
  265 (* BY *);
  266 (* CASE *);
  267 (* CBRACE *);
  268 (* CHECKENTAIL *);
  269 (* CAPTURERESIDUE *);
  270 (* CLASS *);
  271 (* COERCION *);
  272 (* COLON *);
  273 (* COLONCOLON *);
  274 (* COMMA *);
  275 (* COMPOSE *);
  276 (* CONSEQ *);
  277 (* CONST *);
  278 (* CONTINUE *);
  279 (* CPAREN *);
  280 (* CSQUARE *);
  281 (* DATA *);
  282 (* DDEBUG *);
  283 (* DTIME *);
  284 (* DIFF *);
  285 (* DISTR *);
  286 (* DIV *);
  287 (* DOLLAR *);
  288 (* DOT *);
  289 (* DOUBLEQUOTE *);
  290 (* DERIVE *);
  291 (* DYNAMIC *);
  292 (* ELSE *);
  293 (* ENSURES *);
  294 (* ENUM *);
    0 (* EOF *);
  295 (* EQ *);
  296 (* EQEQ *);
  297 (* EQUIV *);
  298 (* EXISTS *);
  299 (* EXTENDS *);
  300 (* FALSE *);
  301 (* FLOAT *);
  302 (* FORALL *);
  303 (* GT *);
  304 (* GTE *);
  305 (* HASH *);
  307 (* IF *);
  308 (* IMPLIES *);
  309 (* IMPLY *);
  310 (* IMPORT *);
  311 (* IN *);
  313 (* LEFTARROW *);
  314 (* LEMMA *);
  315 (* LET *);
  318 (* NOTIN *);
  319 (* BAGMAX *);
  320 (* BAGMIN *);
  321 (* FOLD *);
  322 (* INT *);
  323 (* INTERR *);
  324 (* INTERSECT *);
  325 (* INV *);
  326 (* LT *);
  327 (* LTE *);
  328 (* MAX *);
  329 (* MINUS *);
  330 (* MIN *);
  331 (* NEQ *);
  332 (* NEW *);
  333 (* NOT *);
  334 (* NULL *);
  335 (* OBRACE *);
  336 (* OFF *);
  337 (* OPAREN *);
  338 (* ON *);
  339 (* OP_ADD_ASSIGN *);
  340 (* OP_DEC *);
  341 (* OP_DIV_ASSIGN *);
  342 (* OP_INC *);
  343 (* OP_MOD_ASSIGN *);
  344 (* OP_MULT_ASSIGN *);
  345 (* OP_SUB_ASSIGN *);
  346 (* OR *);
  347 (* OROR *);
  348 (* ORWORD *);
  349 (* OSQUARE *);
  350 (* PERCENT *);
  351 (* PLUS *);
  352 (* PRED *);
  353 (* PRIME *);
  354 (* PRINT *);
  355 (* REF *);
  356 (* REQUIRES *);
  358 (* RETURN *);
  359 (* RIGHTARROW *);
  361 (* SEMICOLON *);
  362 (* SPLIT *);
  363 (* STAR *);
  364 (* STATIC *);
  365 (* SUBSET *);
  366 (* THEN *);
  368 (* TO *);
  369 (* TRUE *);
  370 (* VIEW *);
  371 (* VOID *);
  372 (* UNFOLD *);
  373 (* UNION *);
  374 (* WHERE *);
  375 (* WHILE *);
    0|]

let yytransl_block = [|
  306 (* IDENTIFIER *);
  312 (* JAVA *);
  316 (* LITERAL_FLOAT *);
  317 (* LITERAL_INTEGER *);
  357 (* RES *);
  360 (* SELF *);
  367 (* THIS *);
  376 (* FLOW *);
    0|]

let yylhs = "\255\255\
\007\000\007\000\008\000\008\000\006\000\006\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\001\000\002\000\
\015\000\016\000\017\000\017\000\019\000\019\000\018\000\018\000\
\003\000\003\000\023\000\023\000\025\000\025\000\026\000\026\000\
\028\000\028\000\027\000\021\000\030\000\030\000\030\000\030\000\
\030\000\022\000\031\000\032\000\032\000\033\000\035\000\035\000\
\036\000\036\000\037\000\038\000\038\000\039\000\039\000\029\000\
\029\000\040\000\040\000\041\000\042\000\042\000\043\000\043\000\
\044\000\044\000\045\000\005\000\005\000\046\000\046\000\049\000\
\049\000\049\000\050\000\050\000\048\000\048\000\047\000\047\000\
\047\000\051\000\051\000\052\000\052\000\052\000\054\000\054\000\
\055\000\056\000\056\000\053\000\053\000\057\000\057\000\024\000\
\024\000\059\000\059\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\063\000\063\000\062\000\064\000\064\000\
\011\000\012\000\067\000\067\000\013\000\013\000\014\000\014\000\
\010\000\066\000\066\000\066\000\065\000\065\000\065\000\004\000\
\070\000\070\000\070\000\069\000\069\000\020\000\020\000\071\000\
\071\000\071\000\071\000\072\000\072\000\073\000\074\000\074\000\
\075\000\075\000\068\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yylen = "\002\000\
\000\000\001\000\001\000\002\000\001\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\003\000\
\002\000\003\000\000\000\002\000\000\000\001\000\002\000\004\000\
\005\000\003\000\000\000\003\000\000\000\004\000\001\000\003\000\
\000\000\004\000\005\000\005\000\001\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\001\000\000\000\001\000\
\001\000\003\000\003\000\000\000\001\000\001\000\003\000\000\000\
\001\000\001\000\003\000\003\000\000\000\001\000\001\000\002\000\
\002\000\002\000\003\000\001\000\001\000\001\000\003\000\000\000\
\001\000\003\000\004\000\005\000\004\000\003\000\001\000\003\000\
\001\000\001\000\006\000\002\000\002\000\004\000\002\000\001\000\
\003\000\004\000\000\000\001\000\003\000\007\000\007\000\002\000\
\003\000\003\000\003\000\001\000\003\000\006\000\006\000\001\000\
\001\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\006\000\001\000\001\000\002\000\
\003\000\003\000\003\000\002\000\006\000\006\000\001\000\003\000\
\004\000\004\000\006\000\000\000\001\000\001\000\001\000\003\000\
\005\000\004\000\009\000\006\000\003\000\004\000\003\000\003\000\
\006\000\002\000\001\000\001\000\002\000\001\000\001\000\006\000\
\001\000\001\000\001\000\000\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000\003\000\000\000\001\000\
\001\000\002\000\001\000\003\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000"

let yydefred = "\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\181\000\000\000\182\000\000\000\000\000\183\000\000\000\000\000\
\184\000\081\000\000\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\135\000\000\000\000\000\000\000\039\000\040\000\041\000\104\000\
\000\000\185\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\079\000\082\000\000\000\092\000\000\000\000\000\108\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\008\000\009\000\186\000\005\000\010\000\011\000\012\000\013\000\
\014\000\187\000\000\000\003\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\128\000\000\000\000\000\000\000\000\000\126\000\132\000\
\000\000\107\000\000\000\141\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\000\000\000\000\088\000\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\000\000\
\096\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\159\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\170\000\169\000\171\000\168\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\026\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\
\101\000\000\000\067\000\000\000\000\000\000\000\000\000\097\000\
\000\000\087\000\000\000\000\000\000\000\000\000\000\000\129\000\
\000\000\000\000\073\000\078\000\071\000\080\000\000\000\000\000\
\093\000\000\000\110\000\113\000\114\000\111\000\112\000\109\000\
\119\000\117\000\118\000\115\000\116\000\120\000\000\000\000\000\
\000\000\157\000\000\000\000\000\152\000\151\000\000\000\000\000\
\149\000\018\000\000\000\020\000\023\000\000\000\173\000\172\000\
\000\000\000\000\000\000\000\000\058\000\000\000\000\000\165\000\
\162\000\161\000\163\000\000\000\000\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\
\000\000\000\000\055\000\137\000\000\000\000\000\000\000\089\000\
\000\000\000\000\086\000\000\000\000\000\179\000\000\000\000\000\
\155\000\000\000\156\000\146\000\000\000\150\000\000\000\177\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\049\000\074\000\090\000\
\000\000\000\000\000\000\154\000\145\000\000\000\024\000\174\000\
\178\000\000\000\000\000\060\000\000\000\063\000\059\000\000\000\
\028\000\160\000\075\000\000\000\139\000\102\000\103\000\124\000\
\125\000\133\000\134\000\083\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\180\000\000\000\153\000\034\000\
\066\000\065\000\064\000\076\000\000\000\000\000\094\000\045\000\
\095\000\000\000\050\000\148\000\000\000\000\000\000\000\000\000\
\147\000"

let yydgoto = "\008\000\
\009\000\064\000\065\000\066\000\042\000\067\000\074\000\075\000\
\068\000\069\000\070\000\071\000\072\000\073\000\012\000\079\000\
\159\000\160\000\236\000\161\000\015\000\168\000\247\000\043\000\
\112\000\014\001\015\001\242\000\243\000\095\000\056\001\057\001\
\058\001\045\000\060\001\061\001\062\001\108\000\109\000\244\000\
\245\000\076\001\077\001\078\001\046\000\047\000\145\000\049\000\
\204\000\172\000\050\000\051\000\052\000\113\000\114\000\129\000\
\053\000\054\000\106\000\055\000\056\000\057\000\101\000\058\000\
\146\000\026\001\147\000\023\001\084\000\252\000\162\000\163\000\
\239\000\033\001\034\001"

let yysindex = "\042\002\
\000\000\041\255\234\254\032\255\000\004\162\255\162\255\000\000\
\000\000\112\255\000\000\097\255\135\255\000\000\010\255\165\255\
\000\000\000\000\130\255\131\255\136\255\000\000\142\255\132\255\
\184\255\154\255\158\255\168\255\169\255\127\255\170\255\184\255\
\000\000\127\255\150\005\184\255\000\000\000\000\000\000\000\000\
\176\255\000\000\241\255\152\255\212\254\192\005\171\255\172\255\
\000\000\000\000\000\000\007\255\000\000\007\000\102\000\000\000\
\205\000\228\255\084\004\235\255\100\255\238\255\246\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\162\255\000\000\000\000\225\255\246\255\203\255\
\023\000\000\004\231\255\150\004\234\005\127\255\184\255\184\255\
\000\000\000\000\184\255\184\255\127\255\127\255\000\000\000\000\
\127\255\000\000\216\254\000\000\019\000\193\255\234\005\011\255\
\108\255\046\255\000\000\016\000\013\000\127\255\044\005\000\000\
\000\000\044\000\253\255\127\255\127\255\127\255\127\255\127\255\
\127\255\003\255\012\255\192\005\044\005\184\255\000\000\017\000\
\000\000\127\255\127\255\127\255\127\255\127\255\127\255\127\255\
\127\255\127\255\127\255\127\255\127\255\127\255\078\255\002\000\
\172\255\020\000\000\000\011\000\018\000\021\000\027\000\034\000\
\031\000\000\000\000\000\000\000\000\000\000\000\048\000\206\255\
\036\000\229\255\229\255\000\000\037\000\000\000\000\000\022\000\
\045\000\153\255\014\255\002\005\005\255\053\000\066\000\069\000\
\070\000\067\000\040\255\043\255\000\000\076\000\234\005\234\005\
\000\000\234\005\000\000\184\255\071\000\062\000\046\000\000\000\
\014\000\000\000\038\000\216\254\216\254\003\000\003\000\000\000\
\216\254\006\255\000\000\000\000\000\000\000\000\241\255\092\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\216\254\084\004\
\075\000\000\000\176\003\084\000\000\000\000\000\082\000\094\000\
\000\000\000\000\225\255\000\000\000\000\110\000\000\000\000\000\
\081\000\184\255\083\000\114\000\000\000\234\005\101\000\000\000\
\000\000\000\000\000\000\150\004\012\255\000\000\159\255\127\255\
\234\005\234\005\184\255\184\255\000\000\127\255\127\255\234\005\
\133\000\133\000\000\000\000\000\090\000\118\000\039\000\000\000\
\059\002\019\255\000\000\113\000\047\000\000\000\148\255\093\000\
\000\000\119\000\000\000\000\000\084\004\000\000\103\000\000\000\
\130\000\137\000\123\000\155\000\000\000\037\000\161\000\000\000\
\002\255\208\254\012\255\061\255\023\255\036\255\141\000\143\000\
\120\255\123\255\144\000\135\000\000\000\062\000\235\254\129\000\
\166\000\000\000\216\254\132\000\167\000\000\000\000\000\000\000\
\084\004\136\000\108\000\000\000\000\000\158\000\000\000\000\000\
\000\000\178\000\090\255\000\000\155\000\000\000\000\000\108\005\
\000\000\000\000\000\000\060\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\183\000\000\000\127\255\007\000\
\127\255\007\000\150\000\179\000\000\000\084\004\000\000\000\000\
\000\000\000\000\000\000\000\000\234\005\216\254\000\000\000\000\
\000\000\165\000\000\000\000\000\104\000\133\000\084\004\184\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\206\001\208\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\199\000\000\000\189\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\003\138\001\100\000\000\000\004\000\005\000\
\000\000\000\000\000\000\054\003\000\000\012\003\218\002\000\000\
\000\000\036\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\217\001\000\000\000\000\207\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\203\000\203\000\
\000\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\
\000\000\000\000\216\001\000\000\000\000\203\000\000\000\000\000\
\164\000\000\000\000\000\000\000\048\255\197\000\000\000\000\000\
\000\000\054\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\211\000\
\000\000\174\000\176\000\000\000\161\255\000\000\000\000\195\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\002\174\002\240\000\062\001\000\000\
\224\002\189\000\000\000\000\000\000\000\000\000\054\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\217\000\000\000\000\000\206\000\000\000\000\000\
\000\000\000\000\000\000\182\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\255\058\255\000\000\000\000\000\000\000\000\212\000\000\000\
\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\214\000\000\000\001\255\000\000\198\255\210\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\255\000\000\
\196\000\000\000\126\255\000\000\200\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\139\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\191\000\
\000\000\191\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\186\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\255\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\229\001\243\001\245\001\183\255\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\001\000\000\000\000\000\000\223\255\
\145\255\208\000\000\000\000\000\000\000\251\255\000\000\000\000\
\168\000\032\004\000\000\000\000\162\000\207\255\000\000\000\000\
\230\000\000\000\000\000\201\000\000\000\065\255\009\000\080\000\
\000\000\000\000\227\255\006\001\000\000\210\255\000\000\094\255\
\151\001\146\255\000\000\000\000\000\000\248\255\188\255\000\000\
\039\255\000\000\055\001\000\000\000\000\000\000\000\000\000\000\
\122\001\000\000\000\000"

let yytablesize = 1887
let yytable = "\044\000\
\192\000\104\000\194\000\068\000\069\000\127\000\021\001\125\000\
\167\000\037\000\018\001\183\000\019\000\048\000\183\000\019\000\
\122\000\095\001\061\000\090\000\152\000\019\000\000\001\183\000\
\178\000\100\000\098\000\035\000\118\000\105\000\107\000\072\000\
\118\000\082\001\076\000\158\000\183\000\174\000\175\000\153\000\
\044\000\189\000\063\001\123\000\158\000\086\001\158\000\061\000\
\081\000\082\000\119\000\171\000\182\000\044\000\119\000\024\000\
\083\001\006\001\087\001\037\000\007\001\042\001\120\000\053\000\
\121\000\010\000\120\000\070\001\185\000\104\000\253\000\053\000\
\192\000\013\000\098\000\089\000\044\000\118\000\044\000\105\000\
\099\000\107\000\107\000\085\001\100\000\176\000\177\000\127\000\
\037\000\016\000\048\000\207\000\170\000\124\000\206\000\202\000\
\107\000\105\000\036\000\119\000\184\000\100\000\154\000\100\001\
\036\000\105\000\037\000\084\001\035\000\038\000\123\000\120\000\
\118\000\126\000\037\000\118\000\039\000\158\000\044\000\105\000\
\208\000\211\000\212\000\213\000\214\000\215\000\216\000\217\000\
\218\000\219\000\220\000\221\000\222\000\118\000\119\000\186\000\
\037\000\119\000\255\000\105\001\117\001\098\000\090\001\046\000\
\106\001\091\001\120\000\099\000\037\000\120\000\009\001\123\000\
\010\001\025\001\020\000\119\000\062\000\120\001\224\000\183\000\
\019\001\077\000\116\000\106\000\108\001\066\001\105\000\120\000\
\115\000\117\000\225\000\067\001\046\000\059\000\060\000\078\000\
\024\000\105\000\105\000\149\000\105\000\150\000\011\001\081\001\
\080\000\062\000\010\000\025\000\061\000\111\001\091\000\113\001\
\118\000\249\000\028\000\118\000\107\000\083\000\029\000\030\000\
\031\000\203\000\205\000\051\000\033\000\034\000\116\000\056\000\
\085\000\250\000\033\000\086\000\039\001\117\000\119\000\043\001\
\087\000\119\000\044\000\016\000\062\000\044\000\088\000\045\001\
\046\001\192\000\120\000\037\000\089\000\120\000\038\000\155\000\
\051\000\024\000\091\000\048\000\036\001\039\000\092\000\131\000\
\105\000\111\000\024\000\041\000\124\000\142\000\044\000\033\000\
\093\000\094\000\097\000\105\000\105\000\047\001\048\001\251\000\
\110\000\013\000\044\000\063\000\041\001\033\000\123\000\124\000\
\033\000\148\000\037\000\128\000\151\000\156\000\037\000\033\000\
\165\000\087\000\157\000\037\000\037\000\164\000\166\000\044\000\
\169\000\037\000\037\000\037\000\037\000\181\000\188\000\038\000\
\037\000\037\000\158\000\068\000\069\000\037\000\039\000\187\000\
\038\000\037\000\033\000\037\000\193\000\033\000\195\000\039\000\
\037\000\210\000\037\000\226\000\033\000\227\000\235\000\072\000\
\037\000\037\000\234\000\044\000\228\000\130\000\233\000\072\000\
\037\000\238\000\037\000\229\000\001\001\241\000\230\000\037\000\
\068\000\069\000\105\000\118\001\231\000\248\000\037\000\037\000\
\037\000\002\001\037\000\232\000\037\000\237\000\003\001\004\001\
\127\000\005\001\246\000\008\001\127\000\012\001\013\001\016\001\
\044\000\127\000\127\000\037\000\072\000\037\000\037\000\105\000\
\037\000\127\000\190\000\017\001\115\000\120\000\127\000\127\000\
\037\000\044\000\037\000\028\001\037\000\143\000\037\000\127\000\
\029\001\127\000\020\001\072\000\022\001\030\001\127\000\032\001\
\127\000\037\001\035\001\038\001\040\001\183\000\127\000\127\000\
\072\000\106\000\143\000\052\001\130\000\053\001\068\001\054\001\
\127\000\064\001\143\000\143\000\131\000\132\000\069\001\065\001\
\071\001\072\001\073\001\074\001\127\000\127\000\127\000\075\001\
\127\000\080\001\127\000\088\001\106\000\089\001\092\001\093\001\
\106\000\143\000\143\000\133\000\134\000\106\000\143\000\096\001\
\135\000\127\000\098\001\127\000\127\000\126\000\127\000\097\001\
\099\001\101\001\106\000\106\000\102\001\103\001\127\000\091\000\
\127\000\104\001\127\000\106\000\127\000\106\000\109\001\114\001\
\091\000\116\001\126\000\095\001\106\000\006\000\121\001\001\000\
\119\001\140\000\126\000\126\000\052\000\091\000\091\000\143\000\
\002\000\019\000\052\000\140\000\106\000\021\000\091\000\166\000\
\091\000\167\000\027\000\022\000\057\000\175\000\011\000\091\000\
\106\000\126\000\126\000\031\000\126\000\176\000\126\000\047\000\
\131\000\029\000\043\000\136\000\131\000\014\000\048\000\091\000\
\017\000\131\000\131\000\137\000\138\000\106\000\031\001\106\000\
\106\000\131\000\126\000\091\000\115\001\094\001\131\000\131\000\
\112\001\144\000\106\000\079\001\106\000\051\001\126\000\131\000\
\126\000\131\000\139\000\140\000\209\000\107\001\131\000\141\000\
\131\000\027\001\091\000\091\000\240\000\000\000\131\000\131\000\
\000\000\000\000\000\000\142\000\000\000\091\000\000\000\091\000\
\131\000\091\000\001\000\002\000\003\000\004\000\005\000\006\000\
\007\000\000\000\000\000\000\000\131\000\131\000\131\000\000\000\
\131\000\000\000\131\000\000\000\000\000\000\000\130\000\000\000\
\000\000\000\000\130\000\000\000\000\000\000\000\000\000\130\000\
\130\000\131\000\000\000\131\000\131\000\000\000\131\000\130\000\
\000\000\000\000\000\000\000\000\130\000\130\000\131\000\000\000\
\131\000\000\000\000\000\000\000\131\000\130\000\000\000\130\000\
\000\000\000\000\000\000\000\000\130\000\000\000\130\000\000\000\
\000\000\000\000\000\000\000\000\130\000\130\000\121\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\000\130\000\130\000\000\000\130\000\000\000\
\130\000\000\000\106\000\000\000\000\000\000\000\106\000\000\000\
\000\000\000\000\000\000\106\000\000\000\000\000\000\000\130\000\
\000\000\130\000\130\000\126\000\130\000\000\000\000\000\000\000\
\106\000\106\000\000\000\000\000\130\000\000\000\130\000\000\000\
\000\000\106\000\130\000\106\000\000\000\122\000\000\000\000\000\
\126\000\000\000\106\000\000\000\000\000\000\000\000\000\000\000\
\126\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\106\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\106\000\126\000\
\126\000\000\000\126\000\000\000\126\000\000\000\000\000\000\000\
\143\000\100\000\000\000\000\000\143\000\000\000\000\000\123\000\
\000\000\143\000\143\000\000\000\000\000\106\000\106\000\000\000\
\126\000\143\000\000\000\000\000\000\000\000\000\143\000\143\000\
\106\000\000\000\106\000\000\000\126\000\000\000\126\000\143\000\
\000\000\143\000\000\000\000\000\000\000\000\000\143\000\000\000\
\143\000\000\000\000\000\000\000\000\000\000\000\143\000\143\000\
\000\000\000\000\144\000\091\000\000\000\000\000\144\000\000\000\
\143\000\000\000\000\000\144\000\144\000\000\000\000\000\000\000\
\000\000\000\000\000\000\144\000\143\000\143\000\143\000\000\000\
\144\000\144\000\143\000\000\000\142\000\000\000\000\000\000\000\
\142\000\144\000\000\000\144\000\000\000\142\000\142\000\000\000\
\144\000\143\000\144\000\143\000\143\000\029\000\000\000\000\000\
\144\000\144\000\142\000\142\000\000\000\000\000\143\000\000\000\
\143\000\000\000\144\000\142\000\000\000\142\000\000\000\000\000\
\000\000\000\000\142\000\000\000\142\000\000\000\144\000\144\000\
\144\000\000\000\142\000\142\000\144\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\142\000\000\000\000\000\000\000\
\000\000\000\000\000\000\144\000\000\000\144\000\144\000\000\000\
\142\000\142\000\142\000\000\000\055\001\000\000\142\000\121\000\
\144\000\000\000\144\000\121\000\000\000\000\000\000\000\025\000\
\121\000\000\000\000\000\000\000\000\000\142\000\028\000\142\000\
\142\000\000\000\029\000\030\000\031\000\121\000\121\000\000\000\
\033\000\034\000\142\000\000\000\142\000\000\000\121\000\000\000\
\121\000\000\000\000\000\000\000\000\000\121\000\000\000\121\000\
\000\000\000\000\000\000\000\000\000\000\121\000\121\000\037\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\121\000\
\000\000\039\000\000\000\000\000\000\000\000\000\122\000\041\000\
\000\000\000\000\122\000\121\000\121\000\121\000\000\000\122\000\
\000\000\121\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\122\000\122\000\000\000\000\000\
\121\000\000\000\121\000\121\000\000\000\122\000\000\000\122\000\
\000\000\000\000\000\000\000\000\122\000\121\000\122\000\121\000\
\000\000\000\000\100\000\000\000\122\000\122\000\100\000\000\000\
\123\000\000\000\000\000\100\000\123\000\000\000\122\000\000\000\
\000\000\123\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\000\100\000\122\000\122\000\122\000\000\000\123\000\123\000\
\122\000\100\000\000\000\100\000\000\000\000\000\000\000\123\000\
\000\000\123\000\100\000\000\000\000\000\000\000\123\000\122\000\
\123\000\122\000\122\000\000\000\091\000\000\000\123\000\123\000\
\000\000\000\000\100\000\000\000\122\000\091\000\122\000\000\000\
\123\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\
\000\000\000\000\091\000\091\000\123\000\123\000\123\000\000\000\
\000\000\000\000\123\000\091\000\000\000\091\000\000\000\000\000\
\000\000\000\000\000\000\100\000\091\000\100\000\100\000\000\000\
\000\000\123\000\000\000\123\000\123\000\096\000\000\000\029\000\
\100\000\099\000\100\000\000\000\091\000\000\000\123\000\000\000\
\123\000\000\000\000\000\000\000\029\000\029\000\000\000\000\000\
\091\000\000\000\000\000\000\000\000\000\029\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\091\000\
\091\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\091\000\000\000\091\000\173\000\000\000\000\000\
\000\000\000\000\029\000\000\000\099\000\179\000\000\000\000\000\
\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\000\000\000\000\000\
\000\000\029\000\029\000\196\000\197\000\198\000\199\000\200\000\
\201\000\000\000\000\000\000\000\029\000\000\000\029\000\000\000\
\000\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
\099\000\099\000\099\000\099\000\099\000\223\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\024\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\022\000\000\000\023\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\026\000\027\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\029\000\
\030\000\031\000\000\000\000\000\032\000\033\000\034\000\018\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\038\000\
\000\000\000\000\000\000\020\000\000\000\000\000\039\000\044\001\
\040\000\000\000\000\000\000\000\041\000\049\001\050\001\000\000\
\000\000\021\000\000\000\022\000\000\000\023\000\000\000\000\000\
\059\001\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\026\000\027\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\029\000\
\030\000\031\000\000\000\000\000\032\000\033\000\034\000\000\000\
\035\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\143\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\020\000\
\040\000\000\000\144\000\000\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\110\001\022\000\
\059\001\023\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\026\000\027\000\000\000\018\000\000\000\028\000\
\000\000\000\000\000\000\029\000\030\000\031\000\000\000\000\000\
\032\000\033\000\034\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\038\000\000\000\000\000\000\000\021\000\
\000\000\022\000\039\000\023\000\040\000\000\000\000\000\024\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\026\000\027\000\000\000\164\000\
\000\000\028\000\000\000\000\000\000\000\029\000\030\000\031\000\
\000\000\000\000\032\000\033\000\034\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\164\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\038\000\000\000\000\000\
\000\000\164\000\000\000\164\000\039\000\164\000\040\000\000\000\
\000\000\164\000\041\000\000\000\254\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\164\000\000\000\164\000\164\000\
\000\000\000\000\000\000\164\000\000\000\020\000\000\000\164\000\
\164\000\164\000\000\000\000\000\164\000\164\000\164\000\000\000\
\164\000\000\000\000\000\021\000\000\000\022\000\000\000\023\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\164\000\000\000\025\000\164\000\
\026\000\027\000\000\000\000\000\000\000\028\000\164\000\020\000\
\164\000\029\000\030\000\031\000\164\000\000\000\032\000\033\000\
\034\000\000\000\103\000\000\000\000\000\021\000\000\000\022\000\
\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\025\000\038\000\026\000\027\000\000\000\000\000\000\000\028\000\
\039\000\000\000\040\000\029\000\030\000\031\000\041\000\000\000\
\032\000\033\000\034\000\000\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\038\000\000\000\021\000\000\000\022\000\
\000\000\023\000\039\000\000\000\040\000\024\000\000\000\000\000\
\041\000\000\000\000\000\191\000\000\000\000\000\000\000\000\000\
\025\000\000\000\026\000\027\000\000\000\000\000\000\000\028\000\
\000\000\020\000\000\000\029\000\030\000\031\000\000\000\000\000\
\032\000\033\000\034\000\000\000\103\000\000\000\000\000\102\000\
\000\000\022\000\000\000\023\000\000\000\000\000\000\000\024\000\
\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\000\000\025\000\038\000\026\000\027\000\000\000\000\000\
\000\000\028\000\039\000\020\000\040\000\029\000\030\000\031\000\
\041\000\000\000\032\000\033\000\034\000\000\000\103\000\000\000\
\000\000\021\000\000\000\022\000\000\000\023\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\025\000\038\000\026\000\027\000\
\000\000\000\000\000\000\028\000\039\000\020\000\040\000\029\000\
\030\000\031\000\041\000\000\000\032\000\033\000\034\000\000\000\
\035\000\000\000\000\000\021\000\000\000\022\000\000\000\023\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\025\000\038\000\
\026\000\027\000\000\000\000\000\000\000\028\000\039\000\000\000\
\040\000\029\000\030\000\031\000\041\000\000\000\032\000\033\000\
\034\000\000\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\040\000\000\000\000\000\000\000\041\000"

let yycheck = "\005\000\
\111\000\035\000\114\000\000\000\000\000\052\000\224\000\001\001\
\082\000\000\000\202\000\001\001\010\001\005\000\001\001\010\001\
\046\000\039\001\018\001\025\000\031\001\010\001\018\001\001\001\
\093\000\034\000\032\000\024\001\073\001\035\000\036\000\000\000\
\073\001\032\001\007\000\023\001\001\001\087\000\088\000\050\001\
\046\000\110\000\024\001\092\001\032\001\023\001\034\001\047\001\
\039\001\040\001\095\001\085\000\102\000\059\000\095\001\050\001\
\105\001\018\001\023\001\018\001\018\001\253\000\107\001\016\001\
\109\001\025\001\107\001\029\001\023\001\103\000\057\001\024\001\
\183\000\096\001\023\001\097\001\082\000\073\001\084\000\085\000\
\023\001\087\000\088\000\023\001\093\000\091\000\092\000\000\000\
\047\001\058\001\082\000\125\000\084\000\092\001\124\000\093\001\
\102\000\103\000\093\001\095\001\090\001\110\000\075\000\065\001\
\093\001\111\000\101\001\043\001\105\001\104\001\092\001\107\001\
\073\001\107\001\073\001\073\001\111\001\105\001\124\000\125\000\
\126\000\130\000\131\000\132\000\133\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\141\000\073\001\095\001\090\001\
\095\001\095\001\172\000\050\001\102\001\090\001\023\001\018\001\
\055\001\023\001\107\001\090\001\107\001\107\001\184\000\092\001\
\186\000\227\000\028\001\095\001\018\001\119\001\081\001\001\001\
\207\000\050\001\055\001\000\000\105\001\018\001\172\000\107\001\
\017\001\062\001\093\001\024\001\047\001\012\001\013\001\079\001\
\050\001\183\000\184\000\080\001\186\000\082\001\188\000\039\001\
\050\001\047\001\025\001\061\001\027\001\096\001\000\000\098\001\
\073\001\041\001\068\001\073\001\202\000\033\001\072\001\073\001\
\074\001\122\000\123\000\018\001\078\001\079\001\055\001\047\001\
\079\001\057\001\050\001\081\001\246\000\062\001\095\001\057\001\
\081\001\095\001\224\000\058\001\059\001\227\000\081\001\001\001\
\002\001\080\001\107\001\101\001\097\001\107\001\104\001\007\001\
\047\001\050\001\081\001\227\000\242\000\111\001\081\001\000\000\
\246\000\001\001\050\001\117\001\092\001\018\001\252\000\050\001\
\081\001\081\001\081\001\001\001\002\001\003\001\004\001\103\001\
\081\001\096\001\008\001\098\001\252\000\101\001\092\001\092\001\
\104\001\031\001\001\001\005\001\031\001\045\001\005\001\111\001\
\070\001\081\001\050\001\010\001\011\001\032\001\000\001\029\001\
\050\001\016\001\017\001\018\001\101\001\011\001\018\001\104\001\
\023\001\024\001\066\001\032\001\032\001\101\001\111\001\024\001\
\104\001\032\001\101\001\034\001\001\001\104\001\050\001\111\001\
\039\001\033\001\041\001\050\001\111\001\034\001\105\001\024\001\
\047\001\048\001\011\001\065\001\050\001\000\000\032\001\032\001\
\055\001\093\001\057\001\050\001\016\001\033\001\050\001\062\001\
\069\001\069\001\080\001\109\001\050\001\033\001\069\001\070\001\
\071\001\016\001\073\001\050\001\075\001\050\001\018\001\018\001\
\001\001\023\001\069\001\016\001\005\001\023\001\033\001\050\001\
\102\001\010\001\011\001\090\001\069\001\092\001\093\001\109\001\
\095\001\018\001\093\001\070\001\017\001\107\001\023\001\024\001\
\103\001\119\001\105\001\032\001\107\001\018\001\109\001\032\001\
\039\001\034\001\050\001\092\001\050\001\032\001\039\001\018\001\
\041\001\047\001\050\001\018\001\032\001\001\001\047\001\048\001\
\105\001\000\000\039\001\050\001\039\001\024\001\050\001\105\001\
\057\001\033\001\047\001\048\001\047\001\048\001\032\001\105\001\
\050\001\024\001\018\001\033\001\069\001\070\001\071\001\005\001\
\073\001\001\001\075\001\023\001\001\001\023\001\023\001\033\001\
\005\001\070\001\071\001\070\001\071\001\010\001\075\001\047\001\
\075\001\090\001\047\001\092\001\093\001\018\001\095\001\018\001\
\018\001\050\001\023\001\024\001\081\001\032\001\103\001\001\001\
\105\001\016\001\107\001\032\001\109\001\034\001\016\001\050\001\
\010\001\023\001\039\001\039\001\041\001\000\000\023\001\000\000\
\105\001\011\001\047\001\048\001\024\001\023\001\024\001\000\000\
\000\000\011\001\016\001\023\001\057\001\011\001\032\001\050\001\
\034\001\050\001\032\001\011\001\047\001\024\001\002\000\041\001\
\069\001\070\001\071\001\024\001\073\001\024\001\075\001\047\001\
\001\001\032\001\047\001\039\001\005\001\003\000\047\001\057\001\
\004\000\010\001\011\001\047\001\048\001\090\001\235\000\092\001\
\093\001\018\001\095\001\069\001\099\001\054\001\023\001\024\001\
\097\001\000\000\103\001\038\001\105\001\008\001\107\001\032\001\
\109\001\034\001\070\001\071\001\126\000\077\001\039\001\075\001\
\041\001\227\000\092\001\093\001\163\000\255\255\047\001\048\001\
\255\255\255\255\255\255\000\000\255\255\103\001\255\255\105\001\
\057\001\107\001\001\000\002\000\003\000\004\000\005\000\006\000\
\007\000\255\255\255\255\255\255\069\001\070\001\071\001\255\255\
\073\001\255\255\075\001\255\255\255\255\255\255\001\001\255\255\
\255\255\255\255\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\090\001\255\255\092\001\093\001\255\255\095\001\018\001\
\255\255\255\255\255\255\255\255\023\001\024\001\103\001\255\255\
\105\001\255\255\255\255\255\255\109\001\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\255\255\041\001\255\255\
\255\255\255\255\255\255\255\255\047\001\048\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\255\255\073\001\255\255\
\075\001\255\255\001\001\255\255\255\255\255\255\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\090\001\
\255\255\092\001\093\001\018\001\095\001\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\103\001\255\255\105\001\255\255\
\255\255\032\001\109\001\034\001\255\255\000\000\255\255\255\255\
\039\001\255\255\041\001\255\255\255\255\255\255\255\255\255\255\
\047\001\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\255\255\073\001\255\255\075\001\255\255\255\255\255\255\
\001\001\000\000\255\255\255\255\005\001\255\255\255\255\000\000\
\255\255\010\001\011\001\255\255\255\255\092\001\093\001\255\255\
\095\001\018\001\255\255\255\255\255\255\255\255\023\001\024\001\
\103\001\255\255\105\001\255\255\107\001\255\255\109\001\032\001\
\255\255\034\001\255\255\255\255\255\255\255\255\039\001\255\255\
\041\001\255\255\255\255\255\255\255\255\255\255\047\001\048\001\
\255\255\255\255\001\001\000\000\255\255\255\255\005\001\255\255\
\057\001\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\069\001\070\001\071\001\255\255\
\023\001\024\001\075\001\255\255\001\001\255\255\255\255\255\255\
\005\001\032\001\255\255\034\001\255\255\010\001\011\001\255\255\
\039\001\090\001\041\001\092\001\093\001\000\000\255\255\255\255\
\047\001\048\001\023\001\024\001\255\255\255\255\103\001\255\255\
\105\001\255\255\057\001\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\039\001\255\255\041\001\255\255\069\001\070\001\
\071\001\255\255\047\001\048\001\075\001\255\255\028\001\255\255\
\255\255\255\255\255\255\255\255\057\001\255\255\255\255\255\255\
\255\255\255\255\255\255\090\001\255\255\092\001\093\001\255\255\
\069\001\070\001\071\001\255\255\050\001\255\255\075\001\001\001\
\103\001\255\255\105\001\005\001\255\255\255\255\255\255\061\001\
\010\001\255\255\255\255\255\255\255\255\090\001\068\001\092\001\
\093\001\255\255\072\001\073\001\074\001\023\001\024\001\255\255\
\078\001\079\001\103\001\255\255\105\001\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\039\001\255\255\041\001\
\255\255\255\255\255\255\255\255\255\255\047\001\048\001\101\001\
\255\255\255\255\104\001\255\255\255\255\255\255\255\255\057\001\
\255\255\111\001\255\255\255\255\255\255\255\255\001\001\117\001\
\255\255\255\255\005\001\069\001\070\001\071\001\255\255\010\001\
\255\255\075\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\090\001\255\255\092\001\093\001\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\103\001\041\001\105\001\
\255\255\255\255\001\001\255\255\047\001\048\001\005\001\255\255\
\001\001\255\255\255\255\010\001\005\001\255\255\057\001\255\255\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\069\001\070\001\071\001\255\255\023\001\024\001\
\075\001\032\001\255\255\034\001\255\255\255\255\255\255\032\001\
\255\255\034\001\041\001\255\255\255\255\255\255\039\001\090\001\
\041\001\092\001\093\001\255\255\001\001\255\255\047\001\048\001\
\255\255\255\255\057\001\255\255\103\001\010\001\105\001\255\255\
\057\001\255\255\255\255\255\255\255\255\255\255\069\001\255\255\
\255\255\255\255\023\001\024\001\069\001\070\001\071\001\255\255\
\255\255\255\255\075\001\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\090\001\041\001\092\001\093\001\255\255\
\255\255\090\001\255\255\092\001\093\001\030\000\255\255\010\001\
\103\001\034\000\105\001\255\255\057\001\255\255\103\001\255\255\
\105\001\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\069\001\255\255\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\090\001\255\255\092\001\
\093\001\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\255\255\255\255\103\001\255\255\105\001\086\000\255\255\255\255\
\255\255\255\255\069\001\255\255\093\000\094\000\255\255\255\255\
\097\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\110\000\255\255\255\255\
\255\255\092\001\093\001\116\000\117\000\118\000\119\000\120\000\
\121\000\255\255\255\255\255\255\103\001\255\255\105\001\255\255\
\255\255\130\000\131\000\132\000\133\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\141\000\142\000\255\255\000\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\044\001\255\255\046\001\255\255\255\255\
\255\255\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\068\001\255\255\255\255\255\255\072\001\
\073\001\074\001\255\255\255\255\077\001\078\001\079\001\000\001\
\081\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\093\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\101\001\255\255\255\255\104\001\
\255\255\255\255\255\255\028\001\255\255\255\255\111\001\000\001\
\113\001\255\255\255\255\255\255\117\001\006\001\007\001\255\255\
\255\255\042\001\255\255\044\001\255\255\046\001\255\255\255\255\
\017\001\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\068\001\255\255\255\255\255\255\072\001\
\073\001\074\001\255\255\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\000\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\093\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\101\001\255\255\019\001\104\001\
\255\255\255\255\255\255\255\255\255\255\255\255\111\001\028\001\
\113\001\255\255\031\001\255\255\117\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\095\001\044\001\
\097\001\046\001\255\255\255\255\255\255\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\061\001\255\255\063\001\064\001\255\255\000\001\255\255\068\001\
\255\255\255\255\255\255\072\001\073\001\074\001\255\255\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\101\001\255\255\255\255\104\001\255\255\255\255\255\255\042\001\
\255\255\044\001\111\001\046\001\113\001\255\255\255\255\050\001\
\117\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\063\001\064\001\255\255\000\001\
\255\255\068\001\255\255\255\255\255\255\072\001\073\001\074\001\
\255\255\255\255\077\001\078\001\079\001\255\255\081\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\101\001\255\255\255\255\104\001\255\255\255\255\
\255\255\042\001\255\255\044\001\111\001\046\001\113\001\255\255\
\255\255\050\001\117\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\068\001\255\255\028\001\255\255\072\001\
\073\001\074\001\255\255\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\042\001\255\255\044\001\255\255\046\001\
\255\255\255\255\255\255\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\101\001\255\255\061\001\104\001\
\063\001\064\001\255\255\255\255\255\255\068\001\111\001\028\001\
\113\001\072\001\073\001\074\001\117\001\255\255\077\001\078\001\
\079\001\255\255\081\001\255\255\255\255\042\001\255\255\044\001\
\255\255\046\001\255\255\255\255\255\255\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\101\001\255\255\
\061\001\104\001\063\001\064\001\255\255\255\255\255\255\068\001\
\111\001\255\255\113\001\072\001\073\001\074\001\117\001\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\093\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\101\001\255\255\255\255\104\001\255\255\042\001\255\255\044\001\
\255\255\046\001\111\001\255\255\113\001\050\001\255\255\255\255\
\117\001\255\255\255\255\120\001\255\255\255\255\255\255\255\255\
\061\001\255\255\063\001\064\001\255\255\255\255\255\255\068\001\
\255\255\028\001\255\255\072\001\073\001\074\001\255\255\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\042\001\
\255\255\044\001\255\255\046\001\255\255\255\255\255\255\050\001\
\093\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\101\001\255\255\061\001\104\001\063\001\064\001\255\255\255\255\
\255\255\068\001\111\001\028\001\113\001\072\001\073\001\074\001\
\117\001\255\255\077\001\078\001\079\001\255\255\081\001\255\255\
\255\255\042\001\255\255\044\001\255\255\046\001\255\255\255\255\
\255\255\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\101\001\255\255\061\001\104\001\063\001\064\001\
\255\255\255\255\255\255\068\001\111\001\028\001\113\001\072\001\
\073\001\074\001\117\001\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\042\001\255\255\044\001\255\255\046\001\
\255\255\255\255\255\255\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\101\001\255\255\061\001\104\001\
\063\001\064\001\255\255\255\255\255\255\068\001\111\001\255\255\
\113\001\072\001\073\001\074\001\117\001\255\255\077\001\078\001\
\079\001\255\255\081\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\101\001\255\255\
\255\255\104\001\255\255\255\255\255\255\255\255\255\255\255\255\
\111\001\255\255\113\001\255\255\255\255\255\255\117\001"

let yynames_const = "\
  AND\000\
  ANDAND\000\
  ASSERT\000\
  ASSUME\000\
  AT\000\
  BIND\000\
  BOOL\000\
  BREAK\000\
  BY\000\
  CASE\000\
  CBRACE\000\
  CHECKENTAIL\000\
  CAPTURERESIDUE\000\
  CLASS\000\
  COERCION\000\
  COLON\000\
  COLONCOLON\000\
  COMMA\000\
  COMPOSE\000\
  CONSEQ\000\
  CONST\000\
  CONTINUE\000\
  CPAREN\000\
  CSQUARE\000\
  DATA\000\
  DDEBUG\000\
  DTIME\000\
  DIFF\000\
  DISTR\000\
  DIV\000\
  DOLLAR\000\
  DOT\000\
  DOUBLEQUOTE\000\
  DERIVE\000\
  DYNAMIC\000\
  ELSE\000\
  ENSURES\000\
  ENUM\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EQUIV\000\
  EXISTS\000\
  EXTENDS\000\
  FALSE\000\
  FLOAT\000\
  FORALL\000\
  GT\000\
  GTE\000\
  HASH\000\
  IF\000\
  IMPLIES\000\
  IMPLY\000\
  IMPORT\000\
  IN\000\
  LEFTARROW\000\
  LEMMA\000\
  LET\000\
  NOTIN\000\
  BAGMAX\000\
  BAGMIN\000\
  FOLD\000\
  INT\000\
  INTERR\000\
  INTERSECT\000\
  INV\000\
  LT\000\
  LTE\000\
  MAX\000\
  MINUS\000\
  MIN\000\
  NEQ\000\
  NEW\000\
  NOT\000\
  NULL\000\
  OBRACE\000\
  OFF\000\
  OPAREN\000\
  ON\000\
  OP_ADD_ASSIGN\000\
  OP_DEC\000\
  OP_DIV_ASSIGN\000\
  OP_INC\000\
  OP_MOD_ASSIGN\000\
  OP_MULT_ASSIGN\000\
  OP_SUB_ASSIGN\000\
  OR\000\
  OROR\000\
  ORWORD\000\
  OSQUARE\000\
  PERCENT\000\
  PLUS\000\
  PRED\000\
  PRIME\000\
  PRINT\000\
  REF\000\
  REQUIRES\000\
  RETURN\000\
  RIGHTARROW\000\
  SEMICOLON\000\
  SPLIT\000\
  STAR\000\
  STATIC\000\
  SUBSET\000\
  THEN\000\
  TO\000\
  TRUE\000\
  VIEW\000\
  VOID\000\
  UNFOLD\000\
  UNION\000\
  WHERE\000\
  WHILE\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  JAVA\000\
  LITERAL_FLOAT\000\
  LITERAL_INTEGER\000\
  RES\000\
  SELF\000\
  THIS\000\
  FLOW\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "sparser.mly"
   ([])
# 1166 "sparser.ml"
               : Sleekcommons.command list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'command_list) in
    Obj.repr(
# 230 "sparser.mly"
                (List.rev _1)
# 1173 "sparser.ml"
               : Sleekcommons.command list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 234 "sparser.mly"
                      ( [_1] )
# 1180 "sparser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 235 "sparser.mly"
                                   ( _2 :: _1 )
# 1188 "sparser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 239 "sparser.mly"
                    (_1)
# 1195 "sparser.ml"
               : Sleekcommons.command))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "sparser.mly"
    ( EmptyCmd )
# 1201 "sparser.ml"
               : Sleekcommons.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.data_decl) in
    Obj.repr(
# 243 "sparser.mly"
              (
	DataDef _1
  )
# 1210 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.view_decl) in
    Obj.repr(
# 246 "sparser.mly"
              (
	  PredDef _1
	)
# 1219 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.coercion_decl) in
    Obj.repr(
# 249 "sparser.mly"
                  (
	  LemmaDef _1
	)
# 1228 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_decl) in
    Obj.repr(
# 252 "sparser.mly"
             (
	  _1
	)
# 1237 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'checkentail_cmd) in
    Obj.repr(
# 255 "sparser.mly"
                    (
	  EntailCheck _1
	)
# 1246 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'captureresidue_cmd) in
    Obj.repr(
# 258 "sparser.mly"
                       (
	  CaptureResidue _1
	)
# 1255 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'print_cmd) in
    Obj.repr(
# 261 "sparser.mly"
              (
	  PrintCmd _1
	)
# 1264 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'time_cmd) in
    Obj.repr(
# 264 "sparser.mly"
             (_1)
# 1271 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "sparser.mly"
          (
  { prog_data_decls = [];
	prog_global_var_decls = [];
	prog_enum_decls = [];
	prog_view_decls = [];
	prog_proc_decls = [];
	prog_coercion_decls = []; }
)
# 1284 "sparser.ml"
               : Iast.prog_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'data_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'data_body) in
    Obj.repr(
# 280 "sparser.mly"
                             (
	  { data_name = _1;
		data_fields = _2;
		data_parent_name = "Object";
		data_invs = []; (* F.mkTrue (get_pos 1); *)
		data_methods = [] }
	)
# 1298 "sparser.ml"
               : Iast.data_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 290 "sparser.mly"
                    ( _2 )
# 1305 "sparser.ml"
               : 'data_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_field_list) in
    Obj.repr(
# 294 "sparser.mly"
                                 ( _2 )
# 1312 "sparser.ml"
               : 'data_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 298 "sparser.mly"
    ( [] )
# 1318 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semicolon) in
    Obj.repr(
# 299 "sparser.mly"
                             ( List.rev _1 )
# 1326 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "sparser.mly"
    ()
# 1332 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "sparser.mly"
              ()
# 1338 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 308 "sparser.mly"
                   ( [((_1, _2), get_pos 1)] )
# 1346 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 309 "sparser.mly"
                                        (
			if List.mem _4 (List.map (fun f -> snd (fst f)) _1) then
				report_error (get_pos 4) (_4 ^ " is duplicated")
			else
				((_3, _4), get_pos 3) :: _1
		)
# 1360 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'view_header) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'view_body) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_inv) in
    Obj.repr(
# 320 "sparser.mly"
                                          (
	{ _1 with view_formula = (fst _3); view_invariant = _4; try_case_inference = (snd _3) }
  )
# 1371 "sparser.ml"
               : Iast.view_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'view_header) in
    Obj.repr(
# 323 "sparser.mly"
                         (
	  report_error (get_pos 2) ("use == to define a view")
	)
# 1380 "sparser.ml"
               : Iast.view_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 329 "sparser.mly"
    ( (P.mkTrue no_pos, []) )
# 1386 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 330 "sparser.mly"
                                 ( (_2, _3) )
# 1394 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    Obj.repr(
# 333 "sparser.mly"
    ( [] )
# 1400 "sparser.ml"
               : 'opt_branches))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'branches) in
    Obj.repr(
# 334 "sparser.mly"
                                 ( _3 )
# 1407 "sparser.ml"
               : 'opt_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'branch) in
    Obj.repr(
# 338 "sparser.mly"
           ([_1])
# 1414 "sparser.ml"
               : 'branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'branches) in
    Obj.repr(
# 339 "sparser.mly"
                              ( _1 :: _3 )
# 1422 "sparser.ml"
               : 'branches))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "sparser.mly"
    ( "" )
# 1428 "sparser.ml"
               : 'opt_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 343 "sparser.mly"
                                             ( _2 )
# 1435 "sparser.ml"
               : 'opt_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 346 "sparser.mly"
                                                         ( (_2, _5) )
# 1443 "sparser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_ann_cid_list) in
    Obj.repr(
# 351 "sparser.mly"
                                           (
	let cids, anns = List.split _4 in
    let cids, br_labels = List.split cids in
	  if List.exists 
		(fun x -> match snd x with | Primed -> true | Unprimed -> false) cids 
	  then
		report_error (get_pos 1) 
		  ("variables in view header are not allowed to be primed")
	  else
		let modes = get_modes anns in
		  { view_name = _2;
			view_data_name = "";
			view_vars = List.map fst cids;
            view_labels = br_labels;
			view_modes = modes;
			view_typed_vars = [];
			view_formula = F.mkETrue top_flow (get_pos 1);
			view_invariant = (P.mkTrue (get_pos 1), []);
			try_case_inference = false;
			}
  )
# 1471 "sparser.ml"
               : 'view_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 375 "sparser.mly"
               ( (_1, Unprimed) )
# 1478 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 376 "sparser.mly"
                     ( (_1, Primed) )
# 1485 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 377 "sparser.mly"
        ( (res, Unprimed) )
# 1492 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 378 "sparser.mly"
         ( (self, Unprimed) )
# 1499 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 379 "sparser.mly"
         ( (this, Unprimed) )
# 1506 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iformula.struc_formula*bool) in
    Obj.repr(
# 383 "sparser.mly"
             ( ((F.subst_stub_flow_struc top_flow (fst _1)),(snd _1)) )
# 1513 "sparser.ml"
               : 'view_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list_aux) in
    Obj.repr(
# 396 "sparser.mly"
                      ( List.rev _1 )
# 1520 "sparser.ml"
               : 'heap_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 400 "sparser.mly"
             ( [_1] )
# 1527 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 401 "sparser.mly"
                                     ( _3 :: _1)
# 1535 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 405 "sparser.mly"
         ( _1 (* including variables. to be resolved later *) )
# 1542 "sparser.ml"
               : 'heap_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 409 "sparser.mly"
    ( [] )
# 1548 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list2) in
    Obj.repr(
# 410 "sparser.mly"
                   ( List.rev _1 )
# 1555 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 414 "sparser.mly"
             ( [_1] )
# 1562 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 415 "sparser.mly"
                                  (
			if List.mem (fst _3) (List.map fst _1) then
				report_error (get_pos 3) ((fst _3) ^ " is duplicated")
			else
				_3 :: _1
		)
# 1575 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 424 "sparser.mly"
                      ( (_1, _3) )
# 1583 "sparser.ml"
               : 'heap_arg2))
; (fun __caml_parser_env ->
    Obj.repr(
# 428 "sparser.mly"
    (
	[] : (ident * primed) list
  )
# 1591 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid_list) in
    Obj.repr(
# 431 "sparser.mly"
             (
	  List.rev _1 : (ident * primed) list
	)
# 1600 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 437 "sparser.mly"
        (
	([_1]) : (ident * primed) list
  )
# 1609 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 440 "sparser.mly"
                       (
	  if List.mem (fst _3) (List.map fst _1) then
		report_error (get_pos 3) ("identifier " ^ (fst _3) ^ " is duplicated")
	  else
		(_3 :: _1) : (ident * primed) list
	)
# 1622 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "sparser.mly"
    ( [] )
# 1628 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid_list) in
    Obj.repr(
# 452 "sparser.mly"
                 (
	  List.rev _1
	)
# 1637 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 457 "sparser.mly"
            (
	[_1]
  )
# 1646 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ann_cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 460 "sparser.mly"
                               (
	  _3 :: _1
	)
# 1656 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_branch) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ann_list) in
    Obj.repr(
# 466 "sparser.mly"
                                (
	((_2, _1), _3)
  )
# 1667 "sparser.ml"
               : 'ann_cid))
; (fun __caml_parser_env ->
    Obj.repr(
# 472 "sparser.mly"
    (
	[]
  )
# 1675 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_list) in
    Obj.repr(
# 475 "sparser.mly"
             (
	  List.rev _1
	)
# 1684 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 481 "sparser.mly"
        (
	[_1]
  )
# 1693 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ann_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 484 "sparser.mly"
                 (
	  _2 :: _1
	)
# 1703 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 490 "sparser.mly"
          (
	AnnMode ModeIn
  )
# 1711 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 493 "sparser.mly"
                  (
	if _2 = "out" then AnnMode ModeOut
	else report_error (get_pos 2) ("unrecognized mode: " ^ _2)
  )
# 1721 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cid_list) in
    Obj.repr(
# 499 "sparser.mly"
                               (_2)
# 1728 "sparser.ml"
               : 'sq_clist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extended_constr) in
    Obj.repr(
# 503 "sparser.mly"
                  ((_1,false))
# 1735 "sparser.ml"
               : Iformula.struc_formula*bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 504 "sparser.mly"
                      (((Iformula.formula_to_struc_formula _1),true))
# 1742 "sparser.ml"
               : Iformula.struc_formula*bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 509 "sparser.mly"
            ([_1])
# 1749 "sparser.ml"
               : 'extended_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extended_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 510 "sparser.mly"
                                   (_3::_1)
# 1757 "sparser.ml"
               : 'extended_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 514 "sparser.mly"
   ([])
# 1763 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 515 "sparser.mly"
            ([_1])
# 1770 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 516 "sparser.mly"
                                   (_2)
# 1777 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 521 "sparser.mly"
  (
			let _ = if(List.length (Ipure.look_for_anonymous_pure_formula _1))>0 then 
				report_error (get_pos 1) ("anonimous variables in case guard are disalowed")
				else true in 
			[(_1,_3)])
# 1789 "sparser.ml"
               : 'impl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'impl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pure_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 526 "sparser.mly"
                                                             (((_2,_4)::_1))
# 1798 "sparser.ml"
               : 'impl_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'impl_list) in
    Obj.repr(
# 531 "sparser.mly"
 (
		Iformula.ECase 
			{
				Iformula.formula_case_branches = _3;
				Iformula.formula_case_pos = (get_pos 3) 
			}
	)
# 1811 "sparser.ml"
               : 'r_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sq_clist) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'one_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr_opt) in
    Obj.repr(
# 539 "sparser.mly"
 (Iformula.EBase 
						{
						 	Iformula.formula_ext_explicit_inst = _1;
						 	Iformula.formula_ext_implicit_inst = [];
							Iformula.formula_ext_exists = [];
						 	Iformula.formula_ext_base = _2;				
						 	Iformula.formula_ext_continuation = _3;
						 	Iformula.formula_ext_pos = (get_pos 2);
							} 
		)
# 1829 "sparser.ml"
               : 'r_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_constr) in
    Obj.repr(
# 554 "sparser.mly"
               ( (* each case of a view definition *)
	_1
  )
# 1838 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'one_constr) in
    Obj.repr(
# 557 "sparser.mly"
                                         (
	  F.mkOr _1 _3 (get_pos 2)
	)
# 1848 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 560 "sparser.mly"
          (
	  report_error (get_pos 1) ("parse error in constraints")
	)
# 1856 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_constr) in
    Obj.repr(
# 565 "sparser.mly"
               ( _1 )
# 1863 "sparser.ml"
               : 'one_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'core_constr) in
    Obj.repr(
# 566 "sparser.mly"
                                                        (
	  match _5 with
		| F.Base ({F.formula_base_heap = h;
               F.formula_base_pure = p;
               F.formula_base_flow = fl;
               F.formula_base_branches = b}) ->
			F.mkExists _3 h p fl b (get_pos 1)
		| _ -> report_error (get_pos 4) ("only Base is expected here.")
	)
# 1879 "sparser.ml"
               : 'one_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'heap_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 579 "sparser.mly"
                                   ( F.replace_branches (snd _2) (F.formula_of_heap_with_flow _1 (fst _2) (get_pos 1)) )
# 1887 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 580 "sparser.mly"
                                   ( F.replace_branches (snd _2) (F.formula_of_pure_with_flow _1 (fst _2) (get_pos 1)) )
# 1895 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 581 "sparser.mly"
                                                   ( F.mkBase _1 _3 (fst _4) (snd _4) (get_pos 2) )
# 1904 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'flow_constraints) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 585 "sparser.mly"
                                 ( (_1,_2))
# 1912 "sparser.ml"
               : 'flows_and_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 586 "sparser.mly"
                ((stub_flow,_1))
# 1919 "sparser.ml"
               : 'flows_and_branches))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 589 "sparser.mly"
                     (_3)
# 1927 "sparser.ml"
               : 'flow_constraints))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 592 "sparser.mly"
                                                          ((fresh_branch_point_id _3))
# 1934 "sparser.ml"
               : 'opt_formula_label))
; (fun __caml_parser_env ->
    Obj.repr(
# 593 "sparser.mly"
 ((fresh_branch_point_id ""))
# 1940 "sparser.ml"
               : 'opt_formula_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 596 "sparser.mly"
                       ( _1 )
# 1947 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 597 "sparser.mly"
                                        ( F.mkStar _1 _3 (get_pos 2) )
# 1955 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 601 "sparser.mly"
                                                                   (
	let h = F.HeapNode { F.h_formula_heap_node = _1;
						 F.h_formula_heap_name = _3;
						 F.h_formula_heap_full = false;
						 F.h_formula_heap_with_inv = false;
						 F.h_formula_heap_pseudo_data = false;
						 F.h_formula_heap_arguments = _5;
						 F.h_formula_heap_label = _7;
						 F.h_formula_heap_pos = get_pos 2 } in
	  h
  )
# 1975 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'opt_heap_arg_list2) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 612 "sparser.mly"
                                                                        (
	  let h = F.HeapNode2 { F.h_formula_heap2_node = _1;
							F.h_formula_heap2_name = _3;
							F.h_formula_heap2_full = false;
							F.h_formula_heap2_with_inv = false;
							F.h_formula_heap2_pseudo_data = false;
							F.h_formula_heap2_arguments = _5;
							F.h_formula_heap2_label = _7;
							F.h_formula_heap2_pos = get_pos 2 } in
		h
	)
# 1995 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pure_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 626 "sparser.mly"
                                         ( match _1 with 
	| P.BForm (b,_) -> P.BForm (b,_2)
    | P.And _ -> _1
    | P.Or  (b1,b2,_,l) -> P.Or(b1,b2,_2,l)
    | P.Not (b1,_,l) -> P.Not(b1,_2,l)
    | P.Forall (q,b1,_,l)-> P.Forall(q,b1,_2,l)
    | P.Exists (q,b1,_,l)-> P.Exists(q,b1,_2,l))
# 2009 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pure_constr) in
    Obj.repr(
# 633 "sparser.mly"
                                       ( P.mkAnd _1 _3 (get_pos 2) )
# 2017 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 637 "sparser.mly"
                               ( P.mkOr _1 _3 None (get_pos 2) )
# 2025 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 638 "sparser.mly"
                                           ( P.mkOr _1 _3 None (get_pos 2) )
# 2033 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbconstr) in
    Obj.repr(
# 642 "sparser.mly"
             (
	fst _1
  )
# 2042 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_pure_constr) in
    Obj.repr(
# 645 "sparser.mly"
                                          (
	  _2
	)
# 2051 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    Obj.repr(
# 648 "sparser.mly"
                                                        (
	  let qf f v = P.mkExists [v] f None (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 2063 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    Obj.repr(
# 653 "sparser.mly"
                                                        (
	  let qf f v = P.mkForall [v] f None (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 2075 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 658 "sparser.mly"
         (
	  P.mkTrue (get_pos 1)
	)
# 2083 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 661 "sparser.mly"
          (
	  P.mkFalse (get_pos 1)
	)
# 2091 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 664 "sparser.mly"
        (
	  P.BForm (P.mkBVar _1 (get_pos 1), None )
	)
# 2100 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 667 "sparser.mly"
            (
	  P.mkNot (P.BForm (P.mkBVar _2 (get_pos 2), None )) None (get_pos 1)
	)
# 2109 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bconstr) in
    Obj.repr(
# 673 "sparser.mly"
            (
	(fst _1, snd _1)
  )
# 2118 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 676 "sparser.mly"
                           (
	  expand_exp_list P.mkNeq _1 _3 (get_pos 2)
	)
# 2128 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 679 "sparser.mly"
                          (
	  expand_exp_list P.mkEq _1 _3 (get_pos 2)
	)
# 2138 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 682 "sparser.mly"
                          (
	  expand_exp_list P.mkLt _1 _3 (get_pos 2)
	)
# 2148 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 685 "sparser.mly"
                           (
	  expand_exp_list P.mkLte _1 _3 (get_pos 2)
	)
# 2158 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 688 "sparser.mly"
                          (
	  expand_exp_list P.mkGt _1 _3 (get_pos 2)
	)
# 2168 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 691 "sparser.mly"
                           (
	  expand_exp_list P.mkGte _1 _3 (get_pos 2)
	)
# 2178 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 697 "sparser.mly"
                           (
	let p = P.build_relation P.mkLt _1 _3 (get_pos 2) in
	  (p, Some _3)
  )
# 2189 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 701 "sparser.mly"
                            (
	  let p = P.build_relation P.mkLte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2200 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 705 "sparser.mly"
                           (
	  let p = P.build_relation P.mkGt _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2211 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 709 "sparser.mly"
                            (
	  let p = P.build_relation P.mkGte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2222 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 713 "sparser.mly"
                           (
	  let p = P.build_relation P.mkEq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2233 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 717 "sparser.mly"
                            (
	  let p = P.build_relation P.mkNeq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2244 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 722 "sparser.mly"
                (
	  (P.BForm (P.BagIn (_1, _3, get_pos 2), None), None)
	)
# 2254 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 725 "sparser.mly"
                   (
	  (P.BForm (P.BagNotIn (_1, _3, get_pos 2), None), None)
	)
# 2264 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 728 "sparser.mly"
                     (
	  (P.BForm (P.BagSub (_1, _3, get_pos 2), None), None)
	)
# 2274 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 731 "sparser.mly"
                                       (
	  (P.BForm (P.BagMax (_3, _5, get_pos 2), None), None)
	)
# 2284 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 734 "sparser.mly"
                                       (
	  (P.BForm (P.BagMin (_3, _5, get_pos 2), None), None)
	)
# 2294 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 742 "sparser.mly"
        (
		P.Var (_1, get_pos 1)
  )
# 2303 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 745 "sparser.mly"
                    (
	  P.IConst (_1, get_pos 1)
	)
# 2312 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 748 "sparser.mly"
                        (
	  P.mkMult (P.IConst (_1, get_pos 1)) (P.Var (_2, get_pos 2)) (get_pos 1)
	)
# 2322 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 751 "sparser.mly"
                   (
      P.mkMult _1 _3 (get_pos 2)
  )
# 2332 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 754 "sparser.mly"
                   (
	  P.mkAdd _1 _3 (get_pos 2)
	)
# 2342 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 757 "sparser.mly"
                    (
	  P.mkSubtract _1 _3 (get_pos 2)
	)
# 2352 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 760 "sparser.mly"
                            (
	  P.mkSubtract (P.IConst (0, get_pos 1)) _2 (get_pos 1)
	)
# 2361 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 763 "sparser.mly"
                                      (
	  P.mkMax _3 _5 (get_pos 1)
	)
# 2371 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 766 "sparser.mly"
                                      (
	  P.mkMin _3 _5 (get_pos 1)
	)
# 2381 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 769 "sparser.mly"
         (
	  P.Null (get_pos 1)
	)
# 2389 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 773 "sparser.mly"
                                (
	  P.Bag (_2, get_pos 1)
	)
# 2398 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 776 "sparser.mly"
                                      (
	  P.BagUnion (_3, get_pos 1)
	)
# 2407 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 779 "sparser.mly"
                                          (
	  P.BagIntersect (_3, get_pos 1)
	)
# 2416 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 782 "sparser.mly"
                                       (
	  P.BagDiff (_3, _5, get_pos 1)
	)
# 2426 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 789 "sparser.mly"
    ( [] )
# 2432 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 790 "sparser.mly"
              ( _1 )
# 2439 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list_rec) in
    Obj.repr(
# 794 "sparser.mly"
                  (
	List.rev _1
  )
# 2448 "sparser.ml"
               : 'cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 800 "sparser.mly"
         (
	[_1]
  )
# 2457 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list_rec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 803 "sparser.mly"
                             (
	  _3 :: _1
	)
# 2467 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'extended_meta_constr) in
    Obj.repr(
# 812 "sparser.mly"
                                                           (
	(_2, _4)
  )
# 2477 "sparser.ml"
               : 'checkentail_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 818 "sparser.mly"
                                        (
	(_3)
  )
# 2486 "sparser.ml"
               : 'captureresidue_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'id_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 824 "sparser.mly"
                                                                                    (
	(_3, _6, _8)
  )
# 2497 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 827 "sparser.mly"
                                                            (
	  ([], _3, _5)
	)
# 2507 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 833 "sparser.mly"
                        (
		PCmd _2
  )
# 2516 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 836 "sparser.mly"
                               (
	  PVar _3
	)
# 2525 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 842 "sparser.mly"
                        (Time(true, _3, get_pos 1))
# 2532 "sparser.ml"
               : 'time_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 843 "sparser.mly"
                         (Time(false, _3, get_pos 1))
# 2539 "sparser.ml"
               : 'time_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 846 "sparser.mly"
                                            (
	LetDef (_3, _5)
  )
# 2549 "sparser.ml"
               : 'let_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 852 "sparser.mly"
                      (
	MetaVar _2
  )
# 2558 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iformula.struc_formula*bool) in
    Obj.repr(
# 855 "sparser.mly"
             (
	  MetaEForm (F.subst_stub_flow_struc n_flow (fst _1))
	)
# 2567 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 858 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2576 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 863 "sparser.mly"
                      (
	MetaVar _2
  )
# 2585 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 866 "sparser.mly"
                       (
	  MetaForm (F.subst_stub_flow n_flow _1)
	)
# 2594 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 869 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2603 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'opt_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'disjunctive_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'coercion_direction) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_constr) in
    Obj.repr(
# 875 "sparser.mly"
                                                                               (
	{ coercion_type = _4;
	  coercion_name = _2;
	  coercion_head = (F.subst_stub_flow top_flow _3);
	  coercion_body = (F.subst_stub_flow top_flow _5);
	  coercion_proof = Return ({ exp_return_val = None;
								 exp_return_path_id = None ;
								 exp_return_pos = get_pos 1 })
	}
  )
# 2622 "sparser.ml"
               : Iast.coercion_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 888 "sparser.mly"
              ( Left )
# 2628 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 889 "sparser.mly"
          ( Equiv )
# 2634 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 890 "sparser.mly"
               ( Right )
# 2640 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 894 "sparser.mly"
    ( "" )
# 2646 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 895 "sparser.mly"
                                       ( _2 )
# 2653 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_array_type) in
    Obj.repr(
# 899 "sparser.mly"
                   ( _1 )
# 2660 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 900 "sparser.mly"
               ( _1 )
# 2667 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 904 "sparser.mly"
        ( int_type )
# 2673 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 905 "sparser.mly"
          ( float_type )
# 2679 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 906 "sparser.mly"
         ( bool_type )
# 2685 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 907 "sparser.mly"
               ( Named _1 )
# 2692 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 911 "sparser.mly"
                              ( Array (int_type, None) )
# 2700 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 912 "sparser.mly"
                                  ( Array (int_type, None) )
# 2708 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list_opt) in
    Obj.repr(
# 916 "sparser.mly"
                                   ()
# 2715 "sparser.ml"
               : 'rank_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 920 "sparser.mly"
    ()
# 2721 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comma_list) in
    Obj.repr(
# 921 "sparser.mly"
               ()
# 2728 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 925 "sparser.mly"
          ()
# 2734 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list) in
    Obj.repr(
# 926 "sparser.mly"
                     ()
# 2741 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 930 "sparser.mly"
               ( [_1] )
# 2748 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 931 "sparser.mly"
                             ( _3 :: _1 )
# 2756 "sparser.ml"
               : 'id_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry data_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry view_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry coercion_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry formulas *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry opt_command_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Iast.prog_decl)
let data_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Iast.data_decl)
let view_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Iast.view_decl)
let coercion_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Iast.coercion_decl)
let formulas (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Iformula.struc_formula*bool)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Sleekcommons.command)
let opt_command_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Sleekcommons.command list)
;;
