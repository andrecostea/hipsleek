type token =
  | AND
  | ANDAND
  | ASSERT
  | ASSUME
  | AT
  | ATT
  | BIND
  | BOOL
  | BREAK
  | BY
  | CASE
  | CBRACE
  | CHECKENTAIL
  | CAPTURERESIDUE
  | CLASS
  | COERCION
  | COLON
  | COLONCOLON
  | COMMA
  | COMPOSE
  | CONSEQ
  | CONST
  | CONTINUE
  | CPAREN
  | CSQUARE
  | DATA
  | DDEBUG
  | DTIME
  | DIFF
  | DISTR
  | DIV
  | DOLLAR
  | DOT
  | DOUBLEQUOTE
  | DERIVE
  | DYNAMIC
  | ELSE
  | ENSURES
  | ENUM
  | EOF
  | EQ
  | EQEQ
  | EQUIV
  | EXISTS
  | EXTENDS
  | FALSE
  | FLOAT
  | FORALL
  | GT
  | GTE
  | HASH
  | IDENTIFIER of (string)
  | IF
  | IMM
  | IMPLIES
  | IMPLY
  | IMPORT
  | IN
  | JAVA of (string)
  | LEFTARROW
  | LEMMA
  | LET
  | LITERAL_FLOAT of (float)
  | LITERAL_INTEGER of (int)
  | NOTIN
  | BAGMAX
  | BAGMIN
  | FOLD
  | INT
  | INTERR
  | INTERSECT
  | INV
  | LT
  | LTE
  | MAX
  | MINUS
  | MIN
  | NEQ
  | NEW
  | NOT
  | NULL
  | OBRACE
  | OFF
  | OPAREN
  | ON
  | OP_ADD_ASSIGN
  | OP_DEC
  | OP_DIV_ASSIGN
  | OP_INC
  | OP_MOD_ASSIGN
  | OP_MULT_ASSIGN
  | OP_SUB_ASSIGN
  | OR
  | OROR
  | ORWORD
  | OSQUARE
  | PERCENT
  | PLUS
  | PRED
  | PRIME
  | PRINT
  | REF
  | REL
  | REQUIRES
  | RES of (string)
  | RETURN
  | RIGHTARROW
  | SELF of (string)
  | SEMICOLON
  | SPLIT
  | STAR
  | STATIC
  | SUBSET
  | THEN
  | THIS of (string)
  | TO
  | TRUE
  | VIEW
  | VOID
  | UNFOLD
  | UNION
  | WHERE
  | WHILE
  | FLOW of (string)

open Parsing;;
# 2 "sparser.mly"
  (* Parser for a more expressive language *)

  open Globals
  open Iast
  open Sleekcommons

  module F = Iformula
  module P = Ipure

  type type_decl =
	| Data of data_decl
	| Enum of enum_decl
	| View of view_decl

  type decl =
    | Type of type_decl
    | Proc of proc_decl
	| Coercion of coercion_decl

  type member =
	| Field of (typed_ident * loc)
	| Inv of F.formula
	| Method of proc_decl

  type spec_qualifier =
	| Static
	| Dynamic

  type ann =
	| AnnMode of mode
	| AnnType of typ

  let get_pos x = 
	{ start_pos = Parsing.symbol_start_pos ();
	  end_pos = Parsing. symbol_end_pos ();
	  mid_pos = Parsing.rhs_start_pos x;
	}	

  let rec get_mode (anns : ann list) : mode = match anns with
	| ann :: rest -> begin
		match ann with
		  | AnnMode m -> m
		  | _ -> get_mode rest
	  end
	| [] -> ModeOut (* default to ModeOut if there is no annotation. *)

  let rec get_modes (anns : ann list list) : mode list =
	match anns with
	  | alist :: rest ->
		  let m_rest = get_modes rest in
		  let m = get_mode alist in
			m :: m_rest
	| [] -> []


  let expand_exp_list mk l r pos =
	let b, oe = l in
	  match oe with
		| Some e ->
			let tmp = P.build_relation mk e r pos in
			let res = P.mkAnd b tmp pos in
			  (res, Some r)
		| None -> report_error pos ("parse error in lhs of relational operator")

  let rec split_members mbrs = match mbrs with
	| mbr :: rest -> begin
		let fields, invs, meths = split_members rest in
		  match mbr with
			| Field f -> (f :: fields, invs, meths)
			| Inv i -> (fields, i :: invs, meths)
			| Method m ->
				(fields, invs, m :: meths)
	  end
	| [] -> ([], [], [])

# 205 "sparser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* ANDAND *);
  259 (* ASSERT *);
  260 (* ASSUME *);
  261 (* AT *);
  262 (* ATT *);
  263 (* BIND *);
  264 (* BOOL *);
  265 (* BREAK *);
  266 (* BY *);
  267 (* CASE *);
  268 (* CBRACE *);
  269 (* CHECKENTAIL *);
  270 (* CAPTURERESIDUE *);
  271 (* CLASS *);
  272 (* COERCION *);
  273 (* COLON *);
  274 (* COLONCOLON *);
  275 (* COMMA *);
  276 (* COMPOSE *);
  277 (* CONSEQ *);
  278 (* CONST *);
  279 (* CONTINUE *);
  280 (* CPAREN *);
  281 (* CSQUARE *);
  282 (* DATA *);
  283 (* DDEBUG *);
  284 (* DTIME *);
  285 (* DIFF *);
  286 (* DISTR *);
  287 (* DIV *);
  288 (* DOLLAR *);
  289 (* DOT *);
  290 (* DOUBLEQUOTE *);
  291 (* DERIVE *);
  292 (* DYNAMIC *);
  293 (* ELSE *);
  294 (* ENSURES *);
  295 (* ENUM *);
    0 (* EOF *);
  296 (* EQ *);
  297 (* EQEQ *);
  298 (* EQUIV *);
  299 (* EXISTS *);
  300 (* EXTENDS *);
  301 (* FALSE *);
  302 (* FLOAT *);
  303 (* FORALL *);
  304 (* GT *);
  305 (* GTE *);
  306 (* HASH *);
  308 (* IF *);
  309 (* IMM *);
  310 (* IMPLIES *);
  311 (* IMPLY *);
  312 (* IMPORT *);
  313 (* IN *);
  315 (* LEFTARROW *);
  316 (* LEMMA *);
  317 (* LET *);
  320 (* NOTIN *);
  321 (* BAGMAX *);
  322 (* BAGMIN *);
  323 (* FOLD *);
  324 (* INT *);
  325 (* INTERR *);
  326 (* INTERSECT *);
  327 (* INV *);
  328 (* LT *);
  329 (* LTE *);
  330 (* MAX *);
  331 (* MINUS *);
  332 (* MIN *);
  333 (* NEQ *);
  334 (* NEW *);
  335 (* NOT *);
  336 (* NULL *);
  337 (* OBRACE *);
  338 (* OFF *);
  339 (* OPAREN *);
  340 (* ON *);
  341 (* OP_ADD_ASSIGN *);
  342 (* OP_DEC *);
  343 (* OP_DIV_ASSIGN *);
  344 (* OP_INC *);
  345 (* OP_MOD_ASSIGN *);
  346 (* OP_MULT_ASSIGN *);
  347 (* OP_SUB_ASSIGN *);
  348 (* OR *);
  349 (* OROR *);
  350 (* ORWORD *);
  351 (* OSQUARE *);
  352 (* PERCENT *);
  353 (* PLUS *);
  354 (* PRED *);
  355 (* PRIME *);
  356 (* PRINT *);
  357 (* REF *);
  358 (* REL *);
  359 (* REQUIRES *);
  361 (* RETURN *);
  362 (* RIGHTARROW *);
  364 (* SEMICOLON *);
  365 (* SPLIT *);
  366 (* STAR *);
  367 (* STATIC *);
  368 (* SUBSET *);
  369 (* THEN *);
  371 (* TO *);
  372 (* TRUE *);
  373 (* VIEW *);
  374 (* VOID *);
  375 (* UNFOLD *);
  376 (* UNION *);
  377 (* WHERE *);
  378 (* WHILE *);
    0|]

let yytransl_block = [|
  307 (* IDENTIFIER *);
  314 (* JAVA *);
  318 (* LITERAL_FLOAT *);
  319 (* LITERAL_INTEGER *);
  360 (* RES *);
  363 (* SELF *);
  370 (* THIS *);
  379 (* FLOW *);
    0|]

let yylhs = "\255\255\
\008\000\008\000\009\000\009\000\007\000\007\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\001\000\
\002\000\016\000\017\000\018\000\018\000\020\000\020\000\019\000\
\019\000\003\000\003\000\024\000\024\000\026\000\026\000\027\000\
\027\000\029\000\029\000\028\000\022\000\031\000\031\000\031\000\
\031\000\031\000\023\000\004\000\004\000\034\000\034\000\034\000\
\032\000\033\000\035\000\036\000\036\000\037\000\039\000\039\000\
\040\000\040\000\041\000\042\000\042\000\043\000\043\000\030\000\
\030\000\044\000\044\000\045\000\046\000\046\000\047\000\047\000\
\048\000\048\000\049\000\006\000\006\000\050\000\050\000\053\000\
\053\000\053\000\054\000\054\000\052\000\052\000\051\000\051\000\
\051\000\055\000\055\000\056\000\056\000\056\000\058\000\058\000\
\059\000\060\000\060\000\057\000\057\000\057\000\061\000\061\000\
\061\000\062\000\062\000\064\000\064\000\064\000\064\000\063\000\
\063\000\065\000\065\000\025\000\025\000\067\000\067\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\071\000\071\000\070\000\072\000\072\000\012\000\
\013\000\075\000\075\000\014\000\014\000\015\000\015\000\011\000\
\074\000\074\000\074\000\073\000\073\000\073\000\005\000\078\000\
\078\000\078\000\077\000\077\000\021\000\021\000\079\000\079\000\
\079\000\079\000\080\000\080\000\081\000\082\000\082\000\083\000\
\083\000\076\000\076\000\084\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\000\000\001\000\001\000\002\000\001\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\003\000\002\000\003\000\000\000\002\000\000\000\001\000\002\000\
\004\000\005\000\003\000\000\000\003\000\000\000\004\000\001\000\
\003\000\000\000\004\000\005\000\005\000\001\000\002\000\001\000\
\001\000\001\000\001\000\004\000\003\000\000\000\002\000\004\000\
\005\000\001\000\001\000\001\000\003\000\001\000\000\000\001\000\
\001\000\003\000\003\000\000\000\001\000\001\000\003\000\000\000\
\001\000\001\000\003\000\003\000\000\000\001\000\001\000\002\000\
\002\000\002\000\003\000\001\000\001\000\001\000\003\000\000\000\
\001\000\003\000\004\000\005\000\004\000\003\000\001\000\003\000\
\001\000\001\000\006\000\002\000\002\000\004\000\002\000\001\000\
\003\000\004\000\000\000\005\000\003\000\001\000\003\000\003\000\
\001\000\005\000\001\000\003\000\003\000\001\000\001\000\008\000\
\008\000\007\000\007\000\002\000\003\000\003\000\003\000\001\000\
\003\000\006\000\006\000\001\000\001\000\001\000\002\000\004\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\006\000\004\000\001\000\001\000\002\000\003\000\003\000\
\003\000\002\000\006\000\006\000\001\000\003\000\004\000\004\000\
\006\000\004\000\000\000\001\000\001\000\001\000\003\000\005\000\
\004\000\009\000\006\000\003\000\004\000\003\000\003\000\006\000\
\002\000\001\000\001\000\002\000\001\000\001\000\006\000\001\000\
\001\000\001\000\000\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\003\000\000\000\001\000\001\000\
\002\000\001\000\003\000\000\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\206\000\000\000\207\000\000\000\000\000\208\000\000\000\
\000\000\209\000\000\000\000\000\210\000\089\000\000\000\000\000\
\000\000\125\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\157\000\000\000\000\000\000\000\
\040\000\041\000\042\000\124\000\000\000\211\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\087\000\090\000\000\000\
\102\000\111\000\000\000\110\000\000\000\000\000\129\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\008\000\
\009\000\010\000\212\000\005\000\011\000\012\000\013\000\014\000\
\015\000\213\000\000\000\003\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\150\000\000\000\
\000\000\000\000\000\000\000\000\154\000\000\000\000\000\127\000\
\000\000\164\000\000\000\000\000\000\000\000\000\000\000\000\000\
\105\000\000\000\062\000\000\000\000\000\000\000\000\000\096\000\
\093\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\092\000\000\000\
\000\000\116\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\182\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\193\000\192\000\194\000\191\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\027\000\043\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\158\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\121\000\000\000\075\000\000\000\
\000\000\000\000\000\000\117\000\000\000\095\000\000\000\000\000\
\000\000\000\000\000\000\000\000\151\000\000\000\000\000\081\000\
\086\000\079\000\088\000\000\000\000\000\000\000\109\000\108\000\
\000\000\131\000\134\000\135\000\132\000\133\000\130\000\140\000\
\138\000\139\000\136\000\137\000\141\000\000\000\000\000\000\000\
\180\000\000\000\000\000\175\000\174\000\000\000\000\000\172\000\
\019\000\000\000\021\000\024\000\000\000\196\000\195\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\000\000\000\000\
\044\000\188\000\185\000\184\000\186\000\000\000\000\000\085\000\
\000\000\000\000\000\000\000\000\147\000\000\000\000\000\160\000\
\000\000\000\000\128\000\000\000\000\000\000\000\000\000\104\000\
\000\000\103\000\000\000\063\000\159\000\000\000\000\000\000\000\
\097\000\000\000\162\000\000\000\094\000\000\000\000\000\000\000\
\000\000\202\000\000\000\000\000\178\000\000\000\179\000\169\000\
\000\000\173\000\000\000\200\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\026\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\100\000\000\000\031\000\000\000\000\000\
\000\000\000\000\052\000\000\000\000\000\000\000\057\000\082\000\
\106\000\098\000\000\000\000\000\000\000\177\000\168\000\000\000\
\025\000\197\000\201\000\000\000\000\000\068\000\000\000\071\000\
\067\000\000\000\029\000\000\000\183\000\083\000\000\000\161\000\
\122\000\123\000\145\000\146\000\155\000\156\000\091\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\203\000\000\000\176\000\035\000\074\000\073\000\072\000\
\048\000\084\000\000\000\000\000\000\000\000\000\000\000\114\000\
\053\000\000\000\115\000\000\000\058\000\171\000\000\000\000\000\
\112\000\113\000\000\000\000\000\170\000"

let yydgoto = "\009\000\
\010\000\071\000\072\000\073\000\074\000\046\000\075\000\082\000\
\083\000\076\000\077\000\078\000\079\000\080\000\081\000\013\000\
\087\000\176\000\177\000\011\001\023\001\016\000\185\000\022\001\
\047\000\128\000\055\001\056\001\017\001\018\001\108\000\019\000\
\190\000\024\001\105\001\106\001\107\001\049\000\109\001\110\001\
\111\001\124\000\125\000\019\001\020\001\126\001\127\001\128\001\
\050\000\051\000\162\000\053\000\233\000\194\000\054\000\055\000\
\056\000\129\000\130\000\146\000\120\000\057\000\058\000\059\000\
\060\000\061\000\122\000\062\000\063\000\064\000\115\000\065\000\
\163\000\070\001\164\000\067\001\095\000\030\001\179\000\180\000\
\014\001\077\001\078\001\000\000"

let yysindex = "\245\002\
\000\000\001\255\195\254\210\254\058\255\181\004\172\255\172\255\
\000\000\000\000\115\255\000\000\081\255\146\255\000\000\243\255\
\158\255\000\000\255\255\183\255\000\000\000\000\143\255\151\255\
\175\255\000\000\185\255\218\254\176\000\196\255\208\255\222\255\
\225\255\210\006\231\255\219\254\000\000\210\006\060\006\176\000\
\000\000\000\000\000\000\000\000\234\255\000\000\245\255\156\255\
\078\000\103\006\230\255\238\255\000\000\000\000\000\000\009\000\
\000\000\000\000\167\255\000\000\041\000\067\000\000\000\073\001\
\044\000\249\004\045\000\237\254\046\000\110\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\172\255\000\000\000\000\018\000\054\000\020\000\
\089\000\181\004\007\000\093\000\146\006\057\000\051\005\146\006\
\210\006\176\000\176\000\210\006\000\000\013\000\000\000\176\000\
\176\000\210\006\210\006\015\000\000\000\210\006\146\006\000\000\
\221\254\000\000\102\000\214\255\146\006\017\255\166\255\014\255\
\000\000\027\255\000\000\095\000\099\000\210\006\205\005\000\000\
\000\000\120\000\071\000\210\006\210\006\210\006\210\006\210\006\
\210\006\210\006\036\255\038\255\103\006\205\005\000\000\087\000\
\092\000\000\000\210\006\210\006\210\006\210\006\210\006\210\006\
\210\006\210\006\210\006\210\006\210\006\210\006\210\006\074\255\
\077\000\238\255\100\000\000\000\083\000\097\000\104\000\105\000\
\106\000\113\000\000\000\000\000\000\000\000\000\000\000\139\000\
\050\000\111\000\068\000\068\000\000\000\130\000\000\000\000\000\
\094\000\018\000\000\000\165\000\212\255\144\000\138\000\184\255\
\019\255\162\005\020\255\164\000\169\000\158\000\173\000\174\000\
\184\000\031\255\062\255\028\255\000\000\180\000\146\006\146\006\
\149\000\176\000\103\000\176\000\000\000\146\006\000\000\176\000\
\186\000\178\000\162\000\000\000\122\000\000\000\151\000\221\254\
\221\254\247\254\118\000\118\000\000\000\221\254\025\255\000\000\
\000\000\000\000\000\000\245\255\091\000\211\000\000\000\000\000\
\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\221\254\249\004\179\000\
\000\000\123\004\201\000\000\000\000\000\195\000\208\000\000\000\
\000\000\018\000\000\000\000\000\217\000\000\000\000\000\191\000\
\176\000\198\000\229\000\000\000\146\006\218\000\199\000\228\000\
\000\000\000\000\000\000\000\000\000\000\051\005\038\255\000\000\
\067\255\210\006\146\006\146\006\000\000\176\000\176\000\000\000\
\210\006\210\006\000\000\189\006\165\000\183\000\239\000\000\000\
\176\000\000\000\165\000\000\000\000\000\209\000\234\000\156\000\
\000\000\253\006\000\000\244\254\000\000\176\000\241\000\235\000\
\160\000\000\000\029\255\219\000\000\000\238\000\000\000\000\000\
\249\004\000\000\221\000\000\000\249\000\001\001\244\000\018\001\
\000\000\130\000\024\001\000\000\007\001\000\000\248\254\073\255\
\038\255\119\255\159\255\194\255\008\001\012\001\147\255\153\255\
\146\006\014\001\253\006\000\000\005\001\000\000\178\000\094\255\
\250\000\022\001\000\000\221\254\251\000\025\001\000\000\000\000\
\000\000\000\000\249\004\253\000\222\000\000\000\000\000\021\001\
\000\000\000\000\000\000\034\001\205\255\000\000\018\001\000\000\
\000\000\017\006\000\000\018\000\000\000\000\000\111\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\001\
\013\001\043\001\000\000\210\006\016\255\210\006\021\255\023\001\
\038\001\000\000\249\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\001\016\001\146\006\221\254\041\000\000\000\
\000\000\041\000\000\000\032\001\000\000\000\000\213\000\165\000\
\000\000\000\000\249\004\049\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\002\076\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\119\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\066\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\001\000\000\058\001\
\000\000\000\000\000\000\000\000\000\000\000\000\108\000\230\002\
\039\001\000\000\003\000\004\000\000\000\000\000\000\000\108\000\
\000\000\000\000\056\002\000\000\069\004\129\001\000\000\000\000\
\168\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\002\000\000\000\000\074\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\001\072\001\069\001\000\000\214\000\000\000\000\000\
\000\000\069\001\000\000\168\001\000\000\000\000\000\000\000\000\
\054\003\000\000\000\000\072\001\000\000\000\000\163\255\000\000\
\000\000\000\000\000\000\000\000\182\255\069\001\000\000\000\000\
\000\000\108\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\001\000\000\051\001\052\001\000\000\197\255\000\000\000\000\
\071\001\081\001\000\000\076\001\165\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\219\003\
\246\003\000\000\002\002\100\002\000\000\041\004\058\001\000\000\
\000\000\000\000\000\000\108\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\117\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\095\001\000\000\000\000\085\001\000\000\000\000\000\000\
\000\000\000\000\075\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\255\000\000\000\000\000\000\
\000\000\000\000\048\255\000\000\000\000\000\000\000\000\092\001\
\000\000\078\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\001\000\000\009\255\
\000\000\189\000\087\001\000\000\100\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\001\000\000\000\000\000\000\000\000\005\255\
\000\000\079\001\000\000\023\255\000\000\080\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\139\255\000\000\
\000\000\000\000\000\000\081\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\242\000\000\000\242\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\144\255\242\000\000\000\
\000\000\242\000\000\000\000\000\000\000\000\000\000\000\006\255\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\117\002\126\002\127\002\128\002\178\255\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\180\255\000\000\000\000\000\000\
\218\255\132\255\029\001\000\000\000\000\000\000\250\255\000\000\
\000\000\003\001\037\001\000\000\248\000\203\000\045\001\000\000\
\252\000\080\000\000\000\000\000\065\001\000\000\000\000\028\001\
\000\000\033\255\001\000\187\000\000\000\000\000\228\255\105\001\
\170\001\211\255\000\000\029\000\000\000\103\001\219\255\000\000\
\012\002\134\255\000\000\000\000\000\000\253\255\121\000\000\000\
\010\255\000\000\155\001\000\000\000\000\000\000\000\000\000\000\
\235\001\000\000\000\000\000\000"

let yytablesize = 2165
let yytable = "\048\000\
\118\000\121\000\076\000\077\000\220\000\222\000\052\000\060\001\
\065\001\178\000\143\000\184\000\112\001\102\000\210\000\059\001\
\080\000\207\000\084\000\207\000\145\000\139\000\103\000\038\000\
\133\001\145\000\011\000\069\000\207\000\112\000\036\000\181\000\
\119\000\123\000\114\000\023\000\014\000\211\000\034\001\135\000\
\181\000\054\000\181\000\048\000\100\000\111\000\023\000\116\001\
\023\000\041\001\213\000\043\001\038\000\117\001\188\000\017\000\
\069\000\193\000\118\000\048\000\101\000\136\000\166\000\088\001\
\167\000\135\000\041\000\207\000\167\001\042\000\054\000\119\000\
\204\000\170\001\137\000\102\000\043\000\031\001\118\000\038\000\
\042\001\140\000\120\001\048\000\220\000\141\000\189\000\136\000\
\048\000\189\000\052\000\123\000\123\000\171\000\135\000\192\000\
\114\000\199\000\200\000\038\000\137\000\038\000\114\000\236\000\
\189\000\135\000\239\000\030\000\208\000\123\000\189\000\038\000\
\235\000\036\000\038\000\181\000\136\000\020\000\214\000\040\000\
\189\000\135\001\114\000\212\000\153\001\089\001\118\000\136\000\
\041\000\137\000\231\000\042\000\040\000\148\001\048\000\189\000\
\135\000\238\000\043\000\119\000\137\000\169\000\136\001\242\000\
\243\000\244\000\245\000\246\000\247\000\248\000\249\000\250\000\
\251\000\252\000\253\000\033\001\255\000\070\000\136\000\207\000\
\170\000\086\000\059\000\126\000\175\001\085\000\140\000\126\000\
\000\001\045\001\141\001\137\000\048\001\131\000\050\001\051\001\
\142\001\196\000\197\000\069\001\134\001\148\000\137\001\209\000\
\066\000\067\000\070\000\189\000\180\001\075\001\061\001\059\000\
\101\000\135\000\207\000\206\000\088\000\011\000\061\000\068\000\
\189\000\189\000\148\000\047\001\140\000\047\001\061\000\189\000\
\091\000\052\001\148\000\148\000\132\000\038\000\131\001\136\000\
\094\000\138\001\162\001\133\000\198\000\135\000\132\000\096\000\
\123\000\027\001\201\000\135\000\137\000\133\000\238\000\020\000\
\069\000\097\000\148\000\148\000\109\000\148\000\083\001\148\000\
\113\000\099\000\028\001\136\000\064\000\127\000\217\000\034\000\
\048\000\136\000\134\000\048\000\091\001\092\001\126\000\158\001\
\137\000\098\000\052\000\148\000\134\000\159\001\137\000\220\000\
\102\000\142\000\080\001\099\000\132\000\014\000\189\000\070\000\
\148\000\017\000\148\000\133\000\144\000\141\000\104\000\048\000\
\121\000\172\000\089\000\090\000\189\000\189\000\087\001\093\001\
\094\001\029\001\105\000\076\000\077\000\048\000\092\000\093\000\
\098\000\080\000\238\000\195\000\034\000\145\000\113\000\034\000\
\106\000\080\000\134\000\107\000\113\000\202\000\034\000\047\001\
\203\000\110\000\118\000\121\000\126\000\041\000\159\000\173\000\
\042\000\149\000\048\000\140\000\174\000\232\000\234\000\043\000\
\113\000\076\000\077\000\141\000\165\000\168\000\224\000\225\000\
\226\000\227\000\228\000\229\000\230\000\175\000\181\000\080\000\
\183\000\186\000\119\000\182\000\187\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
\113\000\254\000\147\000\191\000\048\000\134\000\080\000\101\000\
\038\000\205\000\148\000\149\000\038\000\216\000\030\000\215\000\
\221\000\223\000\038\000\189\000\080\000\241\000\176\001\001\001\
\120\000\038\000\038\000\030\000\030\000\003\001\002\001\038\000\
\038\000\102\000\150\000\151\000\030\000\102\000\030\000\152\000\
\038\000\008\001\038\000\004\001\048\000\030\000\009\001\038\000\
\135\000\038\000\005\001\006\001\007\001\010\001\189\000\038\000\
\038\000\012\001\013\001\016\001\021\001\207\000\030\000\148\000\
\038\000\237\000\038\000\026\001\048\000\062\001\136\000\038\000\
\025\001\168\001\030\000\171\001\035\001\037\001\038\000\038\000\
\038\000\036\001\038\000\137\000\038\000\138\000\041\000\038\001\
\039\001\042\000\041\000\177\001\044\001\042\000\178\001\046\001\
\043\000\030\000\030\000\038\000\043\000\038\000\038\000\040\001\
\038\000\053\001\049\001\054\001\057\001\030\000\038\000\030\000\
\218\000\038\000\038\000\038\000\064\001\038\000\058\001\038\000\
\038\000\038\000\102\000\137\000\131\000\066\001\038\000\038\000\
\038\000\072\001\073\001\076\001\090\001\038\000\038\000\034\000\
\074\001\079\001\099\000\095\001\096\001\081\001\038\000\082\001\
\038\000\085\001\084\001\086\001\099\000\038\000\099\001\038\000\
\209\000\153\000\102\001\101\001\108\001\038\000\038\000\103\001\
\113\001\099\000\099\000\115\001\114\001\118\001\119\001\121\001\
\038\000\122\001\099\000\123\001\099\000\124\001\125\001\041\000\
\130\001\132\001\042\000\099\000\038\000\038\000\038\000\139\001\
\038\000\043\000\038\000\140\001\034\000\143\001\146\001\034\000\
\150\001\149\001\151\001\152\001\099\000\108\001\034\000\154\001\
\155\001\038\000\157\001\038\000\038\000\156\001\038\000\107\000\
\099\000\166\000\163\001\165\001\164\001\174\001\167\001\038\000\
\179\001\038\000\149\000\038\000\170\001\038\000\149\000\148\001\
\181\001\172\001\006\000\001\000\149\000\149\000\166\000\099\000\
\099\000\163\000\060\000\002\000\149\000\020\000\166\000\166\000\
\060\000\149\000\149\000\099\000\163\000\099\000\166\001\099\000\
\108\001\022\000\149\000\152\000\149\000\189\000\190\000\028\000\
\046\000\149\000\023\000\149\000\050\000\198\000\166\000\166\000\
\153\000\149\000\149\000\166\000\032\000\199\000\012\000\030\000\
\154\000\155\000\065\000\047\000\149\000\055\000\051\000\056\000\
\015\000\120\000\018\000\147\001\021\000\120\000\161\001\144\001\
\149\000\149\000\149\000\120\000\149\000\169\001\149\000\145\001\
\156\000\157\000\129\001\173\001\098\001\158\000\063\001\100\001\
\120\000\120\000\160\001\240\000\071\001\149\000\015\001\149\000\
\149\000\120\000\149\000\120\000\126\000\000\000\000\000\000\000\
\148\000\000\000\120\000\149\000\148\000\149\000\000\000\149\000\
\000\000\149\000\148\000\148\000\000\000\000\000\000\000\000\000\
\000\000\000\000\148\000\120\000\000\000\000\000\000\000\148\000\
\148\000\000\000\000\000\000\000\000\000\000\000\000\000\120\000\
\148\000\000\000\148\000\000\000\000\000\000\000\000\000\148\000\
\000\000\148\000\000\000\000\000\000\000\000\000\000\000\148\000\
\148\000\000\000\000\000\000\000\120\000\000\000\120\000\120\000\
\000\000\000\000\148\000\000\000\000\000\126\000\000\000\000\000\
\000\000\000\000\120\000\000\000\120\000\000\000\148\000\148\000\
\148\000\000\000\148\000\000\000\148\000\001\000\002\000\003\000\
\004\000\005\000\006\000\007\000\008\000\000\000\000\000\000\000\
\000\000\000\000\153\000\148\000\000\000\148\000\153\000\000\000\
\148\000\000\000\000\000\000\000\153\000\153\000\000\000\000\000\
\000\000\148\000\000\000\148\000\153\000\148\000\000\000\148\000\
\000\000\153\000\153\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\153\000\000\000\153\000\000\000\101\000\000\000\
\000\000\153\000\000\000\153\000\000\000\000\000\000\000\000\000\
\000\000\153\000\153\000\000\000\000\000\166\000\000\000\000\000\
\107\000\000\000\000\000\000\000\153\000\000\000\000\000\000\000\
\000\000\000\000\107\000\000\000\000\000\000\000\000\000\000\000\
\153\000\153\000\153\000\000\000\153\000\000\000\153\000\107\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\107\000\000\000\107\000\000\000\000\000\153\000\000\000\153\000\
\153\000\107\000\153\000\000\000\152\000\000\000\000\000\000\000\
\152\000\000\000\000\000\153\000\000\000\153\000\152\000\152\000\
\000\000\153\000\107\000\000\000\167\000\000\000\152\000\000\000\
\000\000\000\000\000\000\152\000\152\000\000\000\107\000\000\000\
\000\000\000\000\000\000\000\000\152\000\000\000\152\000\000\000\
\000\000\000\000\000\000\152\000\000\000\152\000\000\000\000\000\
\000\000\000\000\000\000\152\000\152\000\107\000\107\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\152\000\000\000\
\000\000\107\000\000\000\107\000\000\000\126\000\000\000\165\000\
\000\000\126\000\152\000\152\000\152\000\000\000\152\000\126\000\
\152\000\000\000\000\000\000\000\000\000\000\000\000\000\148\000\
\000\000\000\000\000\000\000\000\126\000\126\000\000\000\152\000\
\000\000\152\000\152\000\000\000\152\000\126\000\000\000\126\000\
\000\000\000\000\000\000\000\000\148\000\152\000\126\000\152\000\
\000\000\000\000\000\000\152\000\148\000\148\000\000\000\000\000\
\000\000\000\000\142\000\000\000\000\000\000\000\000\000\126\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\000\000\000\
\000\000\000\000\126\000\126\000\148\000\148\000\000\000\148\000\
\126\000\148\000\000\000\000\000\000\000\143\000\000\000\000\000\
\148\000\000\000\000\000\000\000\000\000\126\000\126\000\000\000\
\126\000\000\000\126\000\000\000\000\000\148\000\126\000\000\000\
\126\000\000\000\000\000\000\000\000\000\148\000\126\000\126\000\
\126\000\000\000\148\000\000\000\148\000\148\000\148\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\126\000\000\000\000\000\000\000\000\000\000\000\000\000\101\000\
\144\000\000\000\000\000\000\000\126\000\148\000\148\000\000\000\
\148\000\101\000\148\000\000\000\000\000\000\000\166\000\000\000\
\000\000\000\000\166\000\000\000\000\000\000\000\101\000\101\000\
\166\000\166\000\000\000\126\000\099\000\000\000\148\000\101\000\
\166\000\101\000\000\000\000\000\000\000\166\000\166\000\126\000\
\101\000\126\000\000\000\148\000\000\000\148\000\166\000\000\000\
\166\000\000\000\000\000\000\000\000\000\166\000\000\000\166\000\
\000\000\101\000\000\000\000\000\000\000\166\000\166\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\000\000\000\000\
\166\000\000\000\000\000\000\000\000\000\167\000\000\000\000\000\
\000\000\167\000\000\000\000\000\166\000\166\000\166\000\167\000\
\167\000\000\000\166\000\000\000\101\000\101\000\000\000\167\000\
\000\000\000\000\000\000\000\000\167\000\167\000\000\000\000\000\
\101\000\166\000\000\000\166\000\166\000\167\000\000\000\167\000\
\000\000\000\000\000\000\000\000\167\000\000\000\167\000\166\000\
\000\000\166\000\000\000\000\000\167\000\167\000\000\000\000\000\
\165\000\000\000\000\000\000\000\165\000\000\000\000\000\167\000\
\000\000\000\000\165\000\165\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\167\000\167\000\167\000\000\000\165\000\
\165\000\167\000\000\000\000\000\000\000\000\000\000\000\000\000\
\165\000\000\000\165\000\000\000\000\000\000\000\000\000\165\000\
\167\000\165\000\167\000\167\000\000\000\000\000\000\000\165\000\
\165\000\000\000\000\000\142\000\000\000\000\000\167\000\142\000\
\167\000\000\000\165\000\000\000\000\000\142\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\165\000\165\000\
\165\000\000\000\142\000\142\000\165\000\000\000\143\000\000\000\
\000\000\000\000\143\000\142\000\000\000\142\000\000\000\000\000\
\143\000\000\000\142\000\165\000\142\000\165\000\165\000\000\000\
\000\000\000\000\142\000\142\000\000\000\143\000\143\000\000\000\
\000\000\165\000\000\000\165\000\000\000\142\000\143\000\000\000\
\143\000\000\000\000\000\000\000\000\000\143\000\000\000\143\000\
\000\000\142\000\142\000\142\000\000\000\143\000\143\000\142\000\
\000\000\144\000\000\000\000\000\000\000\144\000\000\000\000\000\
\143\000\000\000\000\000\144\000\000\000\000\000\142\000\000\000\
\142\000\142\000\000\000\000\000\143\000\143\000\143\000\000\000\
\144\000\144\000\143\000\000\000\142\000\099\000\142\000\000\000\
\000\000\144\000\000\000\144\000\000\000\000\000\000\000\099\000\
\144\000\143\000\144\000\143\000\143\000\000\000\000\000\000\000\
\144\000\144\000\000\000\000\000\099\000\099\000\000\000\143\000\
\000\000\143\000\000\000\144\000\000\000\099\000\000\000\099\000\
\000\000\000\000\000\000\000\000\000\000\000\000\099\000\144\000\
\144\000\144\000\000\000\000\000\000\000\144\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\000\000\000\000\144\000\023\000\144\000\144\000\
\000\000\000\000\000\000\099\000\000\000\000\000\160\000\000\000\
\000\000\000\000\144\000\000\000\144\000\000\000\000\000\024\000\
\000\000\000\000\068\001\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\099\000\099\000\000\000\025\000\000\000\026\000\
\000\000\027\000\000\000\000\000\000\000\028\000\099\000\000\000\
\099\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\029\000\000\000\030\000\031\000\000\000\000\000\023\000\
\032\000\000\000\000\000\000\000\033\000\034\000\035\000\000\000\
\000\000\036\000\037\000\038\000\000\000\039\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\026\000\041\000\027\000\000\000\042\000\000\000\028\000\
\000\000\000\000\000\000\000\000\043\000\000\000\044\000\000\000\
\000\000\000\000\045\000\029\000\000\000\030\000\031\000\000\000\
\022\000\000\000\032\000\000\000\000\000\000\000\033\000\034\000\
\035\000\000\000\000\000\036\000\037\000\038\000\000\000\039\000\
\000\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\024\000\000\000\000\000\
\161\000\000\000\000\000\000\000\041\000\000\000\000\000\042\000\
\000\000\000\000\000\000\025\000\000\000\026\000\043\000\027\000\
\044\000\000\000\000\000\028\000\045\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\029\000\
\000\000\030\000\031\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\033\000\034\000\035\000\000\000\000\000\036\000\
\037\000\038\000\000\000\039\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\026\000\
\041\000\027\000\000\000\042\000\000\000\028\000\000\000\000\000\
\000\000\000\000\043\000\000\000\044\000\000\000\000\000\000\000\
\045\000\029\000\000\000\030\000\031\000\000\000\187\000\000\000\
\032\000\000\000\000\000\000\000\033\000\034\000\035\000\000\000\
\000\000\036\000\037\000\038\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\187\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\042\000\000\000\000\000\
\000\000\187\000\000\000\187\000\043\000\187\000\044\000\000\000\
\000\000\187\000\045\000\000\000\000\000\032\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\187\000\000\000\187\000\
\187\000\000\000\000\000\000\000\187\000\000\000\024\000\000\000\
\187\000\187\000\187\000\000\000\000\000\187\000\187\000\187\000\
\000\000\187\000\000\000\000\000\025\000\000\000\026\000\000\000\
\027\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\187\000\000\000\
\029\000\187\000\030\000\031\000\000\000\000\000\000\000\032\000\
\187\000\024\000\187\000\033\000\034\000\035\000\187\000\000\000\
\036\000\037\000\038\000\000\000\117\000\000\000\000\000\025\000\
\000\000\026\000\000\000\027\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\029\000\042\000\030\000\031\000\000\000\
\000\000\000\000\032\000\043\000\000\000\044\000\033\000\034\000\
\035\000\045\000\000\000\036\000\037\000\038\000\000\000\117\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\218\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\042\000\
\000\000\000\000\000\000\025\000\000\000\026\000\043\000\027\000\
\044\000\000\000\000\000\028\000\045\000\000\000\000\000\219\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\030\000\031\000\000\000\000\000\000\000\032\000\000\000\
\024\000\000\000\033\000\034\000\035\000\000\000\000\000\036\000\
\037\000\038\000\000\000\117\000\000\000\000\000\116\000\000\000\
\026\000\000\000\027\000\000\000\000\000\000\000\028\000\218\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\029\000\042\000\030\000\031\000\000\000\000\000\
\000\000\032\000\043\000\024\000\044\000\033\000\034\000\035\000\
\045\000\000\000\036\000\037\000\038\000\000\000\117\000\000\000\
\000\000\025\000\000\000\026\000\000\000\027\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\029\000\042\000\030\000\
\031\000\000\000\000\000\000\000\032\000\043\000\024\000\044\000\
\033\000\034\000\035\000\045\000\000\000\036\000\037\000\038\000\
\000\000\039\000\000\000\000\000\025\000\000\000\026\000\000\000\
\027\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\029\000\042\000\030\000\031\000\000\000\000\000\000\000\032\000\
\043\000\024\000\044\000\033\000\034\000\035\000\045\000\000\000\
\036\000\037\000\038\000\000\000\117\000\000\000\000\000\025\000\
\000\000\026\000\000\000\027\000\000\000\000\000\024\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\029\000\042\000\030\000\031\000\000\000\
\000\000\000\000\032\000\043\000\102\000\044\000\033\000\034\000\
\035\000\045\000\000\000\036\000\037\000\038\000\000\000\097\001\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\024\000\000\000\033\000\034\000\035\000\000\000\000\000\
\000\000\037\000\038\000\000\000\041\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\104\001\
\044\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\041\000\000\000\029\000\042\000\000\000\000\000\000\000\
\000\000\000\000\032\000\043\000\000\000\000\000\033\000\034\000\
\035\000\045\000\000\000\000\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\045\000"

let yycheck = "\006\000\
\039\000\039\000\000\000\000\000\127\000\130\000\006\000\231\000\
\255\000\086\000\056\000\090\000\025\001\051\001\001\001\025\001\
\000\000\001\001\008\000\001\001\005\001\050\000\029\000\019\001\
\033\001\005\001\026\001\019\001\001\001\036\000\025\001\024\001\
\039\000\040\000\038\000\011\001\098\001\024\001\019\001\075\001\
\033\001\019\001\035\001\050\000\083\001\083\001\011\001\019\001\
\011\001\019\001\024\001\024\001\048\001\025\001\093\000\102\001\
\048\001\096\000\024\001\066\000\099\001\097\001\082\001\031\001\
\084\001\075\001\104\001\001\001\053\001\107\001\048\001\024\001\
\111\000\053\001\110\001\051\001\114\001\059\001\117\000\075\001\
\019\001\094\001\073\001\090\000\207\000\094\001\093\000\097\001\
\095\000\096\000\090\000\098\000\099\000\083\000\075\001\095\000\
\100\000\104\000\105\000\095\001\110\001\097\001\106\000\142\000\
\111\000\075\001\144\000\000\000\092\001\116\000\117\000\000\000\
\141\000\108\001\110\001\108\001\097\001\060\001\092\001\095\001\
\127\000\089\001\126\000\110\001\115\001\059\001\092\001\097\001\
\104\001\110\001\095\001\107\001\095\001\040\001\141\000\142\000\
\075\001\144\000\114\001\092\001\110\001\032\001\024\001\147\000\
\148\000\149\000\150\000\151\000\152\000\153\000\154\000\155\000\
\156\000\157\000\158\000\194\000\083\001\019\001\097\001\001\001\
\051\001\081\001\019\001\001\001\155\001\051\001\094\001\005\001\
\095\001\208\000\024\001\110\001\210\000\018\001\212\000\214\000\
\024\001\098\000\099\000\002\001\108\001\019\001\024\001\018\001\
\013\001\014\001\048\001\194\000\179\001\010\001\236\000\048\001\
\099\001\075\001\001\001\116\000\051\001\026\001\017\001\028\001\
\207\000\208\000\040\001\210\000\094\001\212\000\025\001\214\000\
\051\001\216\000\048\001\049\001\057\001\000\000\083\001\097\001\
\034\001\024\001\108\001\064\001\100\000\075\001\057\001\081\001\
\231\000\042\001\106\000\075\001\110\001\064\001\237\000\060\001\
\061\001\083\001\072\001\073\001\034\000\075\001\021\001\077\001\
\038\000\000\000\059\001\097\001\048\001\001\001\126\000\051\001\
\255\000\097\001\095\001\002\001\035\001\036\001\092\001\051\001\
\110\001\083\001\002\001\097\001\095\001\057\001\110\001\130\001\
\051\001\001\001\017\001\083\001\057\001\098\001\021\001\100\001\
\110\001\102\001\112\001\064\001\110\001\094\001\083\001\030\001\
\062\001\008\001\040\001\041\001\035\001\036\001\030\001\038\001\
\039\001\106\001\083\001\033\001\033\001\044\001\040\001\041\001\
\083\001\025\001\049\001\097\000\104\001\005\001\100\000\107\001\
\083\001\033\001\095\001\083\001\106\000\107\000\114\001\062\001\
\110\000\083\001\097\001\097\001\083\001\104\001\019\001\046\001\
\107\001\000\000\073\001\094\001\051\001\139\000\140\000\114\001\
\126\000\071\001\071\001\094\001\032\001\032\001\132\000\133\000\
\134\000\135\000\136\000\137\000\138\000\068\001\033\001\071\001\
\000\001\083\001\097\001\072\001\000\001\147\000\148\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\157\000\
\158\000\159\000\040\001\051\001\115\001\095\001\094\001\099\001\
\001\001\012\001\048\001\049\001\005\001\019\001\011\001\025\001\
\001\001\051\001\011\001\130\001\108\001\034\001\165\001\051\001\
\000\000\018\001\019\001\024\001\025\001\051\001\035\001\024\001\
\025\001\051\001\072\001\073\001\033\001\051\001\035\001\077\001\
\033\001\033\001\035\001\051\001\155\001\042\001\012\001\040\001\
\075\001\042\001\051\001\051\001\051\001\108\001\165\001\048\001\
\049\001\051\001\095\001\034\001\071\001\001\001\059\001\000\000\
\057\001\083\001\059\001\034\001\179\001\083\001\097\001\064\001\
\033\001\149\001\071\001\151\001\017\001\024\001\071\001\072\001\
\073\001\017\001\075\001\110\001\077\001\112\001\104\001\019\001\
\019\001\107\001\104\001\167\001\017\001\107\001\170\001\051\001\
\114\001\094\001\095\001\092\001\114\001\094\001\095\001\024\001\
\097\001\024\001\108\001\034\001\051\001\106\001\001\001\108\001\
\095\001\106\001\005\001\108\001\051\001\110\001\072\001\112\001\
\011\001\012\001\051\001\110\001\018\001\051\001\017\001\018\001\
\019\001\033\001\040\001\019\001\034\001\024\001\025\001\051\001\
\033\001\051\001\001\001\041\001\042\001\048\001\033\001\019\001\
\035\001\051\001\033\001\024\001\011\001\040\001\072\001\042\001\
\018\001\000\000\025\001\051\001\058\001\048\001\049\001\108\001\
\024\001\024\001\025\001\108\001\034\001\051\001\033\001\051\001\
\059\001\025\001\033\001\019\001\035\001\034\001\005\001\104\001\
\001\001\019\001\107\001\042\001\071\001\072\001\073\001\024\001\
\075\001\114\001\077\001\024\001\104\001\024\001\034\001\107\001\
\019\001\048\001\048\001\019\001\059\001\099\001\114\001\051\001\
\083\001\092\001\017\001\094\001\095\001\033\001\097\001\000\000\
\071\001\019\001\048\001\017\001\048\001\024\001\053\001\106\001\
\108\001\108\001\001\001\110\001\053\001\112\001\005\001\040\001\
\024\001\051\001\000\000\000\000\011\001\012\001\040\001\094\001\
\095\001\012\001\025\001\000\000\019\001\012\001\048\001\049\001\
\017\001\024\001\025\001\106\001\024\001\108\001\148\001\110\001\
\150\001\012\001\033\001\000\000\035\001\051\001\051\001\033\001\
\024\001\040\001\012\001\042\001\033\001\025\001\072\001\073\001\
\040\001\048\001\049\001\077\001\025\001\025\001\002\000\033\001\
\048\001\049\001\048\001\024\001\059\001\048\001\048\001\048\001\
\003\000\001\001\004\000\103\001\005\000\005\001\132\001\099\001\
\071\001\072\001\073\001\011\001\075\001\150\001\077\001\099\001\
\072\001\073\001\082\001\152\001\044\001\077\001\237\000\049\001\
\024\001\025\001\127\001\144\000\002\001\092\001\180\000\094\001\
\095\001\033\001\097\001\035\001\000\000\255\255\255\255\255\255\
\001\001\255\255\042\001\106\001\005\001\108\001\255\255\110\001\
\255\255\112\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\059\001\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\071\001\
\033\001\255\255\035\001\255\255\255\255\255\255\255\255\040\001\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\048\001\
\049\001\255\255\255\255\255\255\092\001\255\255\094\001\095\001\
\255\255\255\255\059\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\106\001\255\255\108\001\255\255\071\001\072\001\
\073\001\255\255\075\001\255\255\077\001\001\000\002\000\003\000\
\004\000\005\000\006\000\007\000\008\000\255\255\255\255\255\255\
\255\255\255\255\001\001\092\001\255\255\094\001\005\001\255\255\
\097\001\255\255\255\255\255\255\011\001\012\001\255\255\255\255\
\255\255\106\001\255\255\108\001\019\001\110\001\255\255\112\001\
\255\255\024\001\025\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\035\001\255\255\000\000\255\255\
\255\255\040\001\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\048\001\049\001\255\255\255\255\000\000\255\255\255\255\
\001\001\255\255\255\255\255\255\059\001\255\255\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\071\001\072\001\073\001\255\255\075\001\255\255\077\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\255\255\092\001\255\255\094\001\
\095\001\042\001\097\001\255\255\001\001\255\255\255\255\255\255\
\005\001\255\255\255\255\106\001\255\255\108\001\011\001\012\001\
\255\255\112\001\059\001\255\255\000\000\255\255\019\001\255\255\
\255\255\255\255\255\255\024\001\025\001\255\255\071\001\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\035\001\255\255\
\255\255\255\255\255\255\040\001\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\048\001\049\001\094\001\095\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\255\255\
\255\255\106\001\255\255\108\001\255\255\001\001\255\255\000\000\
\255\255\005\001\071\001\072\001\073\001\255\255\075\001\011\001\
\077\001\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\024\001\025\001\255\255\092\001\
\255\255\094\001\095\001\255\255\097\001\033\001\255\255\035\001\
\255\255\255\255\255\255\255\255\040\001\106\001\042\001\108\001\
\255\255\255\255\255\255\112\001\048\001\049\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\255\255\005\001\071\001\072\001\073\001\255\255\075\001\
\011\001\077\001\255\255\255\255\255\255\000\000\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\024\001\025\001\255\255\
\092\001\255\255\094\001\255\255\255\255\097\001\033\001\255\255\
\035\001\255\255\255\255\255\255\255\255\040\001\106\001\042\001\
\108\001\255\255\110\001\255\255\112\001\048\001\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\000\000\255\255\255\255\255\255\071\001\072\001\073\001\255\255\
\075\001\011\001\077\001\255\255\255\255\255\255\001\001\255\255\
\255\255\255\255\005\001\255\255\255\255\255\255\024\001\025\001\
\011\001\012\001\255\255\094\001\000\000\255\255\097\001\033\001\
\019\001\035\001\255\255\255\255\255\255\024\001\025\001\106\001\
\042\001\108\001\255\255\110\001\255\255\112\001\033\001\255\255\
\035\001\255\255\255\255\255\255\255\255\040\001\255\255\042\001\
\255\255\059\001\255\255\255\255\255\255\048\001\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\071\001\255\255\255\255\
\059\001\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\005\001\255\255\255\255\071\001\072\001\073\001\011\001\
\012\001\255\255\077\001\255\255\094\001\095\001\255\255\019\001\
\255\255\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\106\001\092\001\255\255\094\001\095\001\033\001\255\255\035\001\
\255\255\255\255\255\255\255\255\040\001\255\255\042\001\106\001\
\255\255\108\001\255\255\255\255\048\001\049\001\255\255\255\255\
\001\001\255\255\255\255\255\255\005\001\255\255\255\255\059\001\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\071\001\072\001\073\001\255\255\024\001\
\025\001\077\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\255\255\255\255\255\255\040\001\
\092\001\042\001\094\001\095\001\255\255\255\255\255\255\048\001\
\049\001\255\255\255\255\001\001\255\255\255\255\106\001\005\001\
\108\001\255\255\059\001\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\071\001\072\001\
\073\001\255\255\024\001\025\001\077\001\255\255\001\001\255\255\
\255\255\255\255\005\001\033\001\255\255\035\001\255\255\255\255\
\011\001\255\255\040\001\092\001\042\001\094\001\095\001\255\255\
\255\255\255\255\048\001\049\001\255\255\024\001\025\001\255\255\
\255\255\106\001\255\255\108\001\255\255\059\001\033\001\255\255\
\035\001\255\255\255\255\255\255\255\255\040\001\255\255\042\001\
\255\255\071\001\072\001\073\001\255\255\048\001\049\001\077\001\
\255\255\001\001\255\255\255\255\255\255\005\001\255\255\255\255\
\059\001\255\255\255\255\011\001\255\255\255\255\092\001\255\255\
\094\001\095\001\255\255\255\255\071\001\072\001\073\001\255\255\
\024\001\025\001\077\001\255\255\106\001\001\001\108\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\011\001\
\040\001\092\001\042\001\094\001\095\001\255\255\255\255\255\255\
\048\001\049\001\255\255\255\255\024\001\025\001\255\255\106\001\
\255\255\108\001\255\255\059\001\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\071\001\
\072\001\073\001\255\255\255\255\255\255\077\001\255\255\255\255\
\255\255\255\255\000\001\255\255\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\255\255\092\001\011\001\094\001\095\001\
\255\255\255\255\255\255\071\001\255\255\255\255\020\001\255\255\
\255\255\255\255\106\001\255\255\108\001\255\255\255\255\029\001\
\255\255\255\255\032\001\255\255\255\255\255\255\255\255\255\255\
\092\001\255\255\094\001\095\001\255\255\043\001\255\255\045\001\
\255\255\047\001\255\255\255\255\255\255\051\001\106\001\255\255\
\108\001\255\255\255\255\255\255\000\001\255\255\255\255\255\255\
\255\255\063\001\255\255\065\001\066\001\255\255\255\255\011\001\
\070\001\255\255\255\255\255\255\074\001\075\001\076\001\255\255\
\255\255\079\001\080\001\081\001\255\255\083\001\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\255\255\255\255\255\255\255\255\255\255\043\001\
\255\255\045\001\104\001\047\001\255\255\107\001\255\255\051\001\
\255\255\255\255\255\255\255\255\114\001\255\255\116\001\255\255\
\255\255\255\255\120\001\063\001\255\255\065\001\066\001\255\255\
\000\001\255\255\070\001\255\255\255\255\255\255\074\001\075\001\
\076\001\255\255\255\255\079\001\080\001\081\001\255\255\083\001\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\095\001\255\255\029\001\255\255\255\255\
\032\001\255\255\255\255\255\255\104\001\255\255\255\255\107\001\
\255\255\255\255\255\255\043\001\255\255\045\001\114\001\047\001\
\116\001\255\255\255\255\051\001\120\001\255\255\255\255\255\255\
\255\255\255\255\000\001\255\255\255\255\255\255\255\255\063\001\
\255\255\065\001\066\001\255\255\255\255\255\255\070\001\255\255\
\255\255\255\255\074\001\075\001\076\001\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\255\255\045\001\
\104\001\047\001\255\255\107\001\255\255\051\001\255\255\255\255\
\255\255\255\255\114\001\255\255\116\001\255\255\255\255\255\255\
\120\001\063\001\255\255\065\001\066\001\255\255\000\001\255\255\
\070\001\255\255\255\255\255\255\074\001\075\001\076\001\255\255\
\255\255\079\001\080\001\081\001\255\255\083\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\104\001\255\255\255\255\107\001\255\255\255\255\
\255\255\043\001\255\255\045\001\114\001\047\001\116\001\255\255\
\255\255\051\001\120\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\063\001\255\255\065\001\
\066\001\255\255\255\255\255\255\070\001\255\255\029\001\255\255\
\074\001\075\001\076\001\255\255\255\255\079\001\080\001\081\001\
\255\255\083\001\255\255\255\255\043\001\255\255\045\001\255\255\
\047\001\255\255\255\255\255\255\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\104\001\255\255\
\063\001\107\001\065\001\066\001\255\255\255\255\255\255\070\001\
\114\001\029\001\116\001\074\001\075\001\076\001\120\001\255\255\
\079\001\080\001\081\001\255\255\083\001\255\255\255\255\043\001\
\255\255\045\001\255\255\047\001\255\255\255\255\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\104\001\255\255\063\001\107\001\065\001\066\001\255\255\
\255\255\255\255\070\001\114\001\255\255\116\001\074\001\075\001\
\076\001\120\001\255\255\079\001\080\001\081\001\255\255\083\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\095\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\104\001\255\255\255\255\107\001\
\255\255\255\255\255\255\043\001\255\255\045\001\114\001\047\001\
\116\001\255\255\255\255\051\001\120\001\255\255\255\255\123\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\063\001\
\255\255\065\001\066\001\255\255\255\255\255\255\070\001\255\255\
\029\001\255\255\074\001\075\001\076\001\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\255\255\255\255\043\001\255\255\
\045\001\255\255\047\001\255\255\255\255\255\255\051\001\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\104\001\255\255\063\001\107\001\065\001\066\001\255\255\255\255\
\255\255\070\001\114\001\029\001\116\001\074\001\075\001\076\001\
\120\001\255\255\079\001\080\001\081\001\255\255\083\001\255\255\
\255\255\043\001\255\255\045\001\255\255\047\001\255\255\255\255\
\255\255\051\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\104\001\255\255\063\001\107\001\065\001\
\066\001\255\255\255\255\255\255\070\001\114\001\029\001\116\001\
\074\001\075\001\076\001\120\001\255\255\079\001\080\001\081\001\
\255\255\083\001\255\255\255\255\043\001\255\255\045\001\255\255\
\047\001\255\255\255\255\255\255\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\104\001\255\255\
\063\001\107\001\065\001\066\001\255\255\255\255\255\255\070\001\
\114\001\029\001\116\001\074\001\075\001\076\001\120\001\255\255\
\079\001\080\001\081\001\255\255\083\001\255\255\255\255\043\001\
\255\255\045\001\255\255\047\001\255\255\255\255\029\001\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\104\001\255\255\063\001\107\001\065\001\066\001\255\255\
\255\255\255\255\070\001\114\001\051\001\116\001\074\001\075\001\
\076\001\120\001\255\255\079\001\080\001\081\001\255\255\083\001\
\063\001\255\255\255\255\255\255\255\255\255\255\255\255\070\001\
\255\255\029\001\255\255\074\001\075\001\076\001\255\255\255\255\
\255\255\080\001\081\001\255\255\104\001\255\255\255\255\107\001\
\255\255\255\255\255\255\255\255\255\255\255\255\114\001\051\001\
\116\001\255\255\255\255\255\255\120\001\255\255\255\255\255\255\
\255\255\104\001\255\255\063\001\107\001\255\255\255\255\255\255\
\255\255\255\255\070\001\114\001\255\255\255\255\074\001\075\001\
\076\001\120\001\255\255\255\255\080\001\081\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\104\001\255\255\255\255\107\001\
\255\255\255\255\255\255\255\255\255\255\255\255\114\001\255\255\
\255\255\255\255\255\255\255\255\120\001"

let yynames_const = "\
  AND\000\
  ANDAND\000\
  ASSERT\000\
  ASSUME\000\
  AT\000\
  ATT\000\
  BIND\000\
  BOOL\000\
  BREAK\000\
  BY\000\
  CASE\000\
  CBRACE\000\
  CHECKENTAIL\000\
  CAPTURERESIDUE\000\
  CLASS\000\
  COERCION\000\
  COLON\000\
  COLONCOLON\000\
  COMMA\000\
  COMPOSE\000\
  CONSEQ\000\
  CONST\000\
  CONTINUE\000\
  CPAREN\000\
  CSQUARE\000\
  DATA\000\
  DDEBUG\000\
  DTIME\000\
  DIFF\000\
  DISTR\000\
  DIV\000\
  DOLLAR\000\
  DOT\000\
  DOUBLEQUOTE\000\
  DERIVE\000\
  DYNAMIC\000\
  ELSE\000\
  ENSURES\000\
  ENUM\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EQUIV\000\
  EXISTS\000\
  EXTENDS\000\
  FALSE\000\
  FLOAT\000\
  FORALL\000\
  GT\000\
  GTE\000\
  HASH\000\
  IF\000\
  IMM\000\
  IMPLIES\000\
  IMPLY\000\
  IMPORT\000\
  IN\000\
  LEFTARROW\000\
  LEMMA\000\
  LET\000\
  NOTIN\000\
  BAGMAX\000\
  BAGMIN\000\
  FOLD\000\
  INT\000\
  INTERR\000\
  INTERSECT\000\
  INV\000\
  LT\000\
  LTE\000\
  MAX\000\
  MINUS\000\
  MIN\000\
  NEQ\000\
  NEW\000\
  NOT\000\
  NULL\000\
  OBRACE\000\
  OFF\000\
  OPAREN\000\
  ON\000\
  OP_ADD_ASSIGN\000\
  OP_DEC\000\
  OP_DIV_ASSIGN\000\
  OP_INC\000\
  OP_MOD_ASSIGN\000\
  OP_MULT_ASSIGN\000\
  OP_SUB_ASSIGN\000\
  OR\000\
  OROR\000\
  ORWORD\000\
  OSQUARE\000\
  PERCENT\000\
  PLUS\000\
  PRED\000\
  PRIME\000\
  PRINT\000\
  REF\000\
  REL\000\
  REQUIRES\000\
  RETURN\000\
  RIGHTARROW\000\
  SEMICOLON\000\
  SPLIT\000\
  STAR\000\
  STATIC\000\
  SUBSET\000\
  THEN\000\
  TO\000\
  TRUE\000\
  VIEW\000\
  VOID\000\
  UNFOLD\000\
  UNION\000\
  WHERE\000\
  WHILE\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  JAVA\000\
  LITERAL_FLOAT\000\
  LITERAL_INTEGER\000\
  RES\000\
  SELF\000\
  THIS\000\
  FLOW\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 235 "sparser.mly"
   ([])
# 1274 "sparser.ml"
               : Sleekcommons.command list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'command_list) in
    Obj.repr(
# 236 "sparser.mly"
                (List.rev _1)
# 1281 "sparser.ml"
               : Sleekcommons.command list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 240 "sparser.mly"
                      ( [_1] )
# 1288 "sparser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 241 "sparser.mly"
                                   ( _2 :: _1 )
# 1296 "sparser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 245 "sparser.mly"
                    (_1)
# 1303 "sparser.ml"
               : Sleekcommons.command))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "sparser.mly"
    ( EmptyCmd )
# 1309 "sparser.ml"
               : Sleekcommons.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.data_decl) in
    Obj.repr(
# 249 "sparser.mly"
              (
	  DataDef _1
  )
# 1318 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.view_decl) in
    Obj.repr(
# 252 "sparser.mly"
              (
	  PredDef _1
	)
# 1327 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.rel_decl) in
    Obj.repr(
# 255 "sparser.mly"
             (
      RelDef _1
    )
# 1336 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.coercion_decl) in
    Obj.repr(
# 258 "sparser.mly"
                  (
	  LemmaDef _1
	)
# 1345 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_decl) in
    Obj.repr(
# 261 "sparser.mly"
             (
	  _1
	)
# 1354 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'checkentail_cmd) in
    Obj.repr(
# 264 "sparser.mly"
                    (
	  EntailCheck _1
	)
# 1363 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'captureresidue_cmd) in
    Obj.repr(
# 267 "sparser.mly"
                       (
	  CaptureResidue _1
	)
# 1372 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'print_cmd) in
    Obj.repr(
# 270 "sparser.mly"
              (
	  PrintCmd _1
	)
# 1381 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'time_cmd) in
    Obj.repr(
# 273 "sparser.mly"
             (_1)
# 1388 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    Obj.repr(
# 278 "sparser.mly"
          (
  { prog_data_decls = [];
	prog_global_var_decls = [];
	prog_enum_decls = [];
	prog_view_decls = [];
  	Iast.prog_rel_decls = []; (* An Hoa *)
	prog_proc_decls = [];
	prog_coercion_decls = []; }
)
# 1402 "sparser.ml"
               : Iast.prog_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'data_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'data_body) in
    Obj.repr(
# 290 "sparser.mly"
                             (
	  { data_name = _1;
		data_fields = _2;
		data_parent_name = "Object";
		data_invs = []; (* F.mkTrue (get_pos 1); *)
		data_methods = [] }
	)
# 1416 "sparser.ml"
               : Iast.data_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 300 "sparser.mly"
                    ( _2 )
# 1423 "sparser.ml"
               : 'data_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_field_list) in
    Obj.repr(
# 304 "sparser.mly"
                                 ( _2 )
# 1430 "sparser.ml"
               : 'data_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 308 "sparser.mly"
    ( [] )
# 1436 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semicolon) in
    Obj.repr(
# 309 "sparser.mly"
                             ( List.rev _1 )
# 1444 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "sparser.mly"
    ()
# 1450 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    Obj.repr(
# 314 "sparser.mly"
              ()
# 1456 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 318 "sparser.mly"
                   ( [((_1, _2), get_pos 1)] )
# 1464 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 319 "sparser.mly"
                                        (
			if List.mem _4 (List.map (fun f -> snd (fst f)) _1) then
				report_error (get_pos 4) (_4 ^ " is duplicated")
			else
				((_3, _4), get_pos 3) :: _1
		)
# 1478 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'view_header) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'view_body) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_inv) in
    Obj.repr(
# 330 "sparser.mly"
                                          (
	{ _1 with view_formula = (fst _3); view_invariant = _4; try_case_inference = (snd _3) }
  )
# 1489 "sparser.ml"
               : Iast.view_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'view_header) in
    Obj.repr(
# 333 "sparser.mly"
                         (
	  report_error (get_pos 2) ("use == to define a view")
	)
# 1498 "sparser.ml"
               : Iast.view_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "sparser.mly"
    ( (P.mkTrue no_pos, []) )
# 1504 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 340 "sparser.mly"
                                 ( (_2, _3) )
# 1512 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "sparser.mly"
    ( [] )
# 1518 "sparser.ml"
               : 'opt_branches))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'branches) in
    Obj.repr(
# 344 "sparser.mly"
                                 ( _3 )
# 1525 "sparser.ml"
               : 'opt_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'branch) in
    Obj.repr(
# 348 "sparser.mly"
           ([_1])
# 1532 "sparser.ml"
               : 'branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'branches) in
    Obj.repr(
# 349 "sparser.mly"
                              ( _1 :: _3 )
# 1540 "sparser.ml"
               : 'branches))
; (fun __caml_parser_env ->
    Obj.repr(
# 352 "sparser.mly"
    ( "" )
# 1546 "sparser.ml"
               : 'opt_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 353 "sparser.mly"
                                             ( _2 )
# 1553 "sparser.ml"
               : 'opt_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 356 "sparser.mly"
                                                         ( (_2, _5) )
# 1561 "sparser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_ann_cid_list) in
    Obj.repr(
# 361 "sparser.mly"
                                           (
	let cids, anns = List.split _4 in
    let cids, br_labels = List.split cids in
	  if List.exists 
		(fun x -> match snd x with | Primed -> true | Unprimed -> false) cids 
	  then
		report_error (get_pos 1) 
		  ("variables in view header are not allowed to be primed")
	  else
		let modes = get_modes anns in
		  { view_name = _2;
			view_data_name = "";
			view_vars = List.map fst cids;
            view_labels = br_labels;
			view_modes = modes;
			view_typed_vars = [];
			view_formula = F.mkETrue top_flow (get_pos 1);
			view_invariant = (P.mkTrue (get_pos 1), []);
			try_case_inference = false;
			}
  )
# 1589 "sparser.ml"
               : 'view_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 385 "sparser.mly"
               ( (_1, Unprimed) )
# 1596 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 386 "sparser.mly"
                     ( (_1, Primed) )
# 1603 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 387 "sparser.mly"
        ( (res, Unprimed) )
# 1610 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 388 "sparser.mly"
         ( (self, Unprimed) )
# 1617 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 389 "sparser.mly"
         ( (this, Unprimed) )
# 1624 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iformula.struc_formula*bool) in
    Obj.repr(
# 393 "sparser.mly"
           ( 
    ((F.subst_stub_flow_struc top_flow (fst _1)),(snd _1)) )
# 1632 "sparser.ml"
               : 'view_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'rel_header) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rel_body) in
    Obj.repr(
# 401 "sparser.mly"
                                              (
	{ _1 with rel_formula = _3 (* (fst $3) *); (* rel_invariant = $4; *)}
  )
# 1642 "sparser.ml"
               : Iast.rel_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rel_header) in
    Obj.repr(
# 404 "sparser.mly"
                        (
	  report_error (get_pos 2) ("use == to define a relation")
	)
# 1651 "sparser.ml"
               : Iast.rel_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 410 "sparser.mly"
   ( [] )
# 1657 "sparser.ml"
               : 'typed_id_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 411 "sparser.mly"
                  ( 
		[(_1,_2)]
		)
# 1667 "sparser.ml"
               : 'typed_id_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typed_id_list_opt) in
    Obj.repr(
# 414 "sparser.mly"
                                          ( 
		(_1,_2) :: _4 
		)
# 1678 "sparser.ml"
               : 'typed_id_list_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typed_id_list_opt) in
    Obj.repr(
# 420 "sparser.mly"
                                                                          (
    (* let cids, anns = List.split $4 in
    let cids, br_labels = List.split cids in
	  if List.exists 
		(fun x -> match snd x with | Primed -> true | Unprimed -> false) cids 
	  then
		report_error (get_pos 1) 
		  ("variables in view header are not allowed to be primed")
	  else
		let modes = get_modes anns in *)
		  { rel_name = _2;
			rel_typed_vars = _4;
			rel_formula = P.mkTrue (get_pos 1); (* F.mkETrue top_flow (get_pos 1); *)			
			}
  )
# 1700 "sparser.ml"
               : 'rel_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 440 "sparser.mly"
             ( _1 )
# 1707 "sparser.ml"
               : 'rel_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list_aux) in
    Obj.repr(
# 454 "sparser.mly"
                      ( List.rev _1 )
# 1714 "sparser.ml"
               : 'heap_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 458 "sparser.mly"
             ( [_1] )
# 1721 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 459 "sparser.mly"
                                     ( _3 :: _1)
# 1729 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 463 "sparser.mly"
         ( _1 (* including variables. to be resolved later *) )
# 1736 "sparser.ml"
               : 'heap_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 467 "sparser.mly"
    ( [] )
# 1742 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list2) in
    Obj.repr(
# 468 "sparser.mly"
                   ( List.rev _1 )
# 1749 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 472 "sparser.mly"
             ( [_1] )
# 1756 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 473 "sparser.mly"
                                  (
			if List.mem (fst _3) (List.map fst _1) then
				report_error (get_pos 3) ((fst _3) ^ " is duplicated")
			else
				_3 :: _1
		)
# 1769 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 482 "sparser.mly"
                      ( (_1, _3) )
# 1777 "sparser.ml"
               : 'heap_arg2))
; (fun __caml_parser_env ->
    Obj.repr(
# 486 "sparser.mly"
    (
	[] : (ident * primed) list
  )
# 1785 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid_list) in
    Obj.repr(
# 489 "sparser.mly"
             (
	  List.rev _1 : (ident * primed) list
	)
# 1794 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 495 "sparser.mly"
        (
	([_1]) : (ident * primed) list
  )
# 1803 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 498 "sparser.mly"
                       (
	  if List.mem (fst _3) (List.map fst _1) then
		report_error (get_pos 3) ("identifier " ^ (fst _3) ^ " is duplicated")
	  else
		(_3 :: _1) : (ident * primed) list
	)
# 1816 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 509 "sparser.mly"
    ( [] )
# 1822 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid_list) in
    Obj.repr(
# 510 "sparser.mly"
                 (
	  List.rev _1
	)
# 1831 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 515 "sparser.mly"
            (
	[_1]
  )
# 1840 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ann_cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 518 "sparser.mly"
                               (
	  _3 :: _1
	)
# 1850 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_branch) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ann_list) in
    Obj.repr(
# 524 "sparser.mly"
                                (
	((_2, _1), _3)
  )
# 1861 "sparser.ml"
               : 'ann_cid))
; (fun __caml_parser_env ->
    Obj.repr(
# 530 "sparser.mly"
    (
	[]
  )
# 1869 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_list) in
    Obj.repr(
# 533 "sparser.mly"
             (
	  List.rev _1
	)
# 1878 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 539 "sparser.mly"
        (
	[_1]
  )
# 1887 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ann_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 542 "sparser.mly"
                 (
	  _2 :: _1
	)
# 1897 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 548 "sparser.mly"
          (
	AnnMode ModeIn
  )
# 1905 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 551 "sparser.mly"
                  (
	if _2 = "out" then AnnMode ModeOut
	else report_error (get_pos 2) ("unrecognized mode: " ^ _2)
  )
# 1915 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cid_list) in
    Obj.repr(
# 557 "sparser.mly"
                               (_2)
# 1922 "sparser.ml"
               : 'sq_clist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extended_constr) in
    Obj.repr(
# 561 "sparser.mly"
                  ((_1,false))
# 1929 "sparser.ml"
               : Iformula.struc_formula*bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 562 "sparser.mly"
                      (((Iformula.formula_to_struc_formula _1),true))
# 1936 "sparser.ml"
               : Iformula.struc_formula*bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 567 "sparser.mly"
            ([_1])
# 1943 "sparser.ml"
               : 'extended_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extended_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 568 "sparser.mly"
                                   (_3::_1)
# 1951 "sparser.ml"
               : 'extended_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 572 "sparser.mly"
   ([])
# 1957 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 573 "sparser.mly"
            ([_1])
# 1964 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 574 "sparser.mly"
                                   (_2)
# 1971 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 579 "sparser.mly"
  (
			let _ = if(List.length (Ipure.look_for_anonymous_pure_formula _1))>0 then 
				report_error (get_pos 1) ("anonimous variables in case guard are disalowed")
				else true in 
			[(_1,_3)])
# 1983 "sparser.ml"
               : 'impl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'impl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pure_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 584 "sparser.mly"
                                                             (((_2,_4)::_1))
# 1992 "sparser.ml"
               : 'impl_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'impl_list) in
    Obj.repr(
# 589 "sparser.mly"
 (
		Iformula.ECase 
			{
				Iformula.formula_case_branches = _3;
				Iformula.formula_case_pos = (get_pos 3) 
			}
	)
# 2005 "sparser.ml"
               : 'r_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sq_clist) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'one_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr_opt) in
    Obj.repr(
# 597 "sparser.mly"
 (Iformula.EBase 
						{
						 	Iformula.formula_ext_explicit_inst = _1;
						 	Iformula.formula_ext_implicit_inst = [];
							Iformula.formula_ext_exists = [];
						 	Iformula.formula_ext_base = _2;				
						 	Iformula.formula_ext_continuation = _3;
						 	Iformula.formula_ext_pos = (get_pos 2);
							} 
		)
# 2023 "sparser.ml"
               : 'r_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_constr) in
    Obj.repr(
# 612 "sparser.mly"
               ( (* each case of a view definition *)
	_1
  )
# 2032 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'one_constr) in
    Obj.repr(
# 615 "sparser.mly"
                                         (
	  F.mkOr _1 _3 (get_pos 2)
	)
# 2042 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 618 "sparser.mly"
          (
	  report_error (get_pos 1) ("parse error in constraints")
	)
# 2050 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_constr) in
    Obj.repr(
# 623 "sparser.mly"
               ( _1 )
# 2057 "sparser.ml"
               : 'one_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'core_constr) in
    Obj.repr(
# 624 "sparser.mly"
                                                        (
	  match _5 with
		| F.Base ({F.formula_base_heap = h;
               F.formula_base_pure = p;
               F.formula_base_flow = fl;
               F.formula_base_branches = b}) ->
			F.mkExists _3 h p fl b (get_pos 1)
		| _ -> report_error (get_pos 4) ("only Base is expected here.")
	)
# 2073 "sparser.ml"
               : 'one_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'heap_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 637 "sparser.mly"
                                   ( F.replace_branches (snd _2) (F.formula_of_heap_with_flow _1 (fst _2) (get_pos 1)) )
# 2081 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 638 "sparser.mly"
                                   ( F.replace_branches (snd _2) (F.formula_of_pure_with_flow _1 (fst _2) (get_pos 1)) )
# 2089 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 639 "sparser.mly"
                                                   ( F.mkBase _1 _3 (fst _4) (snd _4) (get_pos 2) )
# 2098 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'flow_constraints) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 643 "sparser.mly"
                                 ( (_1,_2))
# 2106 "sparser.ml"
               : 'flows_and_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 644 "sparser.mly"
                ((stub_flow,_1))
# 2113 "sparser.ml"
               : 'flows_and_branches))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 647 "sparser.mly"
                     (_3)
# 2121 "sparser.ml"
               : 'flow_constraints))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 650 "sparser.mly"
                                                          ((fresh_branch_point_id _3))
# 2128 "sparser.ml"
               : 'opt_formula_label))
; (fun __caml_parser_env ->
    Obj.repr(
# 651 "sparser.mly"
 ((fresh_branch_point_id ""))
# 2134 "sparser.ml"
               : 'opt_formula_label))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'heap_rd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'heap_rw) in
    Obj.repr(
# 654 "sparser.mly"
                                            (F.mkPhase _2 _5 (get_pos 2))
# 2142 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'heap_rd) in
    Obj.repr(
# 655 "sparser.mly"
                          (F.mkPhase _2 F.HTrue (get_pos 2))
# 2149 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_rw) in
    Obj.repr(
# 656 "sparser.mly"
            (F.mkPhase F.HTrue _1 (get_pos 2))
# 2156 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_rd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 659 "sparser.mly"
                                        ( F.mkStar _1 _3 (get_pos 2) )
# 2164 "sparser.ml"
               : 'heap_rd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_rd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 660 "sparser.mly"
                                       ( F.mkConj _1 _3 (get_pos 2) )
# 2172 "sparser.ml"
               : 'heap_rd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 661 "sparser.mly"
                           (_1)
# 2179 "sparser.ml"
               : 'heap_rd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'heap_wr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'heap_constr) in
    Obj.repr(
# 664 "sparser.mly"
                                           ( F.mkStar _1 _4 (get_pos 2) )
# 2187 "sparser.ml"
               : 'heap_rw))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_wr) in
    Obj.repr(
# 665 "sparser.mly"
            (F.mkPhase F.HTrue _1 (get_pos 2))
# 2194 "sparser.ml"
               : 'heap_rw))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_wr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 668 "sparser.mly"
                                    (F.mkStar _1 _3 (get_pos 2))
# 2202 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_wr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 669 "sparser.mly"
                                        (F.mkStar _1 _3 (get_pos 2))
# 2210 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 670 "sparser.mly"
                       (_1)
# 2217 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 671 "sparser.mly"
                           (_1)
# 2224 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'heap_arg_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 675 "sparser.mly"
                                                                       (
	let h = F.HeapNode { F.h_formula_heap_node = _1;
						 F.h_formula_heap_name = _3;
						 F.h_formula_heap_imm = true;
						 F.h_formula_heap_full = false;
						 F.h_formula_heap_with_inv = false;
						 F.h_formula_heap_pseudo_data = false;
						 F.h_formula_heap_arguments = _5;
						 F.h_formula_heap_label = _8;
						 F.h_formula_heap_pos = get_pos 2 } in
	  h
  )
# 2245 "sparser.ml"
               : 'simple_heap_constr_imm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'opt_heap_arg_list2) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 687 "sparser.mly"
                                                                            (
	  let h = F.HeapNode2 { F.h_formula_heap2_node = _1;
							F.h_formula_heap2_name = _3;
							F.h_formula_heap2_imm = true;
							F.h_formula_heap2_full = false;
							F.h_formula_heap2_with_inv = false;
							F.h_formula_heap2_pseudo_data = false;
							F.h_formula_heap2_arguments = _5;
							F.h_formula_heap2_label = _8;
							F.h_formula_heap2_pos = get_pos 2 } in
		h
	)
# 2266 "sparser.ml"
               : 'simple_heap_constr_imm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 702 "sparser.mly"
                                                                   (
	let h = F.HeapNode { F.h_formula_heap_node = _1;
						 F.h_formula_heap_name = _3;
						 F.h_formula_heap_imm =  false;
						 F.h_formula_heap_full = false;
						 F.h_formula_heap_with_inv = false;
						 F.h_formula_heap_pseudo_data = false;
						 F.h_formula_heap_arguments = _5;
						 F.h_formula_heap_label = _7;
						 F.h_formula_heap_pos = get_pos 2 } in
	  h
  )
# 2287 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'opt_heap_arg_list2) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 714 "sparser.mly"
                                                                        (
	  let h = F.HeapNode2 { F.h_formula_heap2_node = _1;
							F.h_formula_heap2_name = _3;
							F.h_formula_heap2_imm = false;
							F.h_formula_heap2_full = false;
							F.h_formula_heap2_with_inv = false;
							F.h_formula_heap2_pseudo_data = false;
							F.h_formula_heap2_arguments = _5;
							F.h_formula_heap2_label = _7;
							F.h_formula_heap2_pos = get_pos 2 } in
		h
	)
# 2308 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pure_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 730 "sparser.mly"
                                         ( match _1 with 
			| P.BForm (b,_) -> P.BForm (b,_2)
		        | P.And _ -> _1
			| P.Or  (b1,b2,_,l) -> P.Or(b1,b2,_2,l)
	                | P.Not (b1,_,l) -> P.Not(b1,_2,l)
	                | P.Forall (q,b1,_,l)-> P.Forall(q,b1,_2,l)
			| P.Exists (q,b1,_,l)-> P.Exists(q,b1,_2,l))
# 2322 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pure_constr) in
    Obj.repr(
# 737 "sparser.mly"
                                                             ( P.mkAnd _1 _3 (get_pos 2) )
# 2330 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 741 "sparser.mly"
                               ( P.mkOr _1 _3 None (get_pos 2) )
# 2338 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 742 "sparser.mly"
                                           ( P.mkOr _1 _3 None (get_pos 2) )
# 2346 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbconstr) in
    Obj.repr(
# 746 "sparser.mly"
             (
	fst _1
  )
# 2355 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_pure_constr) in
    Obj.repr(
# 749 "sparser.mly"
                                          (
	  _2
	)
# 2364 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    Obj.repr(
# 752 "sparser.mly"
                                                        (		
	  let qf f v = P.mkExists [v] f None (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 2376 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    Obj.repr(
# 757 "sparser.mly"
                                                        (
	  let qf f v = P.mkForall [v] f None (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 2388 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 762 "sparser.mly"
         (
	  P.mkTrue (get_pos 1)
	)
# 2396 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 765 "sparser.mly"
          (
	  P.mkFalse (get_pos 1)
	)
# 2404 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 768 "sparser.mly"
        (
	  P.BForm (P.mkBVar _1 (get_pos 1), None )
	)
# 2413 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 771 "sparser.mly"
            (
	  P.mkNot (P.BForm (P.mkBVar _2 (get_pos 2), None )) None (get_pos 1)
	)
# 2422 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    Obj.repr(
# 775 "sparser.mly"
                                 (
		P.mkNot _3 None (get_pos 1)
	)
# 2431 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bconstr) in
    Obj.repr(
# 781 "sparser.mly"
            (
	(fst _1, snd _1)
  )
# 2440 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 784 "sparser.mly"
                           (
	  expand_exp_list P.mkNeq _1 _3 (get_pos 2)
	)
# 2450 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 787 "sparser.mly"
                          (
	  expand_exp_list P.mkEq _1 _3 (get_pos 2)
	)
# 2460 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 790 "sparser.mly"
                          (
	  expand_exp_list P.mkLt _1 _3 (get_pos 2)
	)
# 2470 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 793 "sparser.mly"
                           (
	  expand_exp_list P.mkLte _1 _3 (get_pos 2)
	)
# 2480 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 796 "sparser.mly"
                          (
	  expand_exp_list P.mkGt _1 _3 (get_pos 2)
	)
# 2490 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 799 "sparser.mly"
                           (
	  expand_exp_list P.mkGte _1 _3 (get_pos 2)
	)
# 2500 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 805 "sparser.mly"
                           (
	let p = P.build_relation P.mkLt _1 _3 (get_pos 2) in
	  (p, Some _3)
  )
# 2511 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 809 "sparser.mly"
                            (
	  let p = P.build_relation P.mkLte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2522 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 813 "sparser.mly"
                           (
	  let p = P.build_relation P.mkGt _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2533 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 817 "sparser.mly"
                            (
	  let p = P.build_relation P.mkGte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2544 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 821 "sparser.mly"
                           (
	  let p = P.build_relation P.mkEq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2555 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 825 "sparser.mly"
                            (
	  let p = P.build_relation P.mkNeq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2566 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 830 "sparser.mly"
                (
	  (P.BForm (P.BagIn (_1, _3, get_pos 2), None), None)
	)
# 2576 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 833 "sparser.mly"
                   (
	  (P.BForm (P.BagNotIn (_1, _3, get_pos 2), None), None)
	)
# 2586 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 836 "sparser.mly"
                     (
	  (P.BForm (P.BagSub (_1, _3, get_pos 2), None), None)
	)
# 2596 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 839 "sparser.mly"
                                       (
	  (P.BForm (P.BagMax (_3, _5, get_pos 2), None), None)
	)
# 2606 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 842 "sparser.mly"
                                       (
	  (P.BForm (P.BagMin (_3, _5, get_pos 2), None), None)
	)
# 2616 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 845 "sparser.mly"
                                           (
   (* AnHoa: relation constraint, for instance, given the relation 
    *  s(a,b,c) == c = a + b.
    *  After this definition, we can have the relation constraint: s(x,1,x+1), s(x,y,x+y), ... in our formula.
    *)
   (P.BForm (P.RelForm (_1, _3, get_pos 1), None), None)
  )
# 2630 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 857 "sparser.mly"
        (
		P.Var (_1, get_pos 1)
  )
# 2639 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 860 "sparser.mly"
                    (
	  P.IConst (_1, get_pos 1)
	)
# 2648 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 863 "sparser.mly"
                        (
	  P.mkMult (P.IConst (_1, get_pos 1)) (P.Var (_2, get_pos 2)) (get_pos 1)
	)
# 2658 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 866 "sparser.mly"
                   (
      P.mkMult _1 _3 (get_pos 2)
  )
# 2668 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 869 "sparser.mly"
                   (
	  P.mkAdd _1 _3 (get_pos 2)
	)
# 2678 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 872 "sparser.mly"
                    (
	  P.mkSubtract _1 _3 (get_pos 2)
	)
# 2688 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 875 "sparser.mly"
                            (
	  P.mkSubtract (P.IConst (0, get_pos 1)) _2 (get_pos 1)
	)
# 2697 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 878 "sparser.mly"
                                      (
	  P.mkMax _3 _5 (get_pos 1)
	)
# 2707 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 881 "sparser.mly"
                                      (
	  P.mkMin _3 _5 (get_pos 1)
	)
# 2717 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 884 "sparser.mly"
         (
	  P.Null (get_pos 1)
	)
# 2725 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 888 "sparser.mly"
                                (
	  P.Bag (_2, get_pos 1)
	)
# 2734 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 891 "sparser.mly"
                                      (
	  P.BagUnion (_3, get_pos 1)
	)
# 2743 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 894 "sparser.mly"
                                          (
	  P.BagIntersect (_3, get_pos 1)
	)
# 2752 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 897 "sparser.mly"
                                       (
	  P.BagDiff (_3, _5, get_pos 1)
	)
# 2762 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 900 "sparser.mly"
                             (
    (* An Hoa : the array access, note that now we only allow 1-dimensional
     * array, latter this can be expanded by replacing cexp by cexp_list *)
    P.ArrayAt (_1, _3, get_pos 1)
  )
# 2774 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 908 "sparser.mly"
    ( [] : P.exp list )
# 2780 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 909 "sparser.mly"
              ( _1 )
# 2787 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list_rec) in
    Obj.repr(
# 913 "sparser.mly"
                  (
	List.rev _1
  )
# 2796 "sparser.ml"
               : 'cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 919 "sparser.mly"
         (
	[_1]
  )
# 2805 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list_rec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 922 "sparser.mly"
                             (
	  _3 :: _1
	)
# 2815 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'extended_meta_constr) in
    Obj.repr(
# 931 "sparser.mly"
                                                           (
	(_2, _4)
  )
# 2825 "sparser.ml"
               : 'checkentail_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 937 "sparser.mly"
                                        (
	(_3)
  )
# 2834 "sparser.ml"
               : 'captureresidue_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'id_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 943 "sparser.mly"
                                                                                    (
	(_3, _6, _8)
  )
# 2845 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 946 "sparser.mly"
                                                            (
	  ([], _3, _5)
	)
# 2855 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 952 "sparser.mly"
                        (
		PCmd _2
  )
# 2864 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 955 "sparser.mly"
                               (
	  PVar _3
	)
# 2873 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 961 "sparser.mly"
                        (Time(true, _3, get_pos 1))
# 2880 "sparser.ml"
               : 'time_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 962 "sparser.mly"
                         (Time(false, _3, get_pos 1))
# 2887 "sparser.ml"
               : 'time_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 965 "sparser.mly"
                                            (
	LetDef (_3, _5)
  )
# 2897 "sparser.ml"
               : 'let_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 971 "sparser.mly"
                      (
	MetaVar _2
  )
# 2906 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iformula.struc_formula*bool) in
    Obj.repr(
# 974 "sparser.mly"
             (
	  MetaEForm (F.subst_stub_flow_struc n_flow (fst _1))
	)
# 2915 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 977 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2924 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 982 "sparser.mly"
                      (
	MetaVar _2
  )
# 2933 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 985 "sparser.mly"
                       (
	  MetaForm (F.subst_stub_flow n_flow _1)
	)
# 2942 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 988 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2951 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'opt_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'disjunctive_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'coercion_direction) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_constr) in
    Obj.repr(
# 994 "sparser.mly"
                                                                               (
	{ coercion_type = _4;
	  coercion_name = _2;
	  coercion_head = (F.subst_stub_flow top_flow _3);
	  coercion_body = (F.subst_stub_flow top_flow _5);
	  coercion_proof = Return ({ exp_return_val = None;
								 exp_return_path_id = None ;
								 exp_return_pos = get_pos 1 })
	}
  )
# 2970 "sparser.ml"
               : Iast.coercion_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 1007 "sparser.mly"
              ( Left )
# 2976 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 1008 "sparser.mly"
          ( Equiv )
# 2982 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 1009 "sparser.mly"
               ( Right )
# 2988 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 1013 "sparser.mly"
    ( "" )
# 2994 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1014 "sparser.mly"
                                       ( _2 )
# 3001 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_array_type) in
    Obj.repr(
# 1018 "sparser.mly"
                   ( _1 )
# 3008 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 1019 "sparser.mly"
               ( _1 )
# 3015 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 1023 "sparser.mly"
        ( int_type )
# 3021 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1024 "sparser.mly"
          ( float_type )
# 3027 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1025 "sparser.mly"
         ( bool_type )
# 3033 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1026 "sparser.mly"
               ( Named _1 )
# 3040 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 1030 "sparser.mly"
                              ( Array (int_type, None) )
# 3048 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 1031 "sparser.mly"
                                  ( Array (int_type, None) )
# 3056 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list_opt) in
    Obj.repr(
# 1035 "sparser.mly"
                                   ()
# 3063 "sparser.ml"
               : 'rank_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1039 "sparser.mly"
    ()
# 3069 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comma_list) in
    Obj.repr(
# 1040 "sparser.mly"
               ()
# 3076 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1044 "sparser.mly"
          ()
# 3082 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list) in
    Obj.repr(
# 1045 "sparser.mly"
                     ()
# 3089 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1049 "sparser.mly"
               ( [_1] )
# 3096 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1050 "sparser.mly"
                             ( _3 :: _1 )
# 3104 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1054 "sparser.mly"
    ( [] )
# 3110 "sparser.ml"
               : 'opt_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 1055 "sparser.mly"
            ( _1 )
# 3117 "sparser.ml"
               : 'opt_id_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry data_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry view_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry rel_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry coercion_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry formulas *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry opt_command_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Iast.prog_decl)
let data_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Iast.data_decl)
let view_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Iast.view_decl)
let rel_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Iast.rel_decl)
let coercion_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Iast.coercion_decl)
let formulas (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Iformula.struc_formula*bool)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Sleekcommons.command)
let opt_command_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 8 lexfun lexbuf : Sleekcommons.command list)
;;
