type token =
  | AND
  | ANDAND
  | ASSERT
  | ASSUME
  | AT
  | ATT
  | BIND
  | BOOL
  | BREAK
  | BY
  | CASE
  | CBRACE
  | CHECKENTAIL
  | CAPTURERESIDUE
  | CLASS
  | COERCION
  | COLON
  | COLONCOLON
  | COMMA
  | COMPOSE
  | CONSEQ
  | CONST
  | CONTINUE
  | CPAREN
  | CSQUARE
  | DATA
  | DDEBUG
  | DTIME
  | DIFF
  | DISTR
  | DIV
  | DOLLAR
  | DOT
  | DOUBLEQUOTE
  | DERIVE
  | DYNAMIC
  | ELSE
  | ENSURES
  | ENUM
  | EOF
  | EQ
  | EQEQ
  | EQUIV
  | EXISTS
  | EXTENDS
  | FALSE
  | FLOAT
  | FORALL
  | GT
  | GTE
  | HASH
  | IDENTIFIER of (string)
  | IF
  | IMM
  | IMPLIES
  | IMPLY
  | IMPORT
  | IN
  | JAVA of (string)
  | LEFTARROW
  | LEMMA
  | LET
  | LITERAL_FLOAT of (float)
  | LITERAL_INTEGER of (int)
  | NOTIN
  | BAGMAX
  | BAGMIN
  | FOLD
  | INT
  | INTERR
  | INTERSECT
  | INV
  | LT
  | LTE
  | MAX
  | MINUS
  | MIN
  | NEQ
  | NEW
  | NOT
  | NULL
  | OBRACE
  | OFF
  | OPAREN
  | ON
  | OP_ADD_ASSIGN
  | OP_DEC
  | OP_DIV_ASSIGN
  | OP_INC
  | OP_MOD_ASSIGN
  | OP_MULT_ASSIGN
  | OP_SUB_ASSIGN
  | OR
  | OROR
  | ORWORD
  | OSQUARE
  | PERCENT
  | PLUS
  | PRED
  | PRIME
  | PRINT
  | REF
  | REQUIRES
  | RES of (string)
  | RETURN
  | RIGHTARROW
  | SELF of (string)
  | SEMICOLON
  | SPLIT
  | STAR
  | STATIC
  | SUBSET
  | THEN
  | THIS of (string)
  | TO
  | TRUE
  | VIEW
  | VOID
  | UNFOLD
  | UNION
  | WHERE
  | WHILE
  | FLOW of (string)

open Parsing;;
# 2 "sparser.mly"
  (* Parser for a more expressive language *)

  open Globals
  open Iast
  open Sleekcommons

  module F = Iformula
  module P = Ipure

  type type_decl =
	| Data of data_decl
	| Enum of enum_decl
	| View of view_decl

  type decl =
    | Type of type_decl
    | Proc of proc_decl
	| Coercion of coercion_decl

  type member =
	| Field of (typed_ident * loc)
	| Inv of F.formula
	| Method of proc_decl

  type spec_qualifier =
	| Static
	| Dynamic

  type ann =
	| AnnMode of mode
	| AnnType of typ

  let get_pos x = 
	{ start_pos = Parsing.symbol_start_pos ();
	  end_pos = Parsing. symbol_end_pos ();
	  mid_pos = Parsing.rhs_start_pos x;
	}	

  let rec get_mode (anns : ann list) : mode = match anns with
	| ann :: rest -> begin
		match ann with
		  | AnnMode m -> m
		  | _ -> get_mode rest
	  end
	| [] -> ModeOut (* default to ModeOut if there is no annotation. *)

  let rec get_modes (anns : ann list list) : mode list =
	match anns with
	  | alist :: rest ->
		  let m_rest = get_modes rest in
		  let m = get_mode alist in
			m :: m_rest
	| [] -> []


  let expand_exp_list mk l r pos =
	let b, oe = l in
	  match oe with
		| Some e ->
			let tmp = P.build_relation mk e r pos in
			let res = P.mkAnd b tmp pos in
			  (res, Some r)
		| None -> report_error pos ("parse error in lhs of relational operator")

  let rec split_members mbrs = match mbrs with
	| mbr :: rest -> begin
		let fields, invs, meths = split_members rest in
		  match mbr with
			| Field f -> (f :: fields, invs, meths)
			| Inv i -> (fields, i :: invs, meths)
			| Method m ->
				(fields, invs, m :: meths)
	  end
	| [] -> ([], [], [])

# 204 "sparser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* ANDAND *);
  259 (* ASSERT *);
  260 (* ASSUME *);
  261 (* AT *);
  262 (* ATT *);
  263 (* BIND *);
  264 (* BOOL *);
  265 (* BREAK *);
  266 (* BY *);
  267 (* CASE *);
  268 (* CBRACE *);
  269 (* CHECKENTAIL *);
  270 (* CAPTURERESIDUE *);
  271 (* CLASS *);
  272 (* COERCION *);
  273 (* COLON *);
  274 (* COLONCOLON *);
  275 (* COMMA *);
  276 (* COMPOSE *);
  277 (* CONSEQ *);
  278 (* CONST *);
  279 (* CONTINUE *);
  280 (* CPAREN *);
  281 (* CSQUARE *);
  282 (* DATA *);
  283 (* DDEBUG *);
  284 (* DTIME *);
  285 (* DIFF *);
  286 (* DISTR *);
  287 (* DIV *);
  288 (* DOLLAR *);
  289 (* DOT *);
  290 (* DOUBLEQUOTE *);
  291 (* DERIVE *);
  292 (* DYNAMIC *);
  293 (* ELSE *);
  294 (* ENSURES *);
  295 (* ENUM *);
    0 (* EOF *);
  296 (* EQ *);
  297 (* EQEQ *);
  298 (* EQUIV *);
  299 (* EXISTS *);
  300 (* EXTENDS *);
  301 (* FALSE *);
  302 (* FLOAT *);
  303 (* FORALL *);
  304 (* GT *);
  305 (* GTE *);
  306 (* HASH *);
  308 (* IF *);
  309 (* IMM *);
  310 (* IMPLIES *);
  311 (* IMPLY *);
  312 (* IMPORT *);
  313 (* IN *);
  315 (* LEFTARROW *);
  316 (* LEMMA *);
  317 (* LET *);
  320 (* NOTIN *);
  321 (* BAGMAX *);
  322 (* BAGMIN *);
  323 (* FOLD *);
  324 (* INT *);
  325 (* INTERR *);
  326 (* INTERSECT *);
  327 (* INV *);
  328 (* LT *);
  329 (* LTE *);
  330 (* MAX *);
  331 (* MINUS *);
  332 (* MIN *);
  333 (* NEQ *);
  334 (* NEW *);
  335 (* NOT *);
  336 (* NULL *);
  337 (* OBRACE *);
  338 (* OFF *);
  339 (* OPAREN *);
  340 (* ON *);
  341 (* OP_ADD_ASSIGN *);
  342 (* OP_DEC *);
  343 (* OP_DIV_ASSIGN *);
  344 (* OP_INC *);
  345 (* OP_MOD_ASSIGN *);
  346 (* OP_MULT_ASSIGN *);
  347 (* OP_SUB_ASSIGN *);
  348 (* OR *);
  349 (* OROR *);
  350 (* ORWORD *);
  351 (* OSQUARE *);
  352 (* PERCENT *);
  353 (* PLUS *);
  354 (* PRED *);
  355 (* PRIME *);
  356 (* PRINT *);
  357 (* REF *);
  358 (* REQUIRES *);
  360 (* RETURN *);
  361 (* RIGHTARROW *);
  363 (* SEMICOLON *);
  364 (* SPLIT *);
  365 (* STAR *);
  366 (* STATIC *);
  367 (* SUBSET *);
  368 (* THEN *);
  370 (* TO *);
  371 (* TRUE *);
  372 (* VIEW *);
  373 (* VOID *);
  374 (* UNFOLD *);
  375 (* UNION *);
  376 (* WHERE *);
  377 (* WHILE *);
    0|]

let yytransl_block = [|
  307 (* IDENTIFIER *);
  314 (* JAVA *);
  318 (* LITERAL_FLOAT *);
  319 (* LITERAL_INTEGER *);
  359 (* RES *);
  362 (* SELF *);
  369 (* THIS *);
  378 (* FLOW *);
    0|]

let yylhs = "\255\255\
\007\000\007\000\008\000\008\000\006\000\006\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\001\000\002\000\
\015\000\016\000\017\000\017\000\019\000\019\000\018\000\018\000\
\003\000\003\000\023\000\023\000\025\000\025\000\026\000\026\000\
\028\000\028\000\027\000\021\000\030\000\030\000\030\000\030\000\
\030\000\022\000\031\000\032\000\032\000\033\000\035\000\035\000\
\036\000\036\000\037\000\038\000\038\000\039\000\039\000\029\000\
\029\000\040\000\040\000\041\000\042\000\042\000\043\000\043\000\
\044\000\044\000\045\000\005\000\005\000\046\000\046\000\049\000\
\049\000\049\000\050\000\050\000\048\000\048\000\047\000\047\000\
\047\000\051\000\051\000\052\000\052\000\052\000\054\000\054\000\
\055\000\056\000\056\000\053\000\053\000\053\000\057\000\057\000\
\057\000\058\000\058\000\060\000\060\000\060\000\060\000\059\000\
\059\000\061\000\061\000\024\000\024\000\063\000\063\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\067\000\
\067\000\066\000\068\000\068\000\011\000\012\000\071\000\071\000\
\013\000\013\000\014\000\014\000\010\000\070\000\070\000\070\000\
\069\000\069\000\069\000\004\000\074\000\074\000\074\000\073\000\
\073\000\020\000\020\000\075\000\075\000\075\000\075\000\076\000\
\076\000\077\000\078\000\078\000\079\000\079\000\072\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\000\000\001\000\001\000\002\000\001\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\003\000\
\002\000\003\000\000\000\002\000\000\000\001\000\002\000\004\000\
\005\000\003\000\000\000\003\000\000\000\004\000\001\000\003\000\
\000\000\004\000\005\000\005\000\001\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\001\000\000\000\001\000\
\001\000\003\000\003\000\000\000\001\000\001\000\003\000\000\000\
\001\000\001\000\003\000\003\000\000\000\001\000\001\000\002\000\
\002\000\002\000\003\000\001\000\001\000\001\000\003\000\000\000\
\001\000\003\000\004\000\005\000\004\000\003\000\001\000\003\000\
\001\000\001\000\006\000\002\000\002\000\004\000\002\000\001\000\
\003\000\004\000\000\000\005\000\003\000\001\000\003\000\003\000\
\001\000\005\000\001\000\003\000\003\000\001\000\001\000\008\000\
\008\000\007\000\007\000\002\000\003\000\003\000\003\000\001\000\
\003\000\006\000\006\000\001\000\001\000\001\000\002\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\006\000\001\000\001\000\002\000\003\000\003\000\003\000\002\000\
\006\000\006\000\001\000\003\000\004\000\004\000\006\000\000\000\
\001\000\001\000\001\000\003\000\005\000\004\000\009\000\006\000\
\003\000\004\000\003\000\003\000\006\000\002\000\001\000\001\000\
\002\000\001\000\001\000\006\000\001\000\001\000\001\000\000\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\003\000\000\000\001\000\001\000\002\000\001\000\003\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\193\000\000\000\194\000\000\000\000\000\195\000\000\000\000\000\
\196\000\081\000\000\000\000\000\000\000\117\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\147\000\000\000\000\000\000\000\039\000\040\000\041\000\116\000\
\000\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\079\000\082\000\000\000\094\000\103\000\000\000\102\000\
\000\000\000\000\120\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\008\000\009\000\198\000\005\000\010\000\
\011\000\012\000\013\000\014\000\199\000\000\000\003\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\140\000\000\000\000\000\000\000\
\000\000\138\000\144\000\000\000\119\000\000\000\153\000\000\000\
\000\000\000\000\000\000\000\000\000\000\097\000\000\000\054\000\
\000\000\000\000\000\000\000\000\088\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\000\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\171\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\182\000\
\181\000\183\000\180\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\026\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\148\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\113\000\000\000\067\000\000\000\000\000\000\000\
\000\000\109\000\000\000\087\000\000\000\000\000\000\000\000\000\
\000\000\141\000\000\000\000\000\073\000\078\000\071\000\080\000\
\000\000\000\000\000\000\101\000\100\000\000\000\122\000\125\000\
\126\000\123\000\124\000\121\000\131\000\129\000\130\000\127\000\
\128\000\132\000\000\000\000\000\000\000\169\000\000\000\000\000\
\164\000\163\000\000\000\000\000\161\000\018\000\000\000\020\000\
\023\000\000\000\185\000\184\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\177\000\174\000\173\000\175\000\000\000\
\000\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\150\000\000\000\000\000\000\000\000\000\000\000\000\000\096\000\
\000\000\095\000\000\000\055\000\149\000\000\000\000\000\000\000\
\089\000\000\000\000\000\086\000\000\000\000\000\000\000\000\000\
\191\000\000\000\000\000\167\000\000\000\168\000\158\000\000\000\
\162\000\000\000\189\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\092\000\000\000\030\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\049\000\074\000\098\000\090\000\000\000\
\000\000\000\000\166\000\157\000\000\000\024\000\186\000\190\000\
\000\000\000\000\060\000\000\000\063\000\059\000\000\000\028\000\
\172\000\075\000\000\000\151\000\114\000\115\000\136\000\137\000\
\145\000\146\000\083\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\192\000\000\000\165\000\
\034\000\066\000\065\000\064\000\076\000\000\000\000\000\000\000\
\000\000\000\000\106\000\045\000\000\000\107\000\000\000\050\000\
\160\000\000\000\000\000\104\000\105\000\000\000\000\000\159\000"

let yydgoto = "\008\000\
\009\000\067\000\068\000\069\000\042\000\070\000\077\000\078\000\
\071\000\072\000\073\000\074\000\075\000\076\000\012\000\082\000\
\164\000\165\000\248\000\166\000\015\000\173\000\003\001\043\000\
\117\000\031\001\032\001\254\000\255\000\098\000\078\001\079\001\
\080\001\045\000\082\001\083\001\084\001\113\000\114\000\000\001\
\001\001\099\001\100\001\101\001\046\000\047\000\150\000\049\000\
\214\000\178\000\050\000\051\000\052\000\118\000\119\000\134\000\
\109\000\053\000\054\000\055\000\056\000\057\000\111\000\058\000\
\059\000\060\000\104\000\061\000\151\000\045\001\152\000\042\001\
\087\000\008\001\167\000\168\000\251\000\052\001\053\001"

let yysindex = "\075\002\
\000\000\253\254\217\254\003\255\041\004\247\255\247\255\000\000\
\000\000\110\255\000\000\095\255\146\255\000\000\125\255\158\255\
\000\000\000\000\128\255\145\255\149\255\000\000\157\255\159\255\
\036\000\165\255\189\255\194\255\200\255\077\255\204\255\036\000\
\000\000\077\255\178\005\036\000\000\000\000\000\000\000\000\000\
\230\255\000\000\043\000\190\255\203\254\235\005\229\255\234\255\
\000\000\000\000\000\000\058\000\000\000\000\000\213\255\000\000\
\071\000\176\000\000\000\254\000\061\000\129\004\050\000\061\255\
\052\000\001\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\247\255\000\000\000\000\
\187\255\057\000\013\000\092\000\041\004\044\000\171\004\021\006\
\077\255\036\000\036\000\000\000\000\000\036\000\036\000\077\255\
\077\255\000\000\000\000\077\255\000\000\209\254\000\000\082\000\
\098\255\021\006\013\255\217\255\011\255\000\000\031\255\000\000\
\080\000\088\000\077\255\071\005\000\000\000\000\111\000\063\000\
\077\255\077\255\077\255\077\255\077\255\077\255\004\255\015\255\
\235\005\071\005\000\000\123\255\094\000\000\000\077\255\077\255\
\077\255\077\255\077\255\077\255\077\255\077\255\077\255\077\255\
\077\255\077\255\077\255\087\255\065\000\234\255\095\000\000\000\
\066\000\078\000\084\000\093\000\100\000\113\000\000\000\000\000\
\000\000\000\000\000\000\140\000\046\000\103\000\064\000\064\000\
\000\000\121\000\000\000\000\000\087\000\128\000\246\254\045\255\
\221\255\014\005\006\255\147\000\151\000\153\000\155\000\146\000\
\017\255\021\255\000\000\159\000\021\006\021\006\126\000\036\000\
\077\000\036\000\000\000\021\006\000\000\036\000\162\000\156\000\
\141\000\000\000\096\000\000\000\115\000\209\254\209\254\085\000\
\085\000\000\000\209\254\026\255\000\000\000\000\000\000\000\000\
\043\000\211\255\175\000\000\000\000\000\145\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\209\254\129\004\150\000\000\000\255\003\165\000\
\000\000\000\000\169\000\177\000\000\000\000\000\187\255\000\000\
\000\000\192\000\000\000\000\000\161\000\036\000\170\000\201\000\
\000\000\021\006\188\000\000\000\000\000\000\000\000\000\171\004\
\015\255\000\000\153\255\077\255\021\006\021\006\036\000\036\000\
\000\000\077\255\077\255\078\006\225\000\157\000\214\000\000\000\
\036\000\000\000\225\000\000\000\000\000\182\000\209\000\130\000\
\000\000\176\255\039\255\000\000\036\000\215\000\206\000\135\000\
\000\000\218\255\193\000\000\000\213\000\000\000\000\000\129\004\
\000\000\196\000\000\000\229\000\231\000\222\000\250\000\000\000\
\121\000\003\001\000\000\241\254\200\254\015\255\037\255\041\255\
\046\255\239\000\240\000\047\255\063\255\021\006\241\000\176\255\
\000\000\232\000\000\000\156\000\032\255\219\000\249\000\000\000\
\209\254\224\000\251\000\000\000\000\000\000\000\000\000\129\004\
\226\000\199\000\000\000\000\000\246\000\000\000\000\000\000\000\
\010\001\212\255\000\000\250\000\000\000\000\000\136\005\000\000\
\000\000\000\000\092\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\236\000\238\000\014\001\000\000\077\255\
\016\255\077\255\089\255\242\000\009\001\000\000\129\004\000\000\
\000\000\000\000\000\000\000\000\000\000\237\000\243\000\021\006\
\209\254\071\000\000\000\000\000\071\000\000\000\005\001\000\000\
\000\000\200\000\225\000\000\000\000\000\129\004\026\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\055\002\060\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\108\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\001\000\000\040\001\000\000\000\000\000\000\000\000\
\000\000\000\000\087\003\182\001\013\001\000\000\002\000\004\000\
\000\000\000\000\000\000\087\003\000\000\000\000\001\002\000\000\
\103\003\084\003\000\000\000\000\120\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\002\000\000\000\000\
\056\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\001\057\001\000\000\000\000\000\000\000\000\060\001\
\000\000\000\000\000\000\000\000\000\000\005\002\000\000\000\000\
\057\001\000\000\000\000\093\001\000\000\000\000\000\000\000\000\
\000\000\185\255\060\001\000\000\000\000\000\000\087\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\001\000\000\037\001\038\001\
\000\000\012\000\000\000\000\000\058\001\000\000\000\000\000\000\
\203\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\002\225\002\024\001\
\103\001\000\000\252\002\040\001\000\000\000\000\000\000\000\000\
\087\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\069\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\001\000\000\
\000\000\068\001\000\000\000\000\000\000\000\000\000\000\052\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\255\000\000\000\000\000\000\
\000\000\000\000\049\255\000\000\000\000\000\000\000\000\077\001\
\000\000\055\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\001\000\000\005\255\000\000\
\060\000\072\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\001\
\000\000\000\000\000\000\000\000\000\255\000\000\059\001\000\000\
\020\255\000\000\061\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\129\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\164\000\000\000\164\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\255\164\000\000\000\000\000\164\000\000\000\000\000\000\000\
\000\000\000\000\247\254\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\108\002\110\002\107\002\180\255\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\126\001\000\000\000\000\000\000\228\255\
\142\255\047\001\000\000\000\000\000\000\251\255\053\001\000\000\
\002\001\107\004\054\001\000\000\006\001\221\000\000\000\000\000\
\082\001\000\000\000\000\032\001\000\000\057\255\006\000\178\000\
\000\000\000\000\008\000\114\001\175\001\210\255\000\000\214\255\
\000\000\115\001\231\255\000\000\012\002\141\255\000\000\000\000\
\000\000\079\000\083\000\000\000\028\255\000\000\163\001\000\000\
\000\000\000\000\000\000\000\000\236\001\000\000\000\000"

let yytablesize = 1989
let yytable = "\044\000\
\202\000\068\000\072\000\069\000\204\000\131\000\107\000\040\001\
\172\000\110\000\048\000\192\000\035\001\189\000\019\000\035\000\
\079\000\105\001\037\000\093\000\133\000\123\000\010\000\061\000\
\012\001\019\000\101\000\123\000\037\000\108\000\112\000\005\001\
\157\000\170\000\193\000\018\001\019\000\128\000\046\000\019\001\
\044\000\189\000\170\000\124\000\170\000\189\000\189\000\037\000\
\006\001\124\000\106\001\158\000\061\000\127\000\195\000\125\000\
\044\000\126\000\013\000\176\000\108\001\125\000\016\000\085\001\
\109\001\061\001\110\000\046\000\138\001\110\001\113\001\120\001\
\111\000\202\000\037\000\093\001\024\000\107\000\129\000\044\000\
\123\000\044\000\177\000\129\000\112\000\112\000\114\001\159\000\
\182\000\183\000\048\000\123\000\175\000\133\000\007\001\123\000\
\037\000\035\000\212\000\112\000\177\000\217\000\124\000\009\001\
\190\000\020\000\220\000\139\000\037\000\036\000\177\000\123\000\
\103\000\124\000\125\000\125\001\170\000\124\000\107\001\194\000\
\036\000\123\000\196\000\044\000\177\000\125\000\219\000\024\000\
\037\000\125\000\092\000\038\000\128\000\124\000\110\000\093\000\
\216\000\123\000\039\000\025\000\111\000\141\001\154\000\124\000\
\155\000\125\000\028\000\062\000\024\000\011\001\029\000\030\000\
\031\000\189\000\146\001\125\000\033\000\034\000\051\000\124\000\
\080\000\021\001\044\001\091\000\084\000\085\000\024\001\027\001\
\026\001\236\000\036\001\125\000\177\000\024\000\103\000\081\000\
\062\000\151\001\184\000\037\000\090\000\237\000\038\000\177\000\
\177\000\128\000\023\001\051\000\023\001\039\000\177\000\086\000\
\028\001\103\000\160\000\041\000\083\000\199\000\133\001\104\001\
\037\000\053\000\118\000\038\000\020\000\218\000\112\000\120\000\
\088\000\053\000\039\000\062\001\219\000\223\000\224\000\225\000\
\226\000\227\000\228\000\229\000\230\000\231\000\232\000\233\000\
\234\000\037\000\077\001\089\000\038\000\058\001\044\000\090\000\
\161\000\044\000\191\000\039\000\089\001\162\000\025\000\091\000\
\064\001\065\001\090\001\202\000\048\000\028\000\121\000\094\000\
\055\001\029\000\030\000\031\000\177\000\122\000\163\000\033\000\
\034\000\092\000\044\000\062\000\063\000\024\000\130\001\177\000\
\177\000\066\001\067\001\110\000\131\001\060\001\044\000\095\000\
\010\000\121\000\064\000\219\000\096\000\121\000\037\000\143\000\
\122\000\038\000\097\000\072\000\122\000\037\000\100\000\023\001\
\039\000\037\000\068\000\072\000\069\000\037\001\041\000\037\000\
\037\000\107\000\044\000\116\000\110\000\037\000\037\000\037\000\
\213\000\215\000\016\000\065\000\037\000\037\000\180\000\181\000\
\115\000\037\000\130\000\056\000\038\000\037\000\033\000\037\000\
\108\000\132\000\128\000\039\000\037\000\188\000\037\000\129\000\
\068\000\072\000\069\000\133\000\037\000\037\000\139\001\147\000\
\142\001\153\000\044\000\156\000\170\000\037\000\024\000\037\000\
\013\000\169\000\066\000\171\000\037\000\187\000\174\000\148\001\
\072\000\177\000\149\001\037\000\037\000\037\000\142\000\037\000\
\197\000\037\000\198\000\147\001\139\000\072\000\033\000\203\000\
\139\000\205\000\033\000\238\000\240\000\033\000\139\000\139\000\
\037\000\044\000\037\000\037\000\033\000\037\000\139\000\222\000\
\241\000\239\000\177\000\139\000\139\000\037\000\242\000\037\000\
\093\000\037\000\037\000\037\000\139\000\038\000\139\000\243\000\
\044\000\245\000\093\000\139\000\039\000\139\000\244\000\246\000\
\247\000\249\000\253\000\139\000\139\000\002\001\250\000\093\000\
\093\000\004\001\033\000\013\001\091\000\033\000\139\000\014\001\
\093\000\017\001\093\000\015\001\033\000\016\001\091\000\020\001\
\022\001\093\000\139\000\139\000\139\000\118\000\139\000\025\001\
\139\000\029\001\034\001\091\000\091\000\030\001\200\000\033\001\
\120\000\125\000\093\000\039\001\091\000\047\001\091\000\139\000\
\041\001\139\000\139\000\118\000\139\000\091\000\093\000\118\000\
\048\001\049\001\051\001\054\001\139\000\118\000\139\000\135\000\
\139\000\056\001\139\000\057\001\059\001\138\000\091\000\136\000\
\137\000\189\000\118\000\118\000\072\001\093\000\093\000\191\000\
\074\001\075\001\091\000\118\000\076\001\118\000\086\001\087\001\
\093\000\088\001\138\000\091\001\118\000\092\001\094\001\138\000\
\139\000\096\001\138\000\138\000\140\000\095\001\098\001\097\001\
\099\000\091\000\091\000\103\001\155\000\118\000\111\001\112\001\
\115\001\118\001\121\001\122\001\091\000\124\001\091\000\123\001\
\091\000\118\000\138\000\138\000\126\001\138\000\128\001\138\000\
\143\000\127\001\129\001\134\001\143\000\135\001\136\001\155\000\
\145\001\138\001\143\000\143\000\143\001\141\000\118\000\141\001\
\118\000\118\000\143\000\138\000\120\001\142\000\143\000\143\000\
\143\000\152\001\150\001\118\000\155\000\118\000\006\000\138\000\
\143\000\138\000\143\000\001\000\155\000\155\000\152\000\143\000\
\052\000\143\000\002\000\019\000\156\000\144\000\145\000\143\000\
\143\000\052\000\146\000\001\000\002\000\003\000\004\000\005\000\
\006\000\007\000\143\000\152\000\155\000\155\000\021\000\178\000\
\179\000\155\000\027\000\022\000\187\000\118\000\143\000\143\000\
\143\000\118\000\143\000\057\000\143\000\031\000\047\000\142\000\
\029\000\188\000\043\000\142\000\048\000\011\000\017\000\138\000\
\014\000\142\000\142\000\143\000\050\001\143\000\143\000\154\000\
\143\000\142\000\119\001\140\001\116\001\117\001\142\000\142\000\
\143\000\144\001\143\000\132\001\138\000\071\001\143\000\142\000\
\038\001\142\000\102\001\073\001\138\000\138\000\142\000\221\000\
\142\000\046\001\133\000\252\000\000\000\000\000\142\000\142\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\142\000\000\000\000\000\138\000\138\000\000\000\138\000\
\000\000\138\000\000\000\000\000\000\000\142\000\142\000\142\000\
\000\000\142\000\000\000\142\000\000\000\000\000\118\000\000\000\
\118\000\000\000\118\000\000\000\000\000\138\000\000\000\000\000\
\118\000\000\000\142\000\000\000\142\000\142\000\000\000\142\000\
\138\000\138\000\000\000\138\000\000\000\118\000\118\000\142\000\
\000\000\142\000\000\000\000\000\000\000\142\000\118\000\000\000\
\118\000\000\000\000\000\000\000\000\000\138\000\000\000\118\000\
\134\000\000\000\000\000\000\000\000\000\138\000\138\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\118\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\135\000\118\000\138\000\138\000\000\000\
\138\000\099\000\138\000\000\000\000\000\155\000\000\000\000\000\
\000\000\155\000\000\000\099\000\000\000\000\000\000\000\155\000\
\155\000\000\000\000\000\118\000\118\000\000\000\138\000\155\000\
\099\000\099\000\000\000\000\000\155\000\155\000\118\000\000\000\
\118\000\099\000\138\000\099\000\138\000\155\000\000\000\155\000\
\000\000\000\000\099\000\000\000\155\000\000\000\155\000\000\000\
\000\000\000\000\000\000\000\000\155\000\155\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\000\000\155\000\
\000\000\000\000\000\000\000\000\000\000\156\000\000\000\099\000\
\000\000\156\000\000\000\155\000\155\000\155\000\000\000\156\000\
\156\000\155\000\000\000\112\000\000\000\000\000\029\000\156\000\
\000\000\000\000\000\000\000\000\156\000\156\000\099\000\099\000\
\155\000\000\000\155\000\155\000\000\000\156\000\091\000\156\000\
\000\000\099\000\000\000\099\000\156\000\155\000\156\000\155\000\
\000\000\000\000\000\000\000\000\156\000\156\000\000\000\000\000\
\154\000\000\000\000\000\000\000\154\000\000\000\000\000\156\000\
\000\000\000\000\154\000\154\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\156\000\156\000\156\000\000\000\154\000\
\154\000\156\000\000\000\133\000\000\000\000\000\000\000\133\000\
\154\000\000\000\154\000\000\000\000\000\133\000\000\000\154\000\
\156\000\154\000\156\000\156\000\000\000\000\000\000\000\154\000\
\154\000\000\000\133\000\133\000\000\000\156\000\000\000\156\000\
\000\000\000\000\154\000\133\000\000\000\133\000\000\000\000\000\
\000\000\000\000\133\000\000\000\133\000\000\000\154\000\154\000\
\154\000\000\000\133\000\133\000\154\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\133\000\000\000\000\000\
\000\000\000\000\000\000\154\000\000\000\154\000\154\000\000\000\
\000\000\133\000\133\000\133\000\000\000\000\000\000\000\133\000\
\154\000\134\000\154\000\000\000\000\000\134\000\000\000\000\000\
\000\000\000\000\000\000\134\000\000\000\000\000\133\000\000\000\
\133\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\
\134\000\134\000\000\000\133\000\135\000\133\000\000\000\000\000\
\135\000\134\000\000\000\134\000\000\000\000\000\135\000\000\000\
\134\000\000\000\134\000\000\000\000\000\000\000\000\000\000\000\
\134\000\134\000\000\000\135\000\135\000\000\000\000\000\000\000\
\000\000\000\000\000\000\134\000\135\000\000\000\135\000\000\000\
\000\000\000\000\000\000\135\000\000\000\135\000\000\000\134\000\
\134\000\134\000\000\000\135\000\135\000\134\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\135\000\000\000\
\000\000\000\000\000\000\000\000\134\000\000\000\134\000\134\000\
\000\000\000\000\135\000\135\000\135\000\000\000\000\000\000\000\
\135\000\134\000\000\000\134\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\112\000\000\000\000\000\135\000\
\112\000\135\000\135\000\000\000\000\000\000\000\112\000\000\000\
\000\000\029\000\000\000\000\000\135\000\000\000\135\000\091\000\
\000\000\000\000\000\000\112\000\112\000\000\000\029\000\029\000\
\000\000\091\000\000\000\000\000\112\000\000\000\112\000\029\000\
\000\000\029\000\000\000\000\000\000\000\112\000\091\000\091\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\091\000\
\099\000\091\000\000\000\000\000\102\000\000\000\112\000\000\000\
\091\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\112\000\000\000\000\000\029\000\000\000\000\000\
\000\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\112\000\
\000\000\112\000\112\000\000\000\029\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\112\000\000\000\112\000\029\000\
\000\000\029\000\091\000\179\000\091\000\091\000\000\000\000\000\
\000\000\000\000\102\000\185\000\000\000\000\000\186\000\091\000\
\000\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\206\000\207\000\208\000\209\000\210\000\
\211\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\102\000\102\000\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\235\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\148\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\043\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\021\000\000\000\022\000\000\000\023\000\000\000\000\000\
\000\000\024\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\026\000\
\027\000\000\000\000\000\000\000\028\000\020\000\000\000\000\000\
\029\000\030\000\031\000\000\000\000\000\032\000\033\000\034\000\
\000\000\035\000\000\000\021\000\000\000\022\000\000\000\023\000\
\000\000\000\000\000\000\024\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\025\000\
\038\000\026\000\027\000\000\000\000\000\000\000\028\000\039\000\
\000\000\040\000\029\000\030\000\031\000\041\000\063\001\032\000\
\033\000\034\000\000\000\035\000\068\001\069\001\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\081\001\000\000\000\000\037\000\
\000\000\000\000\038\000\000\000\148\000\000\000\000\000\000\000\
\000\000\039\000\000\000\040\000\000\000\020\000\000\000\041\000\
\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\021\000\000\000\022\000\000\000\023\000\
\000\000\000\000\081\001\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\026\000\027\000\000\000\000\000\000\000\028\000\020\000\
\000\000\000\000\029\000\030\000\031\000\000\000\000\000\032\000\
\033\000\034\000\000\000\035\000\000\000\021\000\000\000\022\000\
\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\137\001\176\000\081\001\000\000\000\000\037\000\
\000\000\025\000\038\000\026\000\027\000\000\000\000\000\000\000\
\028\000\039\000\000\000\040\000\029\000\030\000\031\000\041\000\
\000\000\032\000\033\000\034\000\000\000\035\000\000\000\000\000\
\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\176\000\000\000\
\176\000\037\000\176\000\000\000\038\000\000\000\176\000\000\000\
\000\000\010\001\000\000\039\000\000\000\040\000\000\000\000\000\
\000\000\041\000\176\000\000\000\176\000\176\000\000\000\000\000\
\000\000\176\000\020\000\000\000\000\000\176\000\176\000\176\000\
\000\000\000\000\176\000\176\000\176\000\000\000\176\000\000\000\
\021\000\000\000\022\000\000\000\023\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\176\000\000\000\025\000\176\000\026\000\027\000\
\000\000\000\000\000\000\028\000\176\000\000\000\176\000\029\000\
\030\000\031\000\176\000\000\000\032\000\033\000\034\000\000\000\
\106\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\022\000\037\000\023\000\000\000\038\000\
\000\000\024\000\000\000\000\000\000\000\000\000\039\000\000\000\
\040\000\000\000\000\000\000\000\041\000\025\000\000\000\026\000\
\027\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\029\000\030\000\031\000\000\000\000\000\032\000\033\000\034\000\
\000\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\200\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\038\000\000\000\021\000\000\000\022\000\000\000\023\000\039\000\
\000\000\040\000\024\000\000\000\000\000\041\000\000\000\000\000\
\201\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\026\000\027\000\000\000\000\000\000\000\028\000\020\000\000\000\
\000\000\029\000\030\000\031\000\000\000\000\000\032\000\033\000\
\034\000\000\000\106\000\000\000\105\000\000\000\022\000\000\000\
\023\000\000\000\000\000\000\000\024\000\000\000\200\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\025\000\038\000\026\000\027\000\000\000\000\000\000\000\028\000\
\039\000\000\000\040\000\029\000\030\000\031\000\041\000\000\000\
\032\000\033\000\034\000\000\000\106\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\022\000\
\037\000\023\000\000\000\038\000\000\000\024\000\000\000\000\000\
\000\000\000\000\039\000\000\000\040\000\000\000\000\000\000\000\
\041\000\025\000\000\000\026\000\027\000\000\000\000\000\000\000\
\028\000\020\000\000\000\000\000\029\000\030\000\031\000\000\000\
\000\000\032\000\033\000\034\000\000\000\035\000\000\000\021\000\
\000\000\022\000\000\000\023\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\000\000\025\000\038\000\026\000\027\000\000\000\
\000\000\000\000\028\000\039\000\000\000\040\000\029\000\030\000\
\031\000\041\000\000\000\032\000\033\000\034\000\000\000\106\000\
\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\000\000\022\000\037\000\023\000\000\000\038\000\000\000\
\024\000\000\000\000\000\000\000\000\000\039\000\000\000\040\000\
\000\000\000\000\000\000\041\000\025\000\000\000\026\000\027\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\029\000\
\030\000\031\000\000\000\000\000\032\000\033\000\034\000\000\000\
\070\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\040\000\000\000\000\000\000\000\041\000"

let yycheck = "\005\000\
\116\000\000\000\000\000\000\000\119\000\052\000\035\000\236\000\
\085\000\035\000\005\000\001\001\212\000\001\001\011\001\025\001\
\007\000\033\001\019\001\025\000\005\001\075\001\026\001\019\001\
\019\001\011\001\032\000\075\001\000\000\035\000\036\000\042\001\
\032\001\024\001\024\001\019\001\011\001\094\001\019\001\019\001\
\046\000\001\001\033\001\097\001\035\001\001\001\001\001\048\001\
\059\001\097\001\107\001\051\001\048\001\046\000\024\001\109\001\
\062\000\111\001\098\001\088\000\024\001\109\001\060\001\025\001\
\024\001\009\001\024\001\048\001\053\001\024\001\024\001\040\001\
\024\001\189\000\075\001\048\001\051\001\106\000\094\001\085\000\
\075\001\087\000\088\000\094\001\090\000\091\000\024\001\078\000\
\094\000\095\000\085\000\075\001\087\000\005\001\105\001\075\001\
\097\001\107\001\095\001\105\000\106\000\130\000\097\001\059\001\
\092\001\029\001\132\000\000\000\109\001\095\001\116\000\075\001\
\034\000\097\001\109\001\088\001\107\001\097\001\062\001\109\001\
\095\001\075\001\092\001\129\000\130\000\109\001\132\000\051\001\
\103\001\109\001\099\001\106\001\094\001\097\001\092\001\000\000\
\129\000\075\001\113\001\063\001\092\001\053\001\082\001\097\001\
\084\001\109\001\070\001\019\001\051\001\178\000\074\001\075\001\
\076\001\001\001\127\001\109\001\080\001\081\001\019\001\097\001\
\051\001\190\000\239\000\000\000\040\001\041\001\192\000\196\000\
\194\000\083\001\217\000\109\001\178\000\051\001\096\000\081\001\
\048\001\150\001\096\000\103\001\083\001\095\001\106\001\189\000\
\190\000\094\001\192\000\048\001\194\000\113\001\196\000\034\001\
\198\000\115\000\008\001\119\001\051\001\115\000\107\001\058\001\
\103\001\017\001\000\000\106\001\029\001\083\001\212\000\018\001\
\081\001\025\001\113\001\059\001\218\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\103\001\051\001\083\001\106\001\002\001\236\000\083\001\
\046\001\239\000\018\001\113\001\019\001\051\001\063\001\083\001\
\013\001\014\001\025\001\103\001\239\000\070\001\057\001\083\001\
\254\000\074\001\075\001\076\001\002\001\064\001\068\001\080\001\
\081\001\099\001\008\001\013\001\014\001\051\001\051\001\013\001\
\014\001\015\001\016\001\037\001\057\001\008\001\020\001\083\001\
\026\001\057\001\028\001\025\001\083\001\057\001\103\001\000\000\
\064\001\106\001\083\001\025\001\064\001\001\001\083\001\037\001\
\113\001\005\001\033\001\033\001\033\001\083\001\119\001\011\001\
\012\001\070\001\048\001\001\001\070\001\017\001\018\001\019\001\
\127\000\128\000\060\001\061\001\024\001\025\001\090\000\091\000\
\083\001\103\001\001\001\048\001\106\001\033\001\051\001\035\001\
\070\001\109\001\094\001\113\001\040\001\105\000\042\001\094\001\
\071\001\071\001\071\001\005\001\048\001\049\001\121\001\019\001\
\123\001\032\001\088\001\032\001\072\001\057\001\051\001\059\001\
\098\001\033\001\100\001\000\001\064\001\012\001\051\001\138\001\
\094\001\103\001\141\001\071\001\072\001\073\001\000\000\075\001\
\025\001\077\001\019\001\136\001\001\001\107\001\051\001\001\001\
\005\001\051\001\103\001\051\001\051\001\106\001\011\001\012\001\
\092\001\127\001\094\001\095\001\113\001\097\001\019\001\034\001\
\051\001\035\001\136\001\024\001\025\001\105\001\051\001\107\001\
\001\001\109\001\103\001\111\001\033\001\106\001\035\001\051\001\
\150\001\033\001\011\001\040\001\113\001\042\001\051\001\012\001\
\107\001\051\001\034\001\048\001\049\001\071\001\095\001\024\001\
\025\001\034\001\103\001\017\001\001\001\106\001\059\001\017\001\
\033\001\024\001\035\001\019\001\113\001\019\001\011\001\017\001\
\051\001\042\001\071\001\072\001\073\001\000\000\075\001\107\001\
\077\001\024\001\072\001\024\001\025\001\034\001\095\001\051\001\
\018\001\109\001\059\001\051\001\033\001\033\001\035\001\092\001\
\051\001\094\001\095\001\001\001\097\001\042\001\071\001\005\001\
\040\001\033\001\019\001\051\001\105\001\011\001\107\001\040\001\
\109\001\048\001\111\001\019\001\033\001\019\001\059\001\048\001\
\049\001\001\001\024\001\025\001\072\001\094\001\095\001\018\001\
\051\001\025\001\071\001\033\001\107\001\035\001\024\001\034\001\
\105\001\107\001\040\001\051\001\042\001\033\001\051\001\072\001\
\073\001\019\001\048\001\049\001\077\001\025\001\005\001\034\001\
\000\000\094\001\095\001\001\001\000\000\059\001\024\001\024\001\
\024\001\034\001\048\001\019\001\105\001\019\001\107\001\048\001\
\109\001\071\001\072\001\073\001\051\001\075\001\033\001\077\001\
\001\001\083\001\017\001\048\001\005\001\048\001\017\001\019\001\
\024\001\053\001\011\001\012\001\051\001\040\001\092\001\053\001\
\094\001\095\001\019\001\097\001\040\001\048\001\049\001\024\001\
\025\001\024\001\107\001\105\001\040\001\107\001\000\000\109\001\
\033\001\111\001\035\001\000\000\048\001\049\001\012\001\040\001\
\025\001\042\001\000\000\012\001\000\000\072\001\073\001\048\001\
\049\001\017\001\077\001\001\000\002\000\003\000\004\000\005\000\
\006\000\007\000\059\001\024\001\072\001\073\001\012\001\051\001\
\051\001\077\001\033\001\012\001\025\001\001\001\071\001\072\001\
\073\001\005\001\075\001\048\001\077\001\025\001\048\001\001\001\
\033\001\025\001\048\001\005\001\048\001\002\000\004\000\019\001\
\003\000\011\001\012\001\092\001\247\000\094\001\095\001\000\000\
\097\001\019\001\076\001\122\001\072\001\072\001\024\001\025\001\
\105\001\124\001\107\001\100\001\040\001\020\001\111\001\033\001\
\218\000\035\001\057\001\025\001\048\001\049\001\040\001\132\000\
\042\001\239\000\000\000\168\000\255\255\255\255\048\001\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\255\255\072\001\073\001\255\255\075\001\
\255\255\077\001\255\255\255\255\255\255\071\001\072\001\073\001\
\255\255\075\001\255\255\077\001\255\255\255\255\001\001\255\255\
\092\001\255\255\005\001\255\255\255\255\097\001\255\255\255\255\
\011\001\255\255\092\001\255\255\094\001\095\001\255\255\097\001\
\019\001\109\001\255\255\111\001\255\255\024\001\025\001\105\001\
\255\255\107\001\255\255\255\255\255\255\111\001\033\001\255\255\
\035\001\255\255\255\255\255\255\255\255\040\001\255\255\042\001\
\000\000\255\255\255\255\255\255\255\255\048\001\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\071\001\072\001\073\001\255\255\
\075\001\001\001\077\001\255\255\255\255\001\001\255\255\255\255\
\255\255\005\001\255\255\011\001\255\255\255\255\255\255\011\001\
\012\001\255\255\255\255\094\001\095\001\255\255\097\001\019\001\
\024\001\025\001\255\255\255\255\024\001\025\001\105\001\255\255\
\107\001\033\001\109\001\035\001\111\001\033\001\255\255\035\001\
\255\255\255\255\042\001\255\255\040\001\255\255\042\001\255\255\
\255\255\255\255\255\255\255\255\048\001\049\001\255\255\255\255\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\071\001\
\255\255\005\001\255\255\071\001\072\001\073\001\255\255\011\001\
\012\001\077\001\255\255\000\000\255\255\255\255\000\000\019\001\
\255\255\255\255\255\255\255\255\024\001\025\001\094\001\095\001\
\092\001\255\255\094\001\095\001\255\255\033\001\000\000\035\001\
\255\255\105\001\255\255\107\001\040\001\105\001\042\001\107\001\
\255\255\255\255\255\255\255\255\048\001\049\001\255\255\255\255\
\001\001\255\255\255\255\255\255\005\001\255\255\255\255\059\001\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\071\001\072\001\073\001\255\255\024\001\
\025\001\077\001\255\255\001\001\255\255\255\255\255\255\005\001\
\033\001\255\255\035\001\255\255\255\255\011\001\255\255\040\001\
\092\001\042\001\094\001\095\001\255\255\255\255\255\255\048\001\
\049\001\255\255\024\001\025\001\255\255\105\001\255\255\107\001\
\255\255\255\255\059\001\033\001\255\255\035\001\255\255\255\255\
\255\255\255\255\040\001\255\255\042\001\255\255\071\001\072\001\
\073\001\255\255\048\001\049\001\077\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\092\001\255\255\094\001\095\001\255\255\
\255\255\071\001\072\001\073\001\255\255\255\255\255\255\077\001\
\105\001\001\001\107\001\255\255\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\092\001\255\255\
\094\001\095\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\255\255\105\001\001\001\107\001\255\255\255\255\
\005\001\033\001\255\255\035\001\255\255\255\255\011\001\255\255\
\040\001\255\255\042\001\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\255\255\024\001\025\001\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\033\001\255\255\035\001\255\255\
\255\255\255\255\255\255\040\001\255\255\042\001\255\255\071\001\
\072\001\073\001\255\255\048\001\049\001\077\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\092\001\255\255\094\001\095\001\
\255\255\255\255\071\001\072\001\073\001\255\255\255\255\255\255\
\077\001\105\001\255\255\107\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\255\255\092\001\
\005\001\094\001\095\001\255\255\255\255\255\255\011\001\255\255\
\255\255\011\001\255\255\255\255\105\001\255\255\107\001\001\001\
\255\255\255\255\255\255\024\001\025\001\255\255\024\001\025\001\
\255\255\011\001\255\255\255\255\033\001\255\255\035\001\033\001\
\255\255\035\001\255\255\255\255\255\255\042\001\024\001\025\001\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\030\000\035\001\255\255\255\255\034\000\255\255\059\001\255\255\
\042\001\059\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\071\001\255\255\255\255\071\001\255\255\255\255\
\255\255\059\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\071\001\255\255\092\001\
\255\255\094\001\095\001\255\255\094\001\095\001\255\255\255\255\
\255\255\255\255\255\255\255\255\105\001\255\255\107\001\105\001\
\255\255\107\001\092\001\089\000\094\001\095\001\255\255\255\255\
\255\255\255\255\096\000\097\000\255\255\255\255\100\000\105\001\
\255\255\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\115\000\255\255\255\255\
\255\255\255\255\255\255\121\000\122\000\123\000\124\000\125\000\
\126\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\135\000\136\000\137\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\000\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\043\001\255\255\045\001\255\255\047\001\255\255\255\255\
\255\255\051\001\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\063\001\255\255\065\001\
\066\001\255\255\255\255\255\255\070\001\029\001\255\255\255\255\
\074\001\075\001\076\001\255\255\255\255\079\001\080\001\081\001\
\255\255\083\001\255\255\043\001\255\255\045\001\255\255\047\001\
\255\255\255\255\255\255\051\001\255\255\095\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\103\001\255\255\063\001\
\106\001\065\001\066\001\255\255\255\255\255\255\070\001\113\001\
\255\255\115\001\074\001\075\001\076\001\119\001\012\001\079\001\
\080\001\081\001\255\255\083\001\018\001\019\001\255\255\255\255\
\000\001\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\034\001\255\255\255\255\103\001\
\255\255\255\255\106\001\255\255\020\001\255\255\255\255\255\255\
\255\255\113\001\255\255\115\001\255\255\029\001\255\255\119\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\001\043\001\255\255\045\001\255\255\047\001\
\255\255\255\255\072\001\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\063\001\
\255\255\065\001\066\001\255\255\255\255\255\255\070\001\029\001\
\255\255\255\255\074\001\075\001\076\001\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\255\255\043\001\255\255\045\001\
\255\255\047\001\255\255\255\255\255\255\051\001\255\255\255\255\
\255\255\255\255\120\001\000\001\122\001\255\255\255\255\103\001\
\255\255\063\001\106\001\065\001\066\001\255\255\255\255\255\255\
\070\001\113\001\255\255\115\001\074\001\075\001\076\001\119\001\
\255\255\079\001\080\001\081\001\255\255\083\001\255\255\255\255\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\045\001\103\001\047\001\255\255\106\001\255\255\051\001\255\255\
\255\255\012\001\255\255\113\001\255\255\115\001\255\255\255\255\
\255\255\119\001\063\001\255\255\065\001\066\001\255\255\255\255\
\255\255\070\001\029\001\255\255\255\255\074\001\075\001\076\001\
\255\255\255\255\079\001\080\001\081\001\255\255\083\001\255\255\
\043\001\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\103\001\255\255\063\001\106\001\065\001\066\001\
\255\255\255\255\255\255\070\001\113\001\255\255\115\001\074\001\
\075\001\076\001\119\001\255\255\079\001\080\001\081\001\255\255\
\083\001\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\255\255\045\001\103\001\047\001\255\255\106\001\
\255\255\051\001\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\255\255\255\255\255\255\119\001\063\001\255\255\065\001\
\066\001\255\255\255\255\255\255\070\001\255\255\255\255\255\255\
\074\001\075\001\076\001\255\255\255\255\079\001\080\001\081\001\
\255\255\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\095\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\103\001\255\255\255\255\
\106\001\255\255\043\001\255\255\045\001\255\255\047\001\113\001\
\255\255\115\001\051\001\255\255\255\255\119\001\255\255\255\255\
\122\001\255\255\255\255\255\255\255\255\255\255\063\001\255\255\
\065\001\066\001\255\255\255\255\255\255\070\001\029\001\255\255\
\255\255\074\001\075\001\076\001\255\255\255\255\079\001\080\001\
\081\001\255\255\083\001\255\255\043\001\255\255\045\001\255\255\
\047\001\255\255\255\255\255\255\051\001\255\255\095\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\103\001\255\255\
\063\001\106\001\065\001\066\001\255\255\255\255\255\255\070\001\
\113\001\255\255\115\001\074\001\075\001\076\001\119\001\255\255\
\079\001\080\001\081\001\255\255\083\001\255\255\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\255\255\045\001\
\103\001\047\001\255\255\106\001\255\255\051\001\255\255\255\255\
\255\255\255\255\113\001\255\255\115\001\255\255\255\255\255\255\
\119\001\063\001\255\255\065\001\066\001\255\255\255\255\255\255\
\070\001\029\001\255\255\255\255\074\001\075\001\076\001\255\255\
\255\255\079\001\080\001\081\001\255\255\083\001\255\255\043\001\
\255\255\045\001\255\255\047\001\255\255\255\255\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\103\001\255\255\063\001\106\001\065\001\066\001\255\255\
\255\255\255\255\070\001\113\001\255\255\115\001\074\001\075\001\
\076\001\119\001\255\255\079\001\080\001\081\001\255\255\083\001\
\255\255\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\255\255\045\001\103\001\047\001\255\255\106\001\255\255\
\051\001\255\255\255\255\255\255\255\255\113\001\255\255\115\001\
\255\255\255\255\255\255\119\001\063\001\255\255\065\001\066\001\
\255\255\255\255\255\255\070\001\255\255\255\255\255\255\074\001\
\075\001\076\001\255\255\255\255\079\001\080\001\081\001\255\255\
\083\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\103\001\255\255\255\255\106\001\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\255\255\255\255\255\255\119\001"

let yynames_const = "\
  AND\000\
  ANDAND\000\
  ASSERT\000\
  ASSUME\000\
  AT\000\
  ATT\000\
  BIND\000\
  BOOL\000\
  BREAK\000\
  BY\000\
  CASE\000\
  CBRACE\000\
  CHECKENTAIL\000\
  CAPTURERESIDUE\000\
  CLASS\000\
  COERCION\000\
  COLON\000\
  COLONCOLON\000\
  COMMA\000\
  COMPOSE\000\
  CONSEQ\000\
  CONST\000\
  CONTINUE\000\
  CPAREN\000\
  CSQUARE\000\
  DATA\000\
  DDEBUG\000\
  DTIME\000\
  DIFF\000\
  DISTR\000\
  DIV\000\
  DOLLAR\000\
  DOT\000\
  DOUBLEQUOTE\000\
  DERIVE\000\
  DYNAMIC\000\
  ELSE\000\
  ENSURES\000\
  ENUM\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EQUIV\000\
  EXISTS\000\
  EXTENDS\000\
  FALSE\000\
  FLOAT\000\
  FORALL\000\
  GT\000\
  GTE\000\
  HASH\000\
  IF\000\
  IMM\000\
  IMPLIES\000\
  IMPLY\000\
  IMPORT\000\
  IN\000\
  LEFTARROW\000\
  LEMMA\000\
  LET\000\
  NOTIN\000\
  BAGMAX\000\
  BAGMIN\000\
  FOLD\000\
  INT\000\
  INTERR\000\
  INTERSECT\000\
  INV\000\
  LT\000\
  LTE\000\
  MAX\000\
  MINUS\000\
  MIN\000\
  NEQ\000\
  NEW\000\
  NOT\000\
  NULL\000\
  OBRACE\000\
  OFF\000\
  OPAREN\000\
  ON\000\
  OP_ADD_ASSIGN\000\
  OP_DEC\000\
  OP_DIV_ASSIGN\000\
  OP_INC\000\
  OP_MOD_ASSIGN\000\
  OP_MULT_ASSIGN\000\
  OP_SUB_ASSIGN\000\
  OR\000\
  OROR\000\
  ORWORD\000\
  OSQUARE\000\
  PERCENT\000\
  PLUS\000\
  PRED\000\
  PRIME\000\
  PRINT\000\
  REF\000\
  REQUIRES\000\
  RETURN\000\
  RIGHTARROW\000\
  SEMICOLON\000\
  SPLIT\000\
  STAR\000\
  STATIC\000\
  SUBSET\000\
  THEN\000\
  TO\000\
  TRUE\000\
  VIEW\000\
  VOID\000\
  UNFOLD\000\
  UNION\000\
  WHERE\000\
  WHILE\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  JAVA\000\
  LITERAL_FLOAT\000\
  LITERAL_INTEGER\000\
  RES\000\
  SELF\000\
  THIS\000\
  FLOW\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "sparser.mly"
   ([])
# 1209 "sparser.ml"
               : Sleekcommons.command list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'command_list) in
    Obj.repr(
# 234 "sparser.mly"
                (List.rev _1)
# 1216 "sparser.ml"
               : Sleekcommons.command list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 238 "sparser.mly"
                      ( [_1] )
# 1223 "sparser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 239 "sparser.mly"
                                   ( _2 :: _1 )
# 1231 "sparser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_command) in
    Obj.repr(
# 243 "sparser.mly"
                    (_1)
# 1238 "sparser.ml"
               : Sleekcommons.command))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "sparser.mly"
    ( EmptyCmd )
# 1244 "sparser.ml"
               : Sleekcommons.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.data_decl) in
    Obj.repr(
# 247 "sparser.mly"
              (
	DataDef _1
  )
# 1253 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.view_decl) in
    Obj.repr(
# 250 "sparser.mly"
              (
	  PredDef _1
	)
# 1262 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iast.coercion_decl) in
    Obj.repr(
# 253 "sparser.mly"
                  (
	  LemmaDef _1
	)
# 1271 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_decl) in
    Obj.repr(
# 256 "sparser.mly"
             (
	  _1
	)
# 1280 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'checkentail_cmd) in
    Obj.repr(
# 259 "sparser.mly"
                    (
	  EntailCheck _1
	)
# 1289 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'captureresidue_cmd) in
    Obj.repr(
# 262 "sparser.mly"
                       (
	  CaptureResidue _1
	)
# 1298 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'print_cmd) in
    Obj.repr(
# 265 "sparser.mly"
              (
	  PrintCmd _1
	)
# 1307 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'time_cmd) in
    Obj.repr(
# 268 "sparser.mly"
             (_1)
# 1314 "sparser.ml"
               : 'non_empty_command))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "sparser.mly"
          (
  { prog_data_decls = [];
	prog_global_var_decls = [];
	prog_enum_decls = [];
	prog_view_decls = [];
	prog_proc_decls = [];
	prog_coercion_decls = [];
    prog_hopred_decls = [];
  }
)
# 1329 "sparser.ml"
               : Iast.prog_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'data_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'data_body) in
    Obj.repr(
# 286 "sparser.mly"
                             (
	  { data_name = _1;
		data_fields = _2;
		data_parent_name = "Object";
		data_invs = []; (* F.mkTrue (get_pos 1); *)
		data_methods = [] }
	)
# 1343 "sparser.ml"
               : Iast.data_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 296 "sparser.mly"
                    ( _2 )
# 1350 "sparser.ml"
               : 'data_header))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_field_list) in
    Obj.repr(
# 300 "sparser.mly"
                                 ( _2 )
# 1357 "sparser.ml"
               : 'data_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "sparser.mly"
    ( [] )
# 1363 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semicolon) in
    Obj.repr(
# 305 "sparser.mly"
                             ( List.rev _1 )
# 1371 "sparser.ml"
               : 'opt_field_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 309 "sparser.mly"
    ()
# 1377 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    Obj.repr(
# 310 "sparser.mly"
              ()
# 1383 "sparser.ml"
               : 'opt_semicolon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 314 "sparser.mly"
                   ( [((_1, _2), get_pos 1)] )
# 1391 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 315 "sparser.mly"
                                        (
			if List.mem _4 (List.map (fun f -> snd (fst f)) _1) then
				report_error (get_pos 4) (_4 ^ " is duplicated")
			else
				((_3, _4), get_pos 3) :: _1
		)
# 1405 "sparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'view_header) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'view_body) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_inv) in
    Obj.repr(
# 326 "sparser.mly"
                                          (
	{ _1 with view_formula = (fst _3); view_invariant = _4; try_case_inference = (snd _3) }
  )
# 1416 "sparser.ml"
               : Iast.view_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'view_header) in
    Obj.repr(
# 329 "sparser.mly"
                         (
	  report_error (get_pos 2) ("use == to define a view")
	)
# 1425 "sparser.ml"
               : Iast.view_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 335 "sparser.mly"
    ( (P.mkTrue no_pos, []) )
# 1431 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 336 "sparser.mly"
                                 ( (_2, _3) )
# 1439 "sparser.ml"
               : 'opt_inv))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "sparser.mly"
    ( [] )
# 1445 "sparser.ml"
               : 'opt_branches))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'branches) in
    Obj.repr(
# 340 "sparser.mly"
                                 ( _3 )
# 1452 "sparser.ml"
               : 'opt_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'branch) in
    Obj.repr(
# 344 "sparser.mly"
           ([_1])
# 1459 "sparser.ml"
               : 'branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'branches) in
    Obj.repr(
# 345 "sparser.mly"
                              ( _1 :: _3 )
# 1467 "sparser.ml"
               : 'branches))
; (fun __caml_parser_env ->
    Obj.repr(
# 348 "sparser.mly"
    ( "" )
# 1473 "sparser.ml"
               : 'opt_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 349 "sparser.mly"
                                             ( _2 )
# 1480 "sparser.ml"
               : 'opt_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 352 "sparser.mly"
                                                         ( (_2, _5) )
# 1488 "sparser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_ann_cid_list) in
    Obj.repr(
# 357 "sparser.mly"
                                           (
	let cids, anns = List.split _4 in
    let cids, br_labels = List.split cids in
	  if List.exists 
		(fun x -> match snd x with | Primed -> true | Unprimed -> false) cids 
	  then
		report_error (get_pos 1) 
		  ("variables in view header are not allowed to be primed")
	  else
		let modes = get_modes anns in
		  { view_name = _2;
			view_data_name = "";
			view_vars = List.map fst cids;
            view_labels = br_labels;
			view_modes = modes;
			view_typed_vars = [];
			view_formula = F.mkETrue top_flow (get_pos 1);
			view_invariant = (P.mkTrue (get_pos 1), []);
			try_case_inference = false;
			}
  )
# 1516 "sparser.ml"
               : 'view_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 381 "sparser.mly"
               ( (_1, Unprimed) )
# 1523 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 382 "sparser.mly"
                     ( (_1, Primed) )
# 1530 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 383 "sparser.mly"
        ( (res, Unprimed) )
# 1537 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 384 "sparser.mly"
         ( (self, Unprimed) )
# 1544 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 385 "sparser.mly"
         ( (this, Unprimed) )
# 1551 "sparser.ml"
               : 'cid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iformula.struc_formula*bool) in
    Obj.repr(
# 389 "sparser.mly"
             ( ((F.subst_stub_flow_struc top_flow (fst _1)),(snd _1)) )
# 1558 "sparser.ml"
               : 'view_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list_aux) in
    Obj.repr(
# 402 "sparser.mly"
                      ( List.rev _1 )
# 1565 "sparser.ml"
               : 'heap_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 406 "sparser.mly"
             ( [_1] )
# 1572 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg) in
    Obj.repr(
# 407 "sparser.mly"
                                     ( _3 :: _1)
# 1580 "sparser.ml"
               : 'heap_arg_list_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 411 "sparser.mly"
         ( _1 (* including variables. to be resolved later *) )
# 1587 "sparser.ml"
               : 'heap_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "sparser.mly"
    ( [] )
# 1593 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg_list2) in
    Obj.repr(
# 416 "sparser.mly"
                   ( List.rev _1 )
# 1600 "sparser.ml"
               : 'opt_heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 420 "sparser.mly"
             ( [_1] )
# 1607 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'heap_arg2) in
    Obj.repr(
# 421 "sparser.mly"
                                  (
			if List.mem (fst _3) (List.map fst _1) then
				report_error (get_pos 3) ((fst _3) ^ " is duplicated")
			else
				_3 :: _1
		)
# 1620 "sparser.ml"
               : 'heap_arg_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 430 "sparser.mly"
                      ( (_1, _3) )
# 1628 "sparser.ml"
               : 'heap_arg2))
; (fun __caml_parser_env ->
    Obj.repr(
# 434 "sparser.mly"
    (
	[] : (ident * primed) list
  )
# 1636 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid_list) in
    Obj.repr(
# 437 "sparser.mly"
             (
	  List.rev _1 : (ident * primed) list
	)
# 1645 "sparser.ml"
               : 'opt_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 443 "sparser.mly"
        (
	([_1]) : (ident * primed) list
  )
# 1654 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 446 "sparser.mly"
                       (
	  if List.mem (fst _3) (List.map fst _1) then
		report_error (get_pos 3) ("identifier " ^ (fst _3) ^ " is duplicated")
	  else
		(_3 :: _1) : (ident * primed) list
	)
# 1667 "sparser.ml"
               : 'cid_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "sparser.mly"
    ( [] )
# 1673 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid_list) in
    Obj.repr(
# 458 "sparser.mly"
                 (
	  List.rev _1
	)
# 1682 "sparser.ml"
               : 'opt_ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 463 "sparser.mly"
            (
	[_1]
  )
# 1691 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ann_cid_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ann_cid) in
    Obj.repr(
# 466 "sparser.mly"
                               (
	  _3 :: _1
	)
# 1701 "sparser.ml"
               : 'ann_cid_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_branch) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ann_list) in
    Obj.repr(
# 472 "sparser.mly"
                                (
	((_2, _1), _3)
  )
# 1712 "sparser.ml"
               : 'ann_cid))
; (fun __caml_parser_env ->
    Obj.repr(
# 478 "sparser.mly"
    (
	[]
  )
# 1720 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann_list) in
    Obj.repr(
# 481 "sparser.mly"
             (
	  List.rev _1
	)
# 1729 "sparser.ml"
               : 'opt_ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 487 "sparser.mly"
        (
	[_1]
  )
# 1738 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ann_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ann) in
    Obj.repr(
# 490 "sparser.mly"
                 (
	  _2 :: _1
	)
# 1748 "sparser.ml"
               : 'ann_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 496 "sparser.mly"
          (
	AnnMode ModeIn
  )
# 1756 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 499 "sparser.mly"
                  (
	if _2 = "out" then AnnMode ModeOut
	else report_error (get_pos 2) ("unrecognized mode: " ^ _2)
  )
# 1766 "sparser.ml"
               : 'ann))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cid_list) in
    Obj.repr(
# 505 "sparser.mly"
                               (_2)
# 1773 "sparser.ml"
               : 'sq_clist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extended_constr) in
    Obj.repr(
# 509 "sparser.mly"
                  ((_1,false))
# 1780 "sparser.ml"
               : Iformula.struc_formula*bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 510 "sparser.mly"
                      (((Iformula.formula_to_struc_formula _1),true))
# 1787 "sparser.ml"
               : Iformula.struc_formula*bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 515 "sparser.mly"
            ([_1])
# 1794 "sparser.ml"
               : 'extended_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extended_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 516 "sparser.mly"
                                   (_3::_1)
# 1802 "sparser.ml"
               : 'extended_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 520 "sparser.mly"
   ([])
# 1808 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr) in
    Obj.repr(
# 521 "sparser.mly"
            ([_1])
# 1815 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 522 "sparser.mly"
                                   (_2)
# 1822 "sparser.ml"
               : 'r_constr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 527 "sparser.mly"
  (
			let _ = if(List.length (Ipure.look_for_anonymous_pure_formula _1))>0 then 
				report_error (get_pos 1) ("anonimous variables in case guard are disalowed")
				else true in 
			[(_1,_3)])
# 1834 "sparser.ml"
               : 'impl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'impl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pure_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'extended_constr) in
    Obj.repr(
# 532 "sparser.mly"
                                                             (((_2,_4)::_1))
# 1843 "sparser.ml"
               : 'impl_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'impl_list) in
    Obj.repr(
# 537 "sparser.mly"
 (
		Iformula.ECase 
			{
				Iformula.formula_case_branches = _3;
				Iformula.formula_case_pos = (get_pos 3) 
			}
	)
# 1856 "sparser.ml"
               : 'r_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sq_clist) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'one_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'r_constr_opt) in
    Obj.repr(
# 545 "sparser.mly"
 (Iformula.EBase 
						{
						 	Iformula.formula_ext_explicit_inst = _1;
						 	Iformula.formula_ext_implicit_inst = [];
							Iformula.formula_ext_exists = [];
						 	Iformula.formula_ext_base = _2;				
						 	Iformula.formula_ext_continuation = _3;
						 	Iformula.formula_ext_pos = (get_pos 2);
							} 
		)
# 1874 "sparser.ml"
               : 'r_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_constr) in
    Obj.repr(
# 560 "sparser.mly"
               ( (* each case of a view definition *)
	_1
  )
# 1883 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'one_constr) in
    Obj.repr(
# 563 "sparser.mly"
                                         (
	  F.mkOr _1 _3 (get_pos 2)
	)
# 1893 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 566 "sparser.mly"
          (
	  report_error (get_pos 1) ("parse error in constraints")
	)
# 1901 "sparser.ml"
               : 'disjunctive_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_constr) in
    Obj.repr(
# 571 "sparser.mly"
               ( _1 )
# 1908 "sparser.ml"
               : 'one_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'core_constr) in
    Obj.repr(
# 572 "sparser.mly"
                                                        (
	  match _5 with
		| F.Base ({F.formula_base_heap = h;
               F.formula_base_pure = p;
               F.formula_base_flow = fl;
               F.formula_base_branches = b}) ->
			F.mkExists _3 h p fl b (get_pos 1)
		| _ -> report_error (get_pos 4) ("only Base is expected here.")
	)
# 1924 "sparser.ml"
               : 'one_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'heap_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 585 "sparser.mly"
                                   ( F.replace_branches (snd _2) (F.formula_of_heap_with_flow _1 (fst _2) (get_pos 1)) )
# 1932 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 586 "sparser.mly"
                                   ( F.replace_branches (snd _2) (F.formula_of_pure_with_flow _1 (fst _2) (get_pos 1)) )
# 1940 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'heap_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'flows_and_branches) in
    Obj.repr(
# 587 "sparser.mly"
                                                   ( F.mkBase _1 _3 (fst _4) (snd _4) (get_pos 2) )
# 1949 "sparser.ml"
               : 'core_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'flow_constraints) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 591 "sparser.mly"
                                 ( (_1,_2))
# 1957 "sparser.ml"
               : 'flows_and_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt_branches) in
    Obj.repr(
# 592 "sparser.mly"
                ((stub_flow,_1))
# 1964 "sparser.ml"
               : 'flows_and_branches))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 595 "sparser.mly"
                     (_3)
# 1972 "sparser.ml"
               : 'flow_constraints))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 598 "sparser.mly"
                                                          ((fresh_branch_point_id _3))
# 1979 "sparser.ml"
               : 'opt_formula_label))
; (fun __caml_parser_env ->
    Obj.repr(
# 599 "sparser.mly"
 ((fresh_branch_point_id ""))
# 1985 "sparser.ml"
               : 'opt_formula_label))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'heap_rd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'heap_rw) in
    Obj.repr(
# 602 "sparser.mly"
                                            (F.mkPhase _2 _5 (get_pos 2))
# 1993 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'heap_rd) in
    Obj.repr(
# 603 "sparser.mly"
                          (F.mkPhase _2 F.HTrue (get_pos 2))
# 2000 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_rw) in
    Obj.repr(
# 604 "sparser.mly"
            (F.mkPhase F.HTrue _1 (get_pos 2))
# 2007 "sparser.ml"
               : 'heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_rd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 607 "sparser.mly"
                                        ( F.mkStar _1 _3 (get_pos 2) )
# 2015 "sparser.ml"
               : 'heap_rd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_rd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 608 "sparser.mly"
                                       ( F.mkConj _1 _3 (get_pos 2) )
# 2023 "sparser.ml"
               : 'heap_rd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 609 "sparser.mly"
                           (_1)
# 2030 "sparser.ml"
               : 'heap_rd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'heap_wr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'heap_constr) in
    Obj.repr(
# 612 "sparser.mly"
                                           ( F.mkStar _1 _4 (get_pos 2) )
# 2038 "sparser.ml"
               : 'heap_rw))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'heap_wr) in
    Obj.repr(
# 613 "sparser.mly"
            (F.mkPhase F.HTrue _1 (get_pos 2))
# 2045 "sparser.ml"
               : 'heap_rw))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_wr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 616 "sparser.mly"
                                    (F.mkStar _1 _3 (get_pos 2))
# 2053 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'heap_wr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 617 "sparser.mly"
                                        (F.mkStar _1 _3 (get_pos 2))
# 2061 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr) in
    Obj.repr(
# 618 "sparser.mly"
                       (_1)
# 2068 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_heap_constr_imm) in
    Obj.repr(
# 619 "sparser.mly"
                           (_1)
# 2075 "sparser.ml"
               : 'heap_wr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'heap_arg_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 623 "sparser.mly"
                                                                       (
	let h = F.HeapNode { F.h_formula_heap_node = _1;
						 F.h_formula_heap_name = _3;
						 F.h_formula_heap_imm = true;
						 F.h_formula_heap_full = false;
						 F.h_formula_heap_with_inv = false;
						 F.h_formula_heap_pseudo_data = false;
						 F.h_formula_heap_arguments = _5;
						 F.h_formula_heap_label = _8;
						 F.h_formula_heap_pos = get_pos 2 } in
	  h
  )
# 2096 "sparser.ml"
               : 'simple_heap_constr_imm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'opt_heap_arg_list2) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 635 "sparser.mly"
                                                                            (
	  let h = F.HeapNode2 { F.h_formula_heap2_node = _1;
							F.h_formula_heap2_name = _3;
							F.h_formula_heap2_imm = true;
							F.h_formula_heap2_full = false;
							F.h_formula_heap2_with_inv = false;
							F.h_formula_heap2_pseudo_data = false;
							F.h_formula_heap2_arguments = _5;
							F.h_formula_heap2_label = _8;
							F.h_formula_heap2_pos = get_pos 2 } in
		h
	)
# 2117 "sparser.ml"
               : 'simple_heap_constr_imm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'heap_arg_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 650 "sparser.mly"
                                                                   (
	let h = F.HeapNode { F.h_formula_heap_node = _1;
						 F.h_formula_heap_name = _3;
						 F.h_formula_heap_imm =  false;
						 F.h_formula_heap_full = false;
						 F.h_formula_heap_with_inv = false;
						 F.h_formula_heap_pseudo_data = false;
						 F.h_formula_heap_arguments = _5;
						 F.h_formula_heap_label = _7;
						 F.h_formula_heap_pos = get_pos 2 } in
	  h
  )
# 2138 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'opt_heap_arg_list2) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 662 "sparser.mly"
                                                                        (
	  let h = F.HeapNode2 { F.h_formula_heap2_node = _1;
							F.h_formula_heap2_name = _3;
							F.h_formula_heap2_imm = false;
							F.h_formula_heap2_full = false;
							F.h_formula_heap2_with_inv = false;
							F.h_formula_heap2_pseudo_data = false;
							F.h_formula_heap2_arguments = _5;
							F.h_formula_heap2_label = _7;
							F.h_formula_heap2_pos = get_pos 2 } in
		h
	)
# 2159 "sparser.ml"
               : 'simple_heap_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pure_constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_formula_label) in
    Obj.repr(
# 678 "sparser.mly"
                                         ( match _1 with 
			| P.BForm (b,_) -> P.BForm (b,_2)
		        | P.And _ -> _1
			| P.Or  (b1,b2,_,l) -> P.Or(b1,b2,_2,l)
	                | P.Not (b1,_,l) -> P.Not(b1,_2,l)
	                | P.Forall (q,b1,_,l)-> P.Forall(q,b1,_2,l)
			| P.Exists (q,b1,_,l)-> P.Exists(q,b1,_2,l))
# 2173 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pure_constr) in
    Obj.repr(
# 685 "sparser.mly"
                                                             ( P.mkAnd _1 _3 (get_pos 2) )
# 2181 "sparser.ml"
               : 'pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 689 "sparser.mly"
                               ( P.mkOr _1 _3 None (get_pos 2) )
# 2189 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunctive_pure_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_constr) in
    Obj.repr(
# 690 "sparser.mly"
                                           ( P.mkOr _1 _3 None (get_pos 2) )
# 2197 "sparser.ml"
               : 'disjunctive_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbconstr) in
    Obj.repr(
# 694 "sparser.mly"
             (
	fst _1
  )
# 2206 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_pure_constr) in
    Obj.repr(
# 697 "sparser.mly"
                                          (
	  _2
	)
# 2215 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    Obj.repr(
# 700 "sparser.mly"
                                                        (
	  let qf f v = P.mkExists [v] f None (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 2227 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_cid_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pure_constr) in
    Obj.repr(
# 705 "sparser.mly"
                                                        (
	  let qf f v = P.mkForall [v] f None (get_pos 1) in
	  let res = List.fold_left qf _5 _3 in
		res
	)
# 2239 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 710 "sparser.mly"
         (
	  P.mkTrue (get_pos 1)
	)
# 2247 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 713 "sparser.mly"
          (
	  P.mkFalse (get_pos 1)
	)
# 2255 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 716 "sparser.mly"
        (
	  P.BForm (P.mkBVar _1 (get_pos 1), None )
	)
# 2264 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 719 "sparser.mly"
            (
	  P.mkNot (P.BForm (P.mkBVar _2 (get_pos 2), None )) None (get_pos 1)
	)
# 2273 "sparser.ml"
               : 'simple_pure_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bconstr) in
    Obj.repr(
# 725 "sparser.mly"
            (
	(fst _1, snd _1)
  )
# 2282 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 728 "sparser.mly"
                           (
	  expand_exp_list P.mkNeq _1 _3 (get_pos 2)
	)
# 2292 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 731 "sparser.mly"
                          (
	  expand_exp_list P.mkEq _1 _3 (get_pos 2)
	)
# 2302 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 734 "sparser.mly"
                          (
	  expand_exp_list P.mkLt _1 _3 (get_pos 2)
	)
# 2312 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 737 "sparser.mly"
                           (
	  expand_exp_list P.mkLte _1 _3 (get_pos 2)
	)
# 2322 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 740 "sparser.mly"
                          (
	  expand_exp_list P.mkGt _1 _3 (get_pos 2)
	)
# 2332 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbconstr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 743 "sparser.mly"
                           (
	  expand_exp_list P.mkGte _1 _3 (get_pos 2)
	)
# 2342 "sparser.ml"
               : 'lbconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 749 "sparser.mly"
                           (
	let p = P.build_relation P.mkLt _1 _3 (get_pos 2) in
	  (p, Some _3)
  )
# 2353 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 753 "sparser.mly"
                            (
	  let p = P.build_relation P.mkLte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2364 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 757 "sparser.mly"
                           (
	  let p = P.build_relation P.mkGt _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2375 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 761 "sparser.mly"
                            (
	  let p = P.build_relation P.mkGte _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2386 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 765 "sparser.mly"
                           (
	  let p = P.build_relation P.mkEq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2397 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 769 "sparser.mly"
                            (
	  let p = P.build_relation P.mkNeq _1 _3 (get_pos 2) in
		(p, Some _3)
	)
# 2408 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 774 "sparser.mly"
                (
	  (P.BForm (P.BagIn (_1, _3, get_pos 2), None), None)
	)
# 2418 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 777 "sparser.mly"
                   (
	  (P.BForm (P.BagNotIn (_1, _3, get_pos 2), None), None)
	)
# 2428 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 780 "sparser.mly"
                     (
	  (P.BForm (P.BagSub (_1, _3, get_pos 2), None), None)
	)
# 2438 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 783 "sparser.mly"
                                       (
	  (P.BForm (P.BagMax (_3, _5, get_pos 2), None), None)
	)
# 2448 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cid) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cid) in
    Obj.repr(
# 786 "sparser.mly"
                                       (
	  (P.BForm (P.BagMin (_3, _5, get_pos 2), None), None)
	)
# 2458 "sparser.ml"
               : 'bconstr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 794 "sparser.mly"
        (
		P.Var (_1, get_pos 1)
  )
# 2467 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 797 "sparser.mly"
                    (
	  P.IConst (_1, get_pos 1)
	)
# 2476 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cid) in
    Obj.repr(
# 800 "sparser.mly"
                        (
	  P.mkMult (P.IConst (_1, get_pos 1)) (P.Var (_2, get_pos 2)) (get_pos 1)
	)
# 2486 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 803 "sparser.mly"
                   (
      P.mkMult _1 _3 (get_pos 2)
  )
# 2496 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 806 "sparser.mly"
                   (
	  P.mkAdd _1 _3 (get_pos 2)
	)
# 2506 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 809 "sparser.mly"
                    (
	  P.mkSubtract _1 _3 (get_pos 2)
	)
# 2516 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 812 "sparser.mly"
                            (
	  P.mkSubtract (P.IConst (0, get_pos 1)) _2 (get_pos 1)
	)
# 2525 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 815 "sparser.mly"
                                      (
	  P.mkMax _3 _5 (get_pos 1)
	)
# 2535 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 818 "sparser.mly"
                                      (
	  P.mkMin _3 _5 (get_pos 1)
	)
# 2545 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 821 "sparser.mly"
         (
	  P.Null (get_pos 1)
	)
# 2553 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 825 "sparser.mly"
                                (
	  P.Bag (_2, get_pos 1)
	)
# 2562 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 828 "sparser.mly"
                                      (
	  P.BagUnion (_3, get_pos 1)
	)
# 2571 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_cexp_list) in
    Obj.repr(
# 831 "sparser.mly"
                                          (
	  P.BagIntersect (_3, get_pos 1)
	)
# 2580 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'cexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'cexp) in
    Obj.repr(
# 834 "sparser.mly"
                                       (
	  P.BagDiff (_3, _5, get_pos 1)
	)
# 2590 "sparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 841 "sparser.mly"
    ( [] )
# 2596 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list) in
    Obj.repr(
# 842 "sparser.mly"
              ( _1 )
# 2603 "sparser.ml"
               : 'opt_cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp_list_rec) in
    Obj.repr(
# 846 "sparser.mly"
                  (
	List.rev _1
  )
# 2612 "sparser.ml"
               : 'cexp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 852 "sparser.mly"
         (
	[_1]
  )
# 2621 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp_list_rec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 855 "sparser.mly"
                             (
	  _3 :: _1
	)
# 2631 "sparser.ml"
               : 'cexp_list_rec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'extended_meta_constr) in
    Obj.repr(
# 864 "sparser.mly"
                                                           (
	(_2, _4)
  )
# 2641 "sparser.ml"
               : 'checkentail_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 870 "sparser.mly"
                                        (
	(_3)
  )
# 2650 "sparser.ml"
               : 'captureresidue_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'id_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 876 "sparser.mly"
                                                                                    (
	(_3, _6, _8)
  )
# 2661 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'meta_constr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 879 "sparser.mly"
                                                            (
	  ([], _3, _5)
	)
# 2671 "sparser.ml"
               : 'compose_cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 885 "sparser.mly"
                        (
		PCmd _2
  )
# 2680 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 888 "sparser.mly"
                               (
	  PVar _3
	)
# 2689 "sparser.ml"
               : 'print_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 894 "sparser.mly"
                        (Time(true, _3, get_pos 1))
# 2696 "sparser.ml"
               : 'time_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 895 "sparser.mly"
                         (Time(false, _3, get_pos 1))
# 2703 "sparser.ml"
               : 'time_cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'meta_constr) in
    Obj.repr(
# 898 "sparser.mly"
                                            (
	LetDef (_3, _5)
  )
# 2713 "sparser.ml"
               : 'let_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 904 "sparser.mly"
                      (
	MetaVar _2
  )
# 2722 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Iformula.struc_formula*bool) in
    Obj.repr(
# 907 "sparser.mly"
             (
	  MetaEForm (F.subst_stub_flow_struc n_flow (fst _1))
	)
# 2731 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 910 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2740 "sparser.ml"
               : 'extended_meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 915 "sparser.mly"
                      (
	MetaVar _2
  )
# 2749 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctive_constr) in
    Obj.repr(
# 918 "sparser.mly"
                       (
	  MetaForm (F.subst_stub_flow n_flow _1)
	)
# 2758 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compose_cmd) in
    Obj.repr(
# 921 "sparser.mly"
                (
	  MetaCompose _1
	)
# 2767 "sparser.ml"
               : 'meta_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'opt_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'disjunctive_constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'coercion_direction) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'disjunctive_constr) in
    Obj.repr(
# 927 "sparser.mly"
                                                                               (
	{ coercion_type = _4;
	  coercion_name = _2;
	  coercion_head = (F.subst_stub_flow top_flow _3);
	  coercion_body = (F.subst_stub_flow top_flow _5);
	  coercion_proof = Return ({ exp_return_val = None;
								 exp_return_path_id = None ;
								 exp_return_pos = get_pos 1 })
	}
  )
# 2786 "sparser.ml"
               : Iast.coercion_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 940 "sparser.mly"
              ( Left )
# 2792 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 941 "sparser.mly"
          ( Equiv )
# 2798 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 942 "sparser.mly"
               ( Right )
# 2804 "sparser.ml"
               : 'coercion_direction))
; (fun __caml_parser_env ->
    Obj.repr(
# 946 "sparser.mly"
    ( "" )
# 2810 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 947 "sparser.mly"
                                       ( _2 )
# 2817 "sparser.ml"
               : 'opt_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_array_type) in
    Obj.repr(
# 951 "sparser.mly"
                   ( _1 )
# 2824 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 952 "sparser.mly"
               ( _1 )
# 2831 "sparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 956 "sparser.mly"
        ( int_type )
# 2837 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 957 "sparser.mly"
          ( float_type )
# 2843 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 958 "sparser.mly"
         ( bool_type )
# 2849 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 959 "sparser.mly"
               ( Named _1 )
# 2856 "sparser.ml"
               : 'non_array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 963 "sparser.mly"
                              ( Array (int_type, None) )
# 2864 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_array_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rank_specifier) in
    Obj.repr(
# 964 "sparser.mly"
                                  ( Array (int_type, None) )
# 2872 "sparser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list_opt) in
    Obj.repr(
# 968 "sparser.mly"
                                   ()
# 2879 "sparser.ml"
               : 'rank_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 972 "sparser.mly"
    ()
# 2885 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comma_list) in
    Obj.repr(
# 973 "sparser.mly"
               ()
# 2892 "sparser.ml"
               : 'comma_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 977 "sparser.mly"
          ()
# 2898 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comma_list) in
    Obj.repr(
# 978 "sparser.mly"
                     ()
# 2905 "sparser.ml"
               : 'comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 982 "sparser.mly"
               ( [_1] )
# 2912 "sparser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 983 "sparser.mly"
                             ( _3 :: _1 )
# 2920 "sparser.ml"
               : 'id_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry data_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry view_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry coercion_decl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry formulas *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry opt_command_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Iast.prog_decl)
let data_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Iast.data_decl)
let view_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Iast.view_decl)
let coercion_decl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Iast.coercion_decl)
let formulas (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Iformula.struc_formula*bool)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Sleekcommons.command)
let opt_command_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Sleekcommons.command list)
;;
